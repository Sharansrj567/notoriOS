ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"notoriOS.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	buffer_overflow,1,1
  20              		.comm	dataPointsInStack,2,2
  21              		.comm	dataPointsInStackDesired,2,2
  22              		.comm	data,6600,4
  23              		.comm	modem_state,1,1
  24              		.comm	modem_start_time_stamp,4,4
  25              		.comm	modem_info,60,4
  26              		.comm	modem_stats,32,4
  27              		.comm	updatable_parameters,5,4
  28              		.syntax unified
  29              		.global _printf_float
  30              		.thumb
  31              		.syntax unified
  32              		.comm	http_request,10000,4
  33              		.comm	http_body,10000,4
  34              		.comm	http_route,200,4
  35              		.comm	system_info,28,4
  36              		.comm	system_settings,104,4
  37              		.comm	alarmMeasure,6,4
  38              		.comm	timeToMeasure,1,1
  39              		.comm	alarmSync,6,4
  40              		.comm	timeToSync,1,1
  41              		.comm	timeToSycnRemoteParams,1,1
  42              		.comm	hey,1,1
  43              		.section	.text.Wakeup_ISR,"ax",%progbits
  44              		.align	2
  45              		.global	Wakeup_ISR
  46              		.thumb
  47              		.thumb_func
  48              		.type	Wakeup_ISR, %function
  49              	Wakeup_ISR:
  50              	.LFB64:
  51              		.file 1 "notoriOS.c"
   1:notoriOS.c    **** /* ========================================
   2:notoriOS.c    ****  *
   3:notoriOS.c    ****  * OPEN-STORM.ORG
   4:notoriOS.c    ****  * notoriOS
   5:notoriOS.c    ****  * A non-premptive operating system for node.
   6:notoriOS.c    ****  *
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 2


   7:notoriOS.c    ****  * "To all the teachers that told me I'd never amount to nothin"
   8:notoriOS.c    ****  *      -Notorious BIG (1994)
   9:notoriOS.c    ****  *
  10:notoriOS.c    ****  * ========================================
  11:notoriOS.c    **** */
  12:notoriOS.c    **** 
  13:notoriOS.c    **** #include "notoriOS.h"
  14:notoriOS.c    **** 
  15:notoriOS.c    **** 
  16:notoriOS.c    **** // This function must always be called (when the Sleep Timer's interrupt
  17:notoriOS.c    **** // is disabled or enabled) after wake up to clear the ctw_int status bit.
  18:notoriOS.c    **** // It is required to call SleepTimer_GetStatus() within 1 ms (1 clock cycle
  19:notoriOS.c    **** // of the ILO) after CTW event occurred.
  20:notoriOS.c    **** CY_ISR(Wakeup_ISR) {
  52              		.loc 1 20 0
  53              		.cfi_startproc
  54              		@ args = 0, pretend = 0, frame = 0
  55              		@ frame_needed = 1, uses_anonymous_args = 0
  56 0000 80B5     		push	{r7, lr}
  57              		.cfi_def_cfa_offset 8
  58              		.cfi_offset 7, -8
  59              		.cfi_offset 14, -4
  60 0002 00AF     		add	r7, sp, #0
  61              		.cfi_def_cfa_register 7
  21:notoriOS.c    ****     // Returns the state of the Sleep Timer's status register, and clears the pending interrupt sta
  22:notoriOS.c    ****     SleepTimer_GetStatus();
  62              		.loc 1 22 0
  63 0004 FFF7FEFF 		bl	SleepTimer_GetStatus
  23:notoriOS.c    **** }
  64              		.loc 1 23 0
  65 0008 00BF     		nop
  66 000a 80BD     		pop	{r7, pc}
  67              		.cfi_endproc
  68              	.LFE64:
  69              		.size	Wakeup_ISR, .-Wakeup_ISR
  70              		.global	Data_fileName
  71              		.data
  72              		.align	2
  73              		.type	Data_fileName, %object
  74              		.size	Data_fileName, 30
  75              	Data_fileName:
  76 0000 64617461 		.ascii	"data.txt\000"
  76      2E747874 
  76      00
  77 0009 00000000 		.space	21
  77      00000000 
  77      00000000 
  77      00000000 
  77      00000000 
  78              		.comm	try_counter,1,1
  79              		.section	.rodata
  80              		.align	2
  81              	.LC0:
  82 0000 25582D25 		.ascii	"%X-%X\000"
  82      5800
  83 0006 0000     		.align	2
  84              	.LC1:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 3


  85 0008 6563322D 		.ascii	"ec2-13-59-131-167.us-east-2.compute.amazonaws.com\000"
  85      31332D35 
  85      392D3133 
  85      312D3136 
  85      372E7573 
  86 003a 0000     		.align	2
  87              	.LC2:
  88 003c 256400   		.ascii	"%d\000"
  89 003f 00       		.align	2
  90              	.LC3:
  91 0040 7265626F 		.ascii	"reboot\000"
  91      6F7400
  92              		.section	.text.ReadyOrNot,"ax",%progbits
  93              		.align	2
  94              		.global	ReadyOrNot
  95              		.thumb
  96              		.thumb_func
  97              		.type	ReadyOrNot, %function
  98              	ReadyOrNot:
  99              	.LFB65:
  24:notoriOS.c    **** 
  25:notoriOS.c    **** 
  26:notoriOS.c    **** uint8 syncData();               // Syncs data with server 
  27:notoriOS.c    **** uint8 configureRemoteParams();  // Syncs RTC with cell network and obtains meta-DB params
  28:notoriOS.c    **** uint8 makeMeasurements();       // Takes sensor measurements
  29:notoriOS.c    **** char  Data_fileName[30] = "data.txt";
  30:notoriOS.c    **** uint8 try_counter;
  31:notoriOS.c    **** 
  32:notoriOS.c    **** 
  33:notoriOS.c    **** // ==============================================
  34:notoriOS.c    **** // Ready or not, here I come, you can't hide
  35:notoriOS.c    **** // Gonna find you and take it slowly
  36:notoriOS.c    **** //      - The Fugees (1996)
  37:notoriOS.c    **** //
  38:notoriOS.c    **** // Initialize and critical hardware or routines 
  39:notoriOS.c    **** // ==============================================
  40:notoriOS.c    **** void ReadyOrNot()
  41:notoriOS.c    **** {
 100              		.loc 1 41 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 32
 103              		@ frame_needed = 1, uses_anonymous_args = 0
 104 0000 B0B5     		push	{r4, r5, r7, lr}
 105              		.cfi_def_cfa_offset 16
 106              		.cfi_offset 4, -16
 107              		.cfi_offset 5, -12
 108              		.cfi_offset 7, -8
 109              		.cfi_offset 14, -4
 110 0002 8AB0     		sub	sp, sp, #40
 111              		.cfi_def_cfa_offset 56
 112 0004 02AF     		add	r7, sp, #8
 113              		.cfi_def_cfa 7, 48
  42:notoriOS.c    ****     
  43:notoriOS.c    ****     isr_SleepTimer_StartEx(Wakeup_ISR); // Start Sleep ISR
 114              		.loc 1 43 0
 115 0006 3948     		ldr	r0, .L3
 116 0008 FFF7FEFF 		bl	isr_SleepTimer_StartEx
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 4


  44:notoriOS.c    ****     SleepTimer_Start();                 // Start SleepTimer Component
 117              		.loc 1 44 0
 118 000c FFF7FEFF 		bl	SleepTimer_Start
  45:notoriOS.c    ****     
  46:notoriOS.c    ****     RTC_WriteIntervalMask(0b11111111);  // Configures what interval handlers will be called from th
 119              		.loc 1 46 0
 120 0010 FF20     		movs	r0, #255
 121 0012 FFF7FEFF 		bl	RTC_WriteIntervalMask
  47:notoriOS.c    ****     RTC_Start();                        // Enables the RTC component
 122              		.loc 1 47 0
 123 0016 FFF7FEFF 		bl	RTC_Start
  48:notoriOS.c    ****     debug_start();                      // Start UART debug
 124              		.loc 1 48 0
 125 001a FFF7FEFF 		bl	debug_start
  49:notoriOS.c    ****     
  50:notoriOS.c    ****     modem_initialize();                 // Initialize the modem
 126              		.loc 1 50 0
 127 001e FFF7FEFF 		bl	modem_initialize
  51:notoriOS.c    ****     
  52:notoriOS.c    ****     updatable_parameters_initialize();  // Initialize sampling, measurement, and debug frequencies 
 128              		.loc 1 52 0
 129 0022 FFF7FEFF 		bl	updatable_parameters_initialize
  53:notoriOS.c    ****    
  54:notoriOS.c    ****     
  55:notoriOS.c    ****     // Collect system info and store in struct (modem ID, silicon ID, etc)
  56:notoriOS.c    ****       /* An array of char elements for the resulting string to be stored */
  57:notoriOS.c    ****     
  58:notoriOS.c    ****     
  59:notoriOS.c    ****     // Get unique ID of PSOC chip, this can be concatenated with the MODEM IDs to generate a unique
  60:notoriOS.c    ****     uint32 uniqueId[2];
  61:notoriOS.c    ****     // Returns the 64-bit unique ID of the device.
  62:notoriOS.c    ****     CyGetUniqueId(uniqueId); 
 130              		.loc 1 62 0
 131 0026 07F11403 		add	r3, r7, #20
 132 002a 1846     		mov	r0, r3
 133 002c FFF7FEFF 		bl	CyGetUniqueId
  63:notoriOS.c    ****     snprintf(system_info.chip_uniqueId,sizeof(system_info.chip_uniqueId),"%X-%X",(unsigned int)uniq
 134              		.loc 1 63 0
 135 0030 7A69     		ldr	r2, [r7, #20]
 136 0032 BB69     		ldr	r3, [r7, #24]
 137 0034 0093     		str	r3, [sp]
 138 0036 1346     		mov	r3, r2
 139 0038 2D4A     		ldr	r2, .L3+4
 140 003a 1821     		movs	r1, #24
 141 003c 2D48     		ldr	r0, .L3+8
 142 003e FFF7FEFF 		bl	snprintf
  64:notoriOS.c    ****     // The modem will track/popualte it's own IDs, so just point to them for now
  65:notoriOS.c    ****     system_info.modem_info = &modem_info;
 143              		.loc 1 65 0
 144 0042 2D4B     		ldr	r3, .L3+12
 145 0044 2D4A     		ldr	r2, .L3+16
 146 0046 1A60     		str	r2, [r3]
  66:notoriOS.c    ****     
  67:notoriOS.c    ****     // Configure server endpoints -- these should obviosuly be provided  remotely by the meta data-
  68:notoriOS.c    ****     snprintf(system_settings.ep_host,sizeof(system_settings.ep_host),"%s","ec2-13-59-131-167.us-eas
 147              		.loc 1 68 0
 148 0048 2D4A     		ldr	r2, .L3+20
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 5


 149 004a 2E4B     		ldr	r3, .L3+24
 150 004c 1446     		mov	r4, r2
 151 004e 1D46     		mov	r5, r3
 152 0050 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 153 0052 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 154 0054 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 155 0056 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 156 0058 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 157 005a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 158 005c 2B68     		ldr	r3, [r5]
 159 005e 2380     		strh	r3, [r4]	@ movhi
  69:notoriOS.c    ****    
  70:notoriOS.c    ****     system_settings.ep_port = 5000;
 160              		.loc 1 70 0
 161 0060 274B     		ldr	r3, .L3+20
 162 0062 41F28832 		movw	r2, #5000
 163 0066 5A66     		str	r2, [r3, #100]
  71:notoriOS.c    ****     // Don't need the following for new nodes
  72:notoriOS.c    ****     //snprintf(system_settings.ep_user,sizeof(system_settings.ep_user),"%s","generic_node");
  73:notoriOS.c    ****     //snprintf(system_settings.ep_pswd,sizeof(system_settings.ep_pswd),"%s","MakeFloodsCurrents");
  74:notoriOS.c    ****     //snprintf(system_settings.ep_database,sizeof(system_settings.ep_database),"%s","ARB");
  75:notoriOS.c    ****     //snprintf(system_settings.node_id,sizeof(system_settings.node_id),"%s","GGB000");
  76:notoriOS.c    ****         
  77:notoriOS.c    ****     
  78:notoriOS.c    ****     // Create a continuous alarm called alarmMeasure that triggers every 10 min (default) to take m
  79:notoriOS.c    ****     alarmMeasure = CreateAlarm(updatable_parameters.measure_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTI
 164              		.loc 1 79 0
 165 0068 274B     		ldr	r3, .L3+28
 166 006a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 167 006c 99B2     		uxth	r1, r3
 168 006e 274C     		ldr	r4, .L3+32
 169 0070 3846     		mov	r0, r7
 170 0072 0723     		movs	r3, #7
 171 0074 0122     		movs	r2, #1
 172 0076 FFF7FEFF 		bl	CreateAlarm
 173 007a 2246     		mov	r2, r4
 174 007c 3B46     		mov	r3, r7
 175 007e 1968     		ldr	r1, [r3]	@ unaligned
 176 0080 1160     		str	r1, [r2]	@ unaligned
 177 0082 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 178 0084 9380     		strh	r3, [r2, #4]	@ unaligned
  80:notoriOS.c    ****     timeToMeasure = 1u;
 179              		.loc 1 80 0
 180 0086 224B     		ldr	r3, .L3+36
 181 0088 0122     		movs	r2, #1
 182 008a 1A70     		strb	r2, [r3]
  81:notoriOS.c    ****     // Create a continuous alarm called alarmSync that triggers every 60 min (default) to sync the 
  82:notoriOS.c    ****     alarmSync = CreateAlarm(updatable_parameters.sync_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTINUOUS)
 183              		.loc 1 82 0
 184 008c 1E4B     		ldr	r3, .L3+28
 185 008e DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 186 0090 99B2     		uxth	r1, r3
 187 0092 204C     		ldr	r4, .L3+40
 188 0094 3846     		mov	r0, r7
 189 0096 0723     		movs	r3, #7
 190 0098 0122     		movs	r2, #1
 191 009a FFF7FEFF 		bl	CreateAlarm
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 6


 192 009e 2246     		mov	r2, r4
 193 00a0 3B46     		mov	r3, r7
 194 00a2 1968     		ldr	r1, [r3]	@ unaligned
 195 00a4 1160     		str	r1, [r2]	@ unaligned
 196 00a6 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 197 00a8 9380     		strh	r3, [r2, #4]	@ unaligned
  83:notoriOS.c    ****     timeToSync = 1u;
 198              		.loc 1 83 0
 199 00aa 1B4B     		ldr	r3, .L3+44
 200 00ac 0122     		movs	r2, #1
 201 00ae 1A70     		strb	r2, [r3]
  84:notoriOS.c    ****     
  85:notoriOS.c    ****     timeToSycnRemoteParams = 0u;//set to 1 if you want to get modem IDs and time -- no need to do t
 202              		.loc 1 85 0
 203 00b0 1A4B     		ldr	r3, .L3+48
 204 00b2 0022     		movs	r2, #0
 205 00b4 1A70     		strb	r2, [r3]
  86:notoriOS.c    ****     
  87:notoriOS.c    ****     // send hey to server saying the node rebooted
  88:notoriOS.c    ****     hey = 1u;
 206              		.loc 1 88 0
 207 00b6 1A4B     		ldr	r3, .L3+52
 208 00b8 0122     		movs	r2, #1
 209 00ba 1A70     		strb	r2, [r3]
  89:notoriOS.c    ****     char c_hey[10];
  90:notoriOS.c    ****     snprintf(c_hey,sizeof(c_hey),"%d",hey);
 210              		.loc 1 90 0
 211 00bc 184B     		ldr	r3, .L3+52
 212 00be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 213 00c0 07F10800 		add	r0, r7, #8
 214 00c4 174A     		ldr	r2, .L3+56
 215 00c6 0A21     		movs	r1, #10
 216 00c8 FFF7FEFF 		bl	snprintf
  91:notoriOS.c    ****     pushData("reboot",c_hey,getTimeStamp());
 217              		.loc 1 91 0
 218 00cc FFF7FEFF 		bl	getTimeStamp
 219 00d0 0246     		mov	r2, r0
 220 00d2 07F10803 		add	r3, r7, #8
 221 00d6 1946     		mov	r1, r3
 222 00d8 1348     		ldr	r0, .L3+60
 223 00da FFF7FEFF 		bl	pushData
  92:notoriOS.c    ****     
  93:notoriOS.c    ****     // Initialize the try counter to 0
  94:notoriOS.c    ****     uint8 try_counter = 0;
 224              		.loc 1 94 0
 225 00de 0023     		movs	r3, #0
 226 00e0 FB77     		strb	r3, [r7, #31]
  95:notoriOS.c    **** }
 227              		.loc 1 95 0
 228 00e2 00BF     		nop
 229 00e4 2037     		adds	r7, r7, #32
 230              		.cfi_def_cfa_offset 16
 231 00e6 BD46     		mov	sp, r7
 232              		.cfi_def_cfa_register 13
 233              		@ sp needed
 234 00e8 B0BD     		pop	{r4, r5, r7, pc}
 235              	.L4:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 7


 236 00ea 00BF     		.align	2
 237              	.L3:
 238 00ec 00000000 		.word	Wakeup_ISR
 239 00f0 00000000 		.word	.LC0
 240 00f4 04000000 		.word	system_info+4
 241 00f8 00000000 		.word	system_info
 242 00fc 00000000 		.word	modem_info
 243 0100 00000000 		.word	system_settings
 244 0104 08000000 		.word	.LC1
 245 0108 00000000 		.word	updatable_parameters
 246 010c 00000000 		.word	alarmMeasure
 247 0110 00000000 		.word	timeToMeasure
 248 0114 00000000 		.word	alarmSync
 249 0118 00000000 		.word	timeToSync
 250 011c 00000000 		.word	timeToSycnRemoteParams
 251 0120 00000000 		.word	hey
 252 0124 3C000000 		.word	.LC2
 253 0128 40000000 		.word	.LC3
 254              		.cfi_endproc
 255              	.LFE65:
 256              		.size	ReadyOrNot, .-ReadyOrNot
 257              		.section	.text.WorkWorkWorkWorkWorkWork,"ax",%progbits
 258              		.align	2
 259              		.global	WorkWorkWorkWorkWorkWork
 260              		.thumb
 261              		.thumb_func
 262              		.type	WorkWorkWorkWorkWorkWork, %function
 263              	WorkWorkWorkWorkWorkWork:
 264              	.LFB66:
  96:notoriOS.c    **** 
  97:notoriOS.c    **** 
  98:notoriOS.c    **** // ==============================================
  99:notoriOS.c    **** // You see me I be work, work, work, work, work, work 
 100:notoriOS.c    **** //      - Rhiana, feat Drake (2016)
 101:notoriOS.c    **** //
 102:notoriOS.c    **** // Prorcesses core tasks
 103:notoriOS.c    **** // ==============================================
 104:notoriOS.c    **** int WorkWorkWorkWorkWorkWork()
 105:notoriOS.c    **** {
 265              		.loc 1 105 0
 266              		.cfi_startproc
 267              		@ args = 0, pretend = 0, frame = 8
 268              		@ frame_needed = 1, uses_anonymous_args = 0
 269 0000 80B5     		push	{r7, lr}
 270              		.cfi_def_cfa_offset 8
 271              		.cfi_offset 7, -8
 272              		.cfi_offset 14, -4
 273 0002 82B0     		sub	sp, sp, #8
 274              		.cfi_def_cfa_offset 16
 275 0004 00AF     		add	r7, sp, #0
 276              		.cfi_def_cfa_register 7
 106:notoriOS.c    ****     
 107:notoriOS.c    ****     // The priority of these tasks is determined by the if statements
 108:notoriOS.c    ****     // For example, taking measurements should always precede data transmisison, even if both fire
 109:notoriOS.c    ****     // Getting meta-DB info and system configs precedes all
 110:notoriOS.c    ****     // That said, the modem is always qeried to check if it needs anything
 111:notoriOS.c    ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 8


 112:notoriOS.c    ****     // Checks to see if the timetoSyncRemoteParms flag is set
 113:notoriOS.c    ****     if(timeToSycnRemoteParams){
 277              		.loc 1 113 0
 278 0006 144B     		ldr	r3, .L10
 279 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 280 000a 002B     		cmp	r3, #0
 281 000c 06D0     		beq	.L6
 114:notoriOS.c    ****         timeToSycnRemoteParams = configureRemoteParams(); // Will return 0 when done sending data
 282              		.loc 1 114 0
 283 000e FFF7FEFF 		bl	configureRemoteParams
 284 0012 0346     		mov	r3, r0
 285 0014 1A46     		mov	r2, r3
 286 0016 104B     		ldr	r3, .L10
 287 0018 1A70     		strb	r2, [r3]
 288 001a 14E0     		b	.L7
 289              	.L6:
 115:notoriOS.c    ****     }
 116:notoriOS.c    ****     // Checks to see if the timetoMeasure flag is set
 117:notoriOS.c    ****     else if(timeToMeasure){
 290              		.loc 1 117 0
 291 001c 0F4B     		ldr	r3, .L10+4
 292 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 293 0020 002B     		cmp	r3, #0
 294 0022 06D0     		beq	.L8
 118:notoriOS.c    ****         //(int i=0; i<=30; i++){
 119:notoriOS.c    ****         timeToMeasure = makeMeasurements(); // Will return 0 when done sending data
 295              		.loc 1 119 0
 296 0024 FFF7FEFF 		bl	makeMeasurements
 297 0028 0346     		mov	r3, r0
 298 002a 1A46     		mov	r2, r3
 299 002c 0B4B     		ldr	r3, .L10+4
 300 002e 1A70     		strb	r2, [r3]
 301 0030 09E0     		b	.L7
 302              	.L8:
 120:notoriOS.c    ****         //CyDelay(1000u);
 121:notoriOS.c    ****         //}
 122:notoriOS.c    ****     }else if(timeToSync){
 303              		.loc 1 122 0
 304 0032 0B4B     		ldr	r3, .L10+8
 305 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 306 0036 002B     		cmp	r3, #0
 307 0038 05D0     		beq	.L7
 123:notoriOS.c    ****             timeToSync = syncData();
 308              		.loc 1 123 0
 309 003a FFF7FEFF 		bl	syncData
 310 003e 0346     		mov	r3, r0
 311 0040 1A46     		mov	r2, r3
 312 0042 074B     		ldr	r3, .L10+8
 313 0044 1A70     		strb	r2, [r3]
 314              	.L7:
 124:notoriOS.c    ****     }
 125:notoriOS.c    ****     // Print the countdown to the next alarm
 126:notoriOS.c    ****     //printNotif(NOTIF_TYPE_EVENT,"Measure CNT %d, Sync CNT %d, Data Wheel CNT %d",alarmMeasure.cur
 127:notoriOS.c    ****     
 128:notoriOS.c    ****     
 129:notoriOS.c    ****     // Check modem state machine on every loop
 130:notoriOS.c    ****     uint8 modem_status = modem_process_tasks();
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 9


 315              		.loc 1 130 0
 316 0046 FFF7FEFF 		bl	modem_process_tasks
 317 004a 0346     		mov	r3, r0
 318 004c FB71     		strb	r3, [r7, #7]
 131:notoriOS.c    **** 
 132:notoriOS.c    ****     return 0u +  modem_status;  
 319              		.loc 1 132 0
 320 004e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 133:notoriOS.c    **** }
 321              		.loc 1 133 0
 322 0050 1846     		mov	r0, r3
 323 0052 0837     		adds	r7, r7, #8
 324              		.cfi_def_cfa_offset 8
 325 0054 BD46     		mov	sp, r7
 326              		.cfi_def_cfa_register 13
 327              		@ sp needed
 328 0056 80BD     		pop	{r7, pc}
 329              	.L11:
 330              		.align	2
 331              	.L10:
 332 0058 00000000 		.word	timeToSycnRemoteParams
 333 005c 00000000 		.word	timeToMeasure
 334 0060 00000000 		.word	timeToSync
 335              		.cfi_endproc
 336              	.LFE66:
 337              		.size	WorkWorkWorkWorkWorkWork, .-WorkWorkWorkWorkWorkWork
 338              		.section	.text.LayBack,"ax",%progbits
 339              		.align	2
 340              		.global	LayBack
 341              		.thumb
 342              		.thumb_func
 343              		.type	LayBack, %function
 344              	LayBack:
 345              	.LFB67:
 134:notoriOS.c    **** 
 135:notoriOS.c    **** 
 136:notoriOS.c    **** 
 137:notoriOS.c    **** 
 138:notoriOS.c    **** 
 139:notoriOS.c    **** 
 140:notoriOS.c    **** // ==============================================
 141:notoriOS.c    **** // sippin on gin and juice, Laid back (with my mind on my money and my money on my mind)
 142:notoriOS.c    **** //      - Snoop Dogg (1993)
 143:notoriOS.c    **** //
 144:notoriOS.c    **** // Put all hardware to sleep and go into low power mode to conserve Amps
 145:notoriOS.c    **** // ==============================================
 146:notoriOS.c    **** void LayBack()
 147:notoriOS.c    **** {
 346              		.loc 1 147 0
 347              		.cfi_startproc
 348              		@ args = 0, pretend = 0, frame = 0
 349              		@ frame_needed = 1, uses_anonymous_args = 0
 350 0000 80B5     		push	{r7, lr}
 351              		.cfi_def_cfa_offset 8
 352              		.cfi_offset 7, -8
 353              		.cfi_offset 14, -4
 354 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 10


 355              		.cfi_def_cfa_register 7
 148:notoriOS.c    ****   
 149:notoriOS.c    ****     modem_sleep();  // Prepares system clocks for the Sleep mode
 356              		.loc 1 149 0
 357 0004 FFF7FEFF 		bl	modem_sleep
 150:notoriOS.c    ****     
 151:notoriOS.c    ****     // Important, call this last because we want to sleep uart before shutting down
 152:notoriOS.c    ****     debug_sleep();  // Function to sleep UART debug
 358              		.loc 1 152 0
 359 0008 FFF7FEFF 		bl	debug_sleep
 153:notoriOS.c    ****     
 154:notoriOS.c    ****     CyPmSaveClocks(); // Called to prep system to sleep/hiberanate. Saves all states of clocking sy
 360              		.loc 1 154 0
 361 000c FFF7FEFF 		bl	CyPmSaveClocks
 155:notoriOS.c    ****     
 156:notoriOS.c    ****     // Switch to the Sleep Mode for the other devices:
 157:notoriOS.c    ****     //  - PM_SLEEP_TIME_NONE: wakeup time is defined by Sleep Timer
 158:notoriOS.c    ****     //  - PM_SLEEP_SRC_CTW :  wakeup on CTW sources is allowed
 159:notoriOS.c    ****     //  - If real-time clock is used, it will also wake the device
 160:notoriOS.c    ****     //can also wake up from a pin intterup (PICU). This is useful with the moderm UART
 161:notoriOS.c    ****     //CyPmHibernate();
 162:notoriOS.c    ****     //CyPmSleep(PM_SLEEP_TIME_NONE, PM_SLEEP_SRC_CTW & PM_SLEEP_SRC_PICU);
 163:notoriOS.c    **** 
 164:notoriOS.c    ****     CyPmSleep(PM_SLEEP_TIME_NONE, PM_SLEEP_SRC_CTW & PM_SLEEP_SRC_ONE_PPS); // Puts the part into t
 362              		.loc 1 164 0
 363 0010 4FF40061 		mov	r1, #2048
 364 0014 0020     		movs	r0, #0
 365 0016 FFF7FEFF 		bl	CyPmSleep
 165:notoriOS.c    **** 
 166:notoriOS.c    ****     CyPmRestoreClocks();    // Restore clock configuration.
 366              		.loc 1 166 0
 367 001a FFF7FEFF 		bl	CyPmRestoreClocks
 167:notoriOS.c    **** 
 168:notoriOS.c    ****     debug_wakeup();         // Function to wakeup UART debug.
 368              		.loc 1 168 0
 369 001e FFF7FEFF 		bl	debug_wakeup
 169:notoriOS.c    ****     modem_wakeup();         // Function to wakeup modem.
 370              		.loc 1 169 0
 371 0022 FFF7FEFF 		bl	modem_wakeup
 170:notoriOS.c    **** 
 171:notoriOS.c    **** }
 372              		.loc 1 171 0
 373 0026 00BF     		nop
 374 0028 80BD     		pop	{r7, pc}
 375              		.cfi_endproc
 376              	.LFE67:
 377              		.size	LayBack, .-LayBack
 378 002a 00BF     		.section	.text.AyoItsTime,"ax",%progbits
 379              		.align	2
 380              		.global	AyoItsTime
 381              		.thumb
 382              		.thumb_func
 383              		.type	AyoItsTime, %function
 384              	AyoItsTime:
 385              	.LFB68:
 172:notoriOS.c    **** 
 173:notoriOS.c    **** 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 11


 174:notoriOS.c    **** // ==============================================
 175:notoriOS.c    **** // I never sleep, 'cause sleep is the cousin of death
 176:notoriOS.c    **** //      - NAS (1994)
 177:notoriOS.c    **** //
 178:notoriOS.c    **** // This is the scheduler. It's called from various interrupts and timers,
 179:notoriOS.c    **** // ...in particular from fuctions with in the real-tiem clock interrupts (RTC_INT.c)
 180:notoriOS.c    **** // It will add tasks to the work queue,
 181:notoriOS.c    **** // which will be executed eventually by WorkWorkWorkWorkWorkWork()
 182:notoriOS.c    **** // ==============================================
 183:notoriOS.c    **** void AyoItsTime(uint8 alarmType)
 184:notoriOS.c    **** {
 386              		.loc 1 184 0
 387              		.cfi_startproc
 388              		@ args = 0, pretend = 0, frame = 8
 389              		@ frame_needed = 1, uses_anonymous_args = 0
 390 0000 80B5     		push	{r7, lr}
 391              		.cfi_def_cfa_offset 8
 392              		.cfi_offset 7, -8
 393              		.cfi_offset 14, -4
 394 0002 82B0     		sub	sp, sp, #8
 395              		.cfi_def_cfa_offset 16
 396 0004 00AF     		add	r7, sp, #0
 397              		.cfi_def_cfa_register 7
 398 0006 0346     		mov	r3, r0
 399 0008 FB71     		strb	r3, [r7, #7]
 185:notoriOS.c    ****     // Checks if the alarm is up and if so, sets the flag.
 186:notoriOS.c    ****     if(AlarmReady(&alarmMeasure,alarmType))
 400              		.loc 1 186 0
 401 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 402 000c 1946     		mov	r1, r3
 403 000e 0C48     		ldr	r0, .L17
 404 0010 FFF7FEFF 		bl	AlarmReady
 405 0014 0346     		mov	r3, r0
 406 0016 002B     		cmp	r3, #0
 407 0018 02D0     		beq	.L14
 187:notoriOS.c    ****     {
 188:notoriOS.c    ****          // Flag new task as "ready" and pass off to workworkworkworkwork()
 189:notoriOS.c    ****         timeToMeasure = 1u;
 408              		.loc 1 189 0
 409 001a 0A4B     		ldr	r3, .L17+4
 410 001c 0122     		movs	r2, #1
 411 001e 1A70     		strb	r2, [r3]
 412              	.L14:
 190:notoriOS.c    ****         //printNotif(NOTIF_TYPE_EVENT,"Measure Alarm");
 191:notoriOS.c    ****         
 192:notoriOS.c    ****     }
 193:notoriOS.c    ****     if(AlarmReady(&alarmSync,alarmType))
 413              		.loc 1 193 0
 414 0020 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 415 0022 1946     		mov	r1, r3
 416 0024 0848     		ldr	r0, .L17+8
 417 0026 FFF7FEFF 		bl	AlarmReady
 418 002a 0346     		mov	r3, r0
 419 002c 002B     		cmp	r3, #0
 420 002e 02D0     		beq	.L16
 194:notoriOS.c    ****     {
 195:notoriOS.c    ****         // Create new task and pass off to workworkworkworkwork()
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 12


 196:notoriOS.c    ****         timeToSync = 1u;
 421              		.loc 1 196 0
 422 0030 064B     		ldr	r3, .L17+12
 423 0032 0122     		movs	r2, #1
 424 0034 1A70     		strb	r2, [r3]
 425              	.L16:
 197:notoriOS.c    ****          //printNotif(NOTIF_TYPE_EVENT,"Sync Alarm");
 198:notoriOS.c    ****     }
 199:notoriOS.c    ****     
 200:notoriOS.c    **** }
 426              		.loc 1 200 0
 427 0036 00BF     		nop
 428 0038 0837     		adds	r7, r7, #8
 429              		.cfi_def_cfa_offset 8
 430 003a BD46     		mov	sp, r7
 431              		.cfi_def_cfa_register 13
 432              		@ sp needed
 433 003c 80BD     		pop	{r7, pc}
 434              	.L18:
 435 003e 00BF     		.align	2
 436              	.L17:
 437 0040 00000000 		.word	alarmMeasure
 438 0044 00000000 		.word	timeToMeasure
 439 0048 00000000 		.word	alarmSync
 440 004c 00000000 		.word	timeToSync
 441              		.cfi_endproc
 442              	.LFE68:
 443              		.size	AyoItsTime, .-AyoItsTime
 444              		.section	.text.AlarmReady,"ax",%progbits
 445              		.align	2
 446              		.global	AlarmReady
 447              		.thumb
 448              		.thumb_func
 449              		.type	AlarmReady, %function
 450              	AlarmReady:
 451              	.LFB69:
 201:notoriOS.c    **** 
 202:notoriOS.c    **** 
 203:notoriOS.c    **** // ==============================================
 204:notoriOS.c    **** // Determines when an alarm is ready to trigger, which will be handeled by another cutions
 205:notoriOS.c    **** // ==============================================
 206:notoriOS.c    **** uint8 AlarmReady(alarm * alarmToBeUpdated, uint8 alarmType)
 207:notoriOS.c    **** {
 452              		.loc 1 207 0
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 8
 455              		@ frame_needed = 1, uses_anonymous_args = 0
 456 0000 80B5     		push	{r7, lr}
 457              		.cfi_def_cfa_offset 8
 458              		.cfi_offset 7, -8
 459              		.cfi_offset 14, -4
 460 0002 82B0     		sub	sp, sp, #8
 461              		.cfi_def_cfa_offset 16
 462 0004 00AF     		add	r7, sp, #0
 463              		.cfi_def_cfa_register 7
 464 0006 7860     		str	r0, [r7, #4]
 465 0008 0B46     		mov	r3, r1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 13


 466 000a FB70     		strb	r3, [r7, #3]
 208:notoriOS.c    ****     // if the countDownType matches the alarmType
 209:notoriOS.c    ****     if(alarmToBeUpdated->countDownType == alarmType){
 467              		.loc 1 209 0
 468 000c 7B68     		ldr	r3, [r7, #4]
 469 000e 1B79     		ldrb	r3, [r3, #4]
 470 0010 DBB2     		uxtb	r3, r3
 471 0012 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 472 0014 9A42     		cmp	r2, r3
 473 0016 12D1     		bne	.L20
 210:notoriOS.c    ****        
 211:notoriOS.c    ****         // In the Post-decrement old value is first used in a expression and then old value will be
 212:notoriOS.c    ****         // Decrement the count down value by 1
 213:notoriOS.c    ****         alarmToBeUpdated->currentCountDownValue--;
 474              		.loc 1 213 0
 475 0018 7B68     		ldr	r3, [r7, #4]
 476 001a 5B88     		ldrh	r3, [r3, #2]	@ movhi
 477 001c 1BB2     		sxth	r3, r3
 478 001e 9BB2     		uxth	r3, r3
 479 0020 013B     		subs	r3, r3, #1
 480 0022 9BB2     		uxth	r3, r3
 481 0024 1AB2     		sxth	r2, r3
 482 0026 7B68     		ldr	r3, [r7, #4]
 483 0028 5A80     		strh	r2, [r3, #2]	@ movhi
 214:notoriOS.c    ****         // If the current count is 0, then reset the alarm
 215:notoriOS.c    ****         if(alarmToBeUpdated->currentCountDownValue <= 0){
 484              		.loc 1 215 0
 485 002a 7B68     		ldr	r3, [r7, #4]
 486 002c 5B88     		ldrh	r3, [r3, #2]	@ movhi
 487 002e 1BB2     		sxth	r3, r3
 488 0030 002B     		cmp	r3, #0
 489 0032 04DC     		bgt	.L20
 216:notoriOS.c    ****             ResetAlarm(alarmToBeUpdated);
 490              		.loc 1 216 0
 491 0034 7868     		ldr	r0, [r7, #4]
 492 0036 FFF7FEFF 		bl	ResetAlarm
 217:notoriOS.c    ****             return 1u;
 493              		.loc 1 217 0
 494 003a 0123     		movs	r3, #1
 495 003c 00E0     		b	.L21
 496              	.L20:
 218:notoriOS.c    ****         } 
 219:notoriOS.c    ****     }
 220:notoriOS.c    ****     
 221:notoriOS.c    ****     return 0u; // Otherwise return 0
 497              		.loc 1 221 0
 498 003e 0023     		movs	r3, #0
 499              	.L21:
 222:notoriOS.c    **** }
 500              		.loc 1 222 0
 501 0040 1846     		mov	r0, r3
 502 0042 0837     		adds	r7, r7, #8
 503              		.cfi_def_cfa_offset 8
 504 0044 BD46     		mov	sp, r7
 505              		.cfi_def_cfa_register 13
 506              		@ sp needed
 507 0046 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 14


 508              		.cfi_endproc
 509              	.LFE69:
 510              		.size	AlarmReady, .-AlarmReady
 511              		.section	.text.ResetAlarm,"ax",%progbits
 512              		.align	2
 513              		.global	ResetAlarm
 514              		.thumb
 515              		.thumb_func
 516              		.type	ResetAlarm, %function
 517              	ResetAlarm:
 518              	.LFB70:
 223:notoriOS.c    **** 
 224:notoriOS.c    **** // ==============================================
 225:notoriOS.c    **** // Resets an alarm, which will be handeled by other executions
 226:notoriOS.c    **** // ==============================================
 227:notoriOS.c    **** void ResetAlarm(alarm * alarmToBeReset)
 228:notoriOS.c    **** {
 519              		.loc 1 228 0
 520              		.cfi_startproc
 521              		@ args = 0, pretend = 0, frame = 8
 522              		@ frame_needed = 1, uses_anonymous_args = 0
 523              		@ link register save eliminated.
 524 0000 80B4     		push	{r7}
 525              		.cfi_def_cfa_offset 4
 526              		.cfi_offset 7, -4
 527 0002 83B0     		sub	sp, sp, #12
 528              		.cfi_def_cfa_offset 16
 529 0004 00AF     		add	r7, sp, #0
 530              		.cfi_def_cfa_register 7
 531 0006 7860     		str	r0, [r7, #4]
 229:notoriOS.c    ****     // resets the alarm when the current count down value equals the set alarm count down value
 230:notoriOS.c    ****     alarmToBeReset->currentCountDownValue = alarmToBeReset->countDownValue;
 532              		.loc 1 230 0
 533 0008 7B68     		ldr	r3, [r7, #4]
 534 000a 1B88     		ldrh	r3, [r3]	@ movhi
 535 000c 9BB2     		uxth	r3, r3
 536 000e 1AB2     		sxth	r2, r3
 537 0010 7B68     		ldr	r3, [r7, #4]
 538 0012 5A80     		strh	r2, [r3, #2]	@ movhi
 231:notoriOS.c    **** }
 539              		.loc 1 231 0
 540 0014 00BF     		nop
 541 0016 0C37     		adds	r7, r7, #12
 542              		.cfi_def_cfa_offset 4
 543 0018 BD46     		mov	sp, r7
 544              		.cfi_def_cfa_register 13
 545              		@ sp needed
 546 001a 80BC     		pop	{r7}
 547              		.cfi_restore 7
 548              		.cfi_def_cfa_offset 0
 549 001c 7047     		bx	lr
 550              		.cfi_endproc
 551              	.LFE70:
 552              		.size	ResetAlarm, .-ResetAlarm
 553 001e 00BF     		.section	.text.CreateAlarm,"ax",%progbits
 554              		.align	2
 555              		.global	CreateAlarm
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 15


 556              		.thumb
 557              		.thumb_func
 558              		.type	CreateAlarm, %function
 559              	CreateAlarm:
 560              	.LFB71:
 232:notoriOS.c    **** 
 233:notoriOS.c    **** // ==============================================
 234:notoriOS.c    **** // Creates a new alarm, which will be handeled by another cutions
 235:notoriOS.c    **** // ==============================================
 236:notoriOS.c    **** alarm CreateAlarm(uint16 countDownValue, uint8 countDownType,uint8 countDownResetCondition)
 237:notoriOS.c    **** {
 561              		.loc 1 237 0
 562              		.cfi_startproc
 563              		@ args = 0, pretend = 0, frame = 16
 564              		@ frame_needed = 1, uses_anonymous_args = 0
 565              		@ link register save eliminated.
 566 0000 80B4     		push	{r7}
 567              		.cfi_def_cfa_offset 4
 568              		.cfi_offset 7, -4
 569 0002 85B0     		sub	sp, sp, #20
 570              		.cfi_def_cfa_offset 24
 571 0004 00AF     		add	r7, sp, #0
 572              		.cfi_def_cfa_register 7
 573 0006 7860     		str	r0, [r7, #4]
 574 0008 0846     		mov	r0, r1
 575 000a 1146     		mov	r1, r2
 576 000c 1A46     		mov	r2, r3
 577 000e 0346     		mov	r3, r0	@ movhi
 578 0010 7B80     		strh	r3, [r7, #2]	@ movhi
 579 0012 0B46     		mov	r3, r1
 580 0014 7B70     		strb	r3, [r7, #1]
 581 0016 1346     		mov	r3, r2
 582 0018 3B70     		strb	r3, [r7]
 238:notoriOS.c    ****     // Creates variable newAlarm of the data structure type alarm
 239:notoriOS.c    ****     alarm newAlarm;
 240:notoriOS.c    ****     
 241:notoriOS.c    ****     // Defines the different params of an alarm: # of ticks, alarm type (sec, min, etc.), & continu
 242:notoriOS.c    ****     newAlarm.countDownValue = countDownValue;
 583              		.loc 1 242 0
 584 001a 7B88     		ldrh	r3, [r7, #2]	@ movhi
 585 001c 3B81     		strh	r3, [r7, #8]	@ movhi
 243:notoriOS.c    ****     newAlarm.countDownType = countDownType;
 586              		.loc 1 243 0
 587 001e 7B78     		ldrb	r3, [r7, #1]
 588 0020 3B73     		strb	r3, [r7, #12]
 244:notoriOS.c    ****     newAlarm.countDownResetCondition = countDownResetCondition;
 589              		.loc 1 244 0
 590 0022 3B78     		ldrb	r3, [r7]
 591 0024 7B73     		strb	r3, [r7, #13]
 245:notoriOS.c    ****     
 246:notoriOS.c    ****     // If you want a reccuring alarm (e.g. resets freshly each hour), then add
 247:notoriOS.c    ****     // Account for already exprired time using the RTC. Otherwise, set to the countDownValue
 248:notoriOS.c    ****     newAlarm.currentCountDownValue = countDownValue;
 592              		.loc 1 248 0
 593 0026 B7F90230 		ldrsh	r3, [r7, #2]
 594 002a 7B81     		strh	r3, [r7, #10]	@ movhi
 249:notoriOS.c    ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 16


 250:notoriOS.c    ****     return newAlarm;
 595              		.loc 1 250 0
 596 002c 7B68     		ldr	r3, [r7, #4]
 597 002e 1A46     		mov	r2, r3
 598 0030 07F10803 		add	r3, r7, #8
 599 0034 1868     		ldr	r0, [r3]	@ unaligned
 600 0036 1060     		str	r0, [r2]	@ unaligned
 601 0038 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 602 003a 9380     		strh	r3, [r2, #4]	@ unaligned
 251:notoriOS.c    ****     
 252:notoriOS.c    **** }
 603              		.loc 1 252 0
 604 003c 7868     		ldr	r0, [r7, #4]
 605 003e 1437     		adds	r7, r7, #20
 606              		.cfi_def_cfa_offset 4
 607 0040 BD46     		mov	sp, r7
 608              		.cfi_def_cfa_register 13
 609              		@ sp needed
 610 0042 80BC     		pop	{r7}
 611              		.cfi_restore 7
 612              		.cfi_def_cfa_offset 0
 613 0044 7047     		bx	lr
 614              		.cfi_endproc
 615              	.LFE71:
 616              		.size	CreateAlarm, .-CreateAlarm
 617 0046 00BF     		.section	.rodata
 618 0047 00       		.align	2
 619              	.LC4:
 620 0048 2D2D2D2D 		.ascii	"-------------BEGIN TESTS---------------\012\012\000"
 620      2D2D2D2D 
 620      2D2D2D2D 
 620      2D424547 
 620      494E2054 
 621 0072 0000     		.align	2
 622              	.LC5:
 623 0074 4D454944 		.ascii	"MEID=%s, SIMID=%s, DEVICEID=%s\000"
 623      3D25732C 
 623      2053494D 
 623      49443D25 
 623      732C2044 
 624 0093 00       		.align	2
 625              	.LC6:
 626 0094 0A0A2D2D 		.ascii	"\012\012-------------END TESTS---------------\012\012"
 626      2D2D2D2D 
 626      2D2D2D2D 
 626      2D2D2D45 
 626      4E442054 
 627 00bd 00       		.ascii	"\000"
 628              		.section	.text.ChickityCheckYourselfBeforeYouWreckYourself,"ax",%progbits
 629              		.align	2
 630              		.global	ChickityCheckYourselfBeforeYouWreckYourself
 631              		.thumb
 632              		.thumb_func
 633              		.type	ChickityCheckYourselfBeforeYouWreckYourself, %function
 634              	ChickityCheckYourselfBeforeYouWreckYourself:
 635              	.LFB72:
 253:notoriOS.c    **** 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 17


 254:notoriOS.c    **** // ==============================================
 255:notoriOS.c    **** // Dropping bombs on your moms
 256:notoriOS.c    **** //      - Ice Cube (1992)
 257:notoriOS.c    **** //
 258:notoriOS.c    **** // This is the global testing function, which runs all relevant tests
 259:notoriOS.c    **** // If you make a new components, it could be good to call its tester function here 
 260:notoriOS.c    **** // ==============================================
 261:notoriOS.c    **** void ChickityCheckYourselfBeforeYouWreckYourself(){
 636              		.loc 1 261 0
 637              		.cfi_startproc
 638              		@ args = 0, pretend = 0, frame = 2328
 639              		@ frame_needed = 1, uses_anonymous_args = 0
 640 0000 90B5     		push	{r4, r7, lr}
 641              		.cfi_def_cfa_offset 12
 642              		.cfi_offset 4, -12
 643              		.cfi_offset 7, -8
 644              		.cfi_offset 14, -4
 645 0002 ADF6942D 		subw	sp, sp, #2708
 646              		.cfi_def_cfa_offset 2720
 647 0006 5EAF     		add	r7, sp, #376
 648              		.cfi_def_cfa 7, 2344
 262:notoriOS.c    **** 
 263:notoriOS.c    ****     //test_t t_influx = influx_test();
 264:notoriOS.c    ****     //printTestStatus(t_influx);
 265:notoriOS.c    ****     
 266:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"-------------BEGIN TESTS---------------\n\n");
 649              		.loc 1 266 0
 650 0008 4249     		ldr	r1, .L26
 651 000a 0320     		movs	r0, #3
 652 000c FFF7FEFF 		bl	printNotif
 267:notoriOS.c    ****     
 268:notoriOS.c    ****     // Test level sensor
 269:notoriOS.c    ****     test_t t_level_sensor = level_sensor_test();  
 653              		.loc 1 269 0
 654 0010 07F29473 		addw	r3, r7, #1940
 655 0014 1846     		mov	r0, r3
 656 0016 FFF7FEFF 		bl	level_sensor_test
 270:notoriOS.c    ****     printTestStatus(t_level_sensor);
 657              		.loc 1 270 0
 658 001a 07F29474 		addw	r4, r7, #1940
 659 001e 6846     		mov	r0, sp
 660 0020 04F11003 		add	r3, r4, #16
 661 0024 40F27112 		movw	r2, #369
 662 0028 1946     		mov	r1, r3
 663 002a FFF7FEFF 		bl	memcpy
 664 002e 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 665 0032 FFF7FEFF 		bl	printTestStatus
 271:notoriOS.c    ****     
 272:notoriOS.c    ****     // Test Valve
 273:notoriOS.c    ****     test_t t_valve = valve_test();
 666              		.loc 1 273 0
 667 0036 07F5C263 		add	r3, r7, #1552
 668 003a 1846     		mov	r0, r3
 669 003c FFF7FEFF 		bl	valve_test
 274:notoriOS.c    ****     printTestStatus(t_valve);
 670              		.loc 1 274 0
 671 0040 07F5C264 		add	r4, r7, #1552
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 18


 672 0044 6846     		mov	r0, sp
 673 0046 04F11003 		add	r3, r4, #16
 674 004a 40F27112 		movw	r2, #369
 675 004e 1946     		mov	r1, r3
 676 0050 FFF7FEFF 		bl	memcpy
 677 0054 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 678 0058 FFF7FEFF 		bl	printTestStatus
 275:notoriOS.c    ****     
 276:notoriOS.c    ****     // Test voltages
 277:notoriOS.c    ****     test_t t_voltages = voltages_test();
 679              		.loc 1 277 0
 680 005c 07F28C43 		addw	r3, r7, #1164
 681 0060 1846     		mov	r0, r3
 682 0062 FFF7FEFF 		bl	voltages_test
 278:notoriOS.c    ****     printTestStatus(t_voltages);
 683              		.loc 1 278 0
 684 0066 07F28C44 		addw	r4, r7, #1164
 685 006a 6846     		mov	r0, sp
 686 006c 04F11003 		add	r3, r4, #16
 687 0070 40F27112 		movw	r2, #369
 688 0074 1946     		mov	r1, r3
 689 0076 FFF7FEFF 		bl	memcpy
 690 007a 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 691 007e FFF7FEFF 		bl	printTestStatus
 279:notoriOS.c    ****  
 280:notoriOS.c    ****     // Test voltages
 281:notoriOS.c    ****     test_t t_pressure = pressure_sensor_test();
 692              		.loc 1 281 0
 693 0082 07F54273 		add	r3, r7, #776
 694 0086 1846     		mov	r0, r3
 695 0088 FFF7FEFF 		bl	pressure_sensor_test
 282:notoriOS.c    ****     printTestStatus(t_pressure);
 696              		.loc 1 282 0
 697 008c 07F54274 		add	r4, r7, #776
 698 0090 6846     		mov	r0, sp
 699 0092 04F11003 		add	r3, r4, #16
 700 0096 40F27112 		movw	r2, #369
 701 009a 1946     		mov	r1, r3
 702 009c FFF7FEFF 		bl	memcpy
 703 00a0 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 704 00a4 FFF7FEFF 		bl	printTestStatus
 283:notoriOS.c    ****     
 284:notoriOS.c    ****     // Test SD card
 285:notoriOS.c    ****     test_t t_sd_card = SD_card_test();
 705              		.loc 1 285 0
 706 00a8 07F5C273 		add	r3, r7, #388
 707 00ac 1846     		mov	r0, r3
 708 00ae FFF7FEFF 		bl	SD_card_test
 286:notoriOS.c    ****     printTestStatus(t_sd_card);
 709              		.loc 1 286 0
 710 00b2 07F5C274 		add	r4, r7, #388
 711 00b6 6846     		mov	r0, sp
 712 00b8 04F11003 		add	r3, r4, #16
 713 00bc 40F27112 		movw	r2, #369
 714 00c0 1946     		mov	r1, r3
 715 00c2 FFF7FEFF 		bl	memcpy
 716 00c6 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 19


 717 00ca FFF7FEFF 		bl	printTestStatus
 287:notoriOS.c    ****     
 288:notoriOS.c    ****     // Test modem
 289:notoriOS.c    ****     test_t t_modem = modem_test();
 718              		.loc 1 289 0
 719 00ce 3B46     		mov	r3, r7
 720 00d0 1846     		mov	r0, r3
 721 00d2 FFF7FEFF 		bl	modem_test
 290:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"MEID=%s, SIMID=%s, DEVICEID=%s",modem_info.imei,modem_info.sim_i
 722              		.loc 1 290 0
 723 00d6 104B     		ldr	r3, .L26+4
 724 00d8 0093     		str	r3, [sp]
 725 00da 104B     		ldr	r3, .L26+8
 726 00dc 104A     		ldr	r2, .L26+12
 727 00de 1149     		ldr	r1, .L26+16
 728 00e0 0320     		movs	r0, #3
 729 00e2 FFF7FEFF 		bl	printNotif
 291:notoriOS.c    ****     printTestStatus(t_modem);
 730              		.loc 1 291 0
 731 00e6 3C46     		mov	r4, r7
 732 00e8 6846     		mov	r0, sp
 733 00ea 04F11003 		add	r3, r4, #16
 734 00ee 40F27112 		movw	r2, #369
 735 00f2 1946     		mov	r1, r3
 736 00f4 FFF7FEFF 		bl	memcpy
 737 00f8 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 738 00fc FFF7FEFF 		bl	printTestStatus
 292:notoriOS.c    ****     
 293:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"\n\n-------------END TESTS---------------\n\n");
 739              		.loc 1 293 0
 740 0100 0949     		ldr	r1, .L26+20
 741 0102 0320     		movs	r0, #3
 742 0104 FFF7FEFF 		bl	printNotif
 294:notoriOS.c    **** 
 295:notoriOS.c    **** }
 743              		.loc 1 295 0
 744 0108 00BF     		nop
 745 010a 07F61C17 		addw	r7, r7, #2332
 746              		.cfi_def_cfa_offset 12
 747 010e BD46     		mov	sp, r7
 748              		.cfi_def_cfa_register 13
 749              		@ sp needed
 750 0110 90BD     		pop	{r4, r7, pc}
 751              	.L27:
 752 0112 00BF     		.align	2
 753              	.L26:
 754 0114 48000000 		.word	.LC4
 755 0118 04000000 		.word	system_info+4
 756 011c 00000000 		.word	modem_info
 757 0120 28000000 		.word	modem_info+40
 758 0124 74000000 		.word	.LC5
 759 0128 94000000 		.word	.LC6
 760              		.cfi_endproc
 761              	.LFE72:
 762              		.size	ChickityCheckYourselfBeforeYouWreckYourself, .-ChickityCheckYourselfBeforeYouWreckYourself
 763              		.section	.text.main,"ax",%progbits
 764              		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 20


 765              		.global	main
 766              		.thumb
 767              		.thumb_func
 768              		.type	main, %function
 769              	main:
 770              	.LFB73:
 296:notoriOS.c    **** 
 297:notoriOS.c    **** // ==============================================
 298:notoriOS.c    **** // Processes Core Tasks
 299:notoriOS.c    **** // ==============================================
 300:notoriOS.c    **** int main(void)
 301:notoriOS.c    **** {
 771              		.loc 1 301 0
 772              		.cfi_startproc
 773              		@ args = 0, pretend = 0, frame = 0
 774              		@ frame_needed = 1, uses_anonymous_args = 0
 775 0000 80B5     		push	{r7, lr}
 776              		.cfi_def_cfa_offset 8
 777              		.cfi_offset 7, -8
 778              		.cfi_offset 14, -4
 779 0002 00AF     		add	r7, sp, #0
 780              		.cfi_def_cfa_register 7
 302:notoriOS.c    ****     CyGlobalIntEnable; /* Enable global interrupts. */
 781              		.loc 1 302 0
 782              		.syntax unified
 783              	@ 302 "notoriOS.c" 1
 784 0004 62B6     		CPSIE   i
 785              	@ 0 "" 2
 303:notoriOS.c    **** 
 304:notoriOS.c    ****     ReadyOrNot(); // Initialize 
 786              		.loc 1 304 0
 787              		.thumb
 788              		.syntax unified
 789 0006 FFF7FEFF 		bl	ReadyOrNot
 305:notoriOS.c    ****     
 306:notoriOS.c    ****     ChickityCheckYourselfBeforeYouWreckYourself(); // Run tests for all components on bootup
 790              		.loc 1 306 0
 791 000a FFF7FEFF 		bl	ChickityCheckYourselfBeforeYouWreckYourself
 792              	.L30:
 307:notoriOS.c    ****    
 308:notoriOS.c    ****     for(;;) // (;;) means an infinite loop
 309:notoriOS.c    ****     {
 310:notoriOS.c    ****         
 311:notoriOS.c    ****         if( ! WorkWorkWorkWorkWorkWork() ) // Complete the work
 793              		.loc 1 311 0
 794 000e FFF7FEFF 		bl	WorkWorkWorkWorkWorkWork
 795 0012 0346     		mov	r3, r0
 796 0014 002B     		cmp	r3, #0
 797 0016 FAD1     		bne	.L30
 312:notoriOS.c    ****         {
 313:notoriOS.c    ****            LayBack(); // Lay back (sleep) when there isn't work
 798              		.loc 1 313 0
 799 0018 FFF7FEFF 		bl	LayBack
 314:notoriOS.c    ****         }
 315:notoriOS.c    ****     }
 800              		.loc 1 315 0
 801 001c F7E7     		b	.L30
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 21


 802              		.cfi_endproc
 803              	.LFE73:
 804              		.size	main, .-main
 805 001e 00BF     		.section	.rodata
 806 00be 0000     		.align	2
 807              	.LC7:
 808 00c0 496D706C 		.ascii	"Implementing fallback controller strategy\000"
 808      656D656E 
 808      74696E67 
 808      2066616C 
 808      6C626163 
 809 00ea 0000     		.align	2
 810              	.LC8:
 811 00ec 4D6F6465 		.ascii	"Modem is ready.\000"
 811      6D206973 
 811      20726561 
 811      64792E00 
 812              		.align	2
 813              	.LC9:
 814 00fc 72737270 		.ascii	"rsrp\000"
 814      00
 815 0101 000000   		.align	2
 816              	.LC10:
 817 0104 7472795F 		.ascii	"try_counter\000"
 817      636F756E 
 817      74657200 
 818              		.align	2
 819              	.LC11:
 820 0110 64617461 		.ascii	"data_count_sent\000"
 820      5F636F75 
 820      6E745F73 
 820      656E7400 
 821              		.align	2
 822              	.LC12:
 823 0120 64617461 		.ascii	"data_count_desired\000"
 823      5F636F75 
 823      6E745F64 
 823      65736972 
 823      656400
 824 0133 00       		.align	2
 825              	.LC13:
 826 0134 42656769 		.ascii	"Begin HTTP post.\000"
 826      6E204854 
 826      54502070 
 826      6F73742E 
 826      00
 827 0145 000000   		.align	2
 828              	.LC14:
 829 0148 38653261 		.ascii	"8e2aead92b72c4791171dc429b052e73a1e0da00\000"
 829      65616439 
 829      32623732 
 829      63343739 
 829      31313731 
 830 0171 000000   		.align	2
 831              	.LC15:
 832 0174 6170692F 		.ascii	"api/v1/write\000"
 832      76312F77 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 22


 832      72697465 
 832      00
 833 0181 000000   		.align	2
 834              	.LC16:
 835 0184 48545450 		.ascii	"HTTP route: %s\000"
 835      20726F75 
 835      74653A20 
 835      257300
 836 0193 00       		.align	2
 837              	.LC17:
 838 0194 312E3100 		.ascii	"1.1\000"
 839              		.align	2
 840              	.LC18:
 841 0198 00       		.ascii	"\000"
 842 0199 000000   		.align	2
 843              	.LC19:
 844 019c 436C6F73 		.ascii	"Close\000"
 844      6500
 845 01a2 0000     		.align	2
 846              	.LC20:
 847 01a4 504F5354 		.ascii	"POST\000"
 847      00
 848 01a9 000000   		.align	2
 849              	.LC21:
 850 01ac 46756C6C 		.ascii	"Full HTTP Request: %s\000"
 850      20485454 
 850      50205265 
 850      71756573 
 850      743A2025 
 851 01c2 0000     		.align	2
 852              	.LC22:
 853 01c4 41542353 		.ascii	"AT#SD=1,0,%d,\"%s\",0,0,1\015\000"
 853      443D312C 
 853      302C2564 
 853      2C222573 
 853      222C302C 
 854 01dd 000000   		.align	2
 855              	.LC23:
 856 01e0 257300   		.ascii	"%s\000"
 857 01e3 00       		.align	2
 858              	.LC24:
 859 01e4 4F4B00   		.ascii	"OK\000"
 860              		.global	__aeabi_ui2d
 861              		.global	__aeabi_d2iz
 862 01e7 00       		.align	2
 863              	.LC25:
 864 01e8 68747470 		.ascii	"http_request len: %d\000"
 864      5F726571 
 864      75657374 
 864      206C656E 
 864      3A202564 
 865 01fd 000000   		.align	2
 866              	.LC26:
 867 0200 23206F66 		.ascii	"# of packets: %d\000"
 867      20706163 
 867      6B657473 
 867      3A202564 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 23


 867      00
 868 0211 000000   		.align	2
 869              	.LC27:
 870 0214 3E00     		.ascii	">\000"
 871 0216 0000     		.align	2
 872              	.LC28:
 873 0218 41542353 		.ascii	"AT#SSEND=1\015\012\000"
 873      53454E44 
 873      3D310D0A 
 873      00
 874 0225 000000   		.align	2
 875              	.LC29:
 876 0228 1A00     		.ascii	"\032\000"
 877 022a 0000     		.align	2
 878              	.LC30:
 879 022c 6368756E 		.ascii	"chunk %d: %s\000"
 879      6B202564 
 879      3A202573 
 879      00
 880 0239 000000   		.align	2
 881              	.LC31:
 882 023c 5352494E 		.ascii	"SRING\000"
 882      4700
 883 0242 0000     		.align	2
 884              	.LC32:
 885 0244 4F532D4F 		.ascii	"OS-OK\000"
 885      4B00
 886 024a 0000     		.align	2
 887              	.LC33:
 888 024c 41542353 		.ascii	"AT#SRECV=1,1000\015\000"
 888      52454356 
 888      3D312C31 
 888      3030300D 
 888      00
 889 025d 000000   		.align	2
 890              	.LC34:
 891 0260 6D6F6465 		.ascii	"modem_tx_time\000"
 891      6D5F7478 
 891      5F74696D 
 891      6500
 892 026e 0000     		.align	2
 893              	.LC35:
 894 0270 4F532D4E 		.ascii	"OS-NO: Could not receive data from server.\000"
 894      4F3A2043 
 894      6F756C64 
 894      206E6F74 
 894      20726563 
 895              		.section	.text.syncData,"ax",%progbits
 896              		.align	2
 897              		.global	syncData
 898              		.thumb
 899              		.thumb_func
 900              		.type	syncData, %function
 901              	syncData:
 902              	.LFB74:
 316:notoriOS.c    **** }
 317:notoriOS.c    **** 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 24


 318:notoriOS.c    **** // ==============================================
 319:notoriOS.c    **** // Syncs data with server
 320:notoriOS.c    **** // Returns 0 when done
 321:notoriOS.c    **** // ==============================================
 322:notoriOS.c    **** uint8 syncData(){
 903              		.loc 1 322 0
 904              		.cfi_startproc
 905              		@ args = 0, pretend = 0, frame = 1368
 906              		@ frame_needed = 1, uses_anonymous_args = 0
 907 0000 90B5     		push	{r4, r7, lr}
 908              		.cfi_def_cfa_offset 12
 909              		.cfi_offset 4, -12
 910              		.cfi_offset 7, -8
 911              		.cfi_offset 14, -4
 912 0002 ADF2745D 		subw	sp, sp, #1396
 913              		.cfi_def_cfa_offset 1408
 914 0006 06AF     		add	r7, sp, #24
 915              		.cfi_def_cfa 7, 1384
 323:notoriOS.c    ****     
 324:notoriOS.c    ****     /*
 325:notoriOS.c    ****     //at_write_command("AT#SCFG?\r","OK",1000);
 326:notoriOS.c    ****     uint8 check = 0;
 327:notoriOS.c    ****     //"AT#SD=,0,80,\”www.google.com\”,0,0,0\r"
 328:notoriOS.c    ****     check = at_write_command("AT#SD=1,0,8086,\"data.open-storm.org\",0,0,1\r","OK",10000u);
 329:notoriOS.c    ****     check = at_write_command("AT#SSEND=1\r\n",   ">", 1000u);
 330:notoriOS.c    ****     check = at_write_command("POST /write?db=ARB&u=generic_node&p=MakeFloodsCurrents HTTP/1.1\r\nHo
 331:notoriOS.c    ****     */
 332:notoriOS.c    **** 
 333:notoriOS.c    ****     // Blink LED so we know it's about to sync data
 334:notoriOS.c    ****     LED_Write(1u);
 916              		.loc 1 334 0
 917 0008 0120     		movs	r0, #1
 918 000a FFF7FEFF 		bl	LED_Write
 335:notoriOS.c    ****     CyDelay(100u);
 919              		.loc 1 335 0
 920 000e 6420     		movs	r0, #100
 921 0010 FFF7FEFF 		bl	CyDelay
 336:notoriOS.c    ****     LED_Write(0u);
 922              		.loc 1 336 0
 923 0014 0020     		movs	r0, #0
 924 0016 FFF7FEFF 		bl	LED_Write
 337:notoriOS.c    **** 
 338:notoriOS.c    ****     
 339:notoriOS.c    ****     // If there's no data, not need to do anything
 340:notoriOS.c    ****     if(sizeOfDataStack() == 0){        
 925              		.loc 1 340 0
 926 001a FFF7FEFF 		bl	sizeOfDataStack
 927 001e 0346     		mov	r3, r0
 928 0020 002B     		cmp	r3, #0
 929 0022 01D1     		bne	.L32
 341:notoriOS.c    ****         return 0u;
 930              		.loc 1 341 0
 931 0024 0023     		movs	r3, #0
 932 0026 05E2     		b	.L33
 933              	.L32:
 342:notoriOS.c    ****         }
 343:notoriOS.c    ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 25


 344:notoriOS.c    ****     // Create request body, in this case influx
 345:notoriOS.c    ****     // Place body into HTTP request header
 346:notoriOS.c    ****     // Fire up modem and get it out
 347:notoriOS.c    ****      
 348:notoriOS.c    ****     
 349:notoriOS.c    ****     // Try up to 2 times to connect to the modem
 350:notoriOS.c    ****     if(modem_get_state() == MODEM_STATE_OFF){
 934              		.loc 1 350 0
 935 0028 FFF7FEFF 		bl	modem_get_state
 936 002c 0346     		mov	r3, r0
 937 002e 002B     		cmp	r3, #0
 938 0030 23D1     		bne	.L34
 351:notoriOS.c    **** 
 352:notoriOS.c    ****         try_counter++;
 939              		.loc 1 352 0
 940 0032 AE4B     		ldr	r3, .L47
 941 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 942 0036 0133     		adds	r3, r3, #1
 943 0038 DAB2     		uxtb	r2, r3
 944 003a AC4B     		ldr	r3, .L47
 945 003c 1A70     		strb	r2, [r3]
 353:notoriOS.c    ****         	
 354:notoriOS.c    ****         if(try_counter <= 2){
 946              		.loc 1 354 0
 947 003e AB4B     		ldr	r3, .L47
 948 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 949 0042 022B     		cmp	r3, #2
 950 0044 02D8     		bhi	.L35
 355:notoriOS.c    ****             modem_power_up();
 951              		.loc 1 355 0
 952 0046 FFF7FEFF 		bl	modem_power_up
 953 004a F2E1     		b	.L36
 954              	.L35:
 356:notoriOS.c    ****         }else{
 357:notoriOS.c    ****             try_counter = 0;
 955              		.loc 1 357 0
 956 004c A74B     		ldr	r3, .L47
 957 004e 0022     		movs	r2, #0
 958 0050 1A70     		strb	r2, [r3]
 358:notoriOS.c    ****             // call default valve controller when not connected to server
 359:notoriOS.c    ****             if (updatable_parameters.node_type ==NODE_TYPE_VALVE){
 959              		.loc 1 359 0
 960 0052 A74B     		ldr	r3, .L47+4
 961 0054 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 962 0056 042B     		cmp	r3, #4
 963 0058 0DD1     		bne	.L37
 360:notoriOS.c    ****                 printNotif(NOTIF_TYPE_EVENT, "Implementing fallback controller strategy");
 964              		.loc 1 360 0
 965 005a A649     		ldr	r1, .L47+8
 966 005c 0020     		movs	r0, #0
 967 005e FFF7FEFF 		bl	printNotif
 361:notoriOS.c    ****                 valve_level_controller(level_sensor_take_reading().level_reading); // want to take 
 968              		.loc 1 361 0
 969 0062 07F5A563 		add	r3, r7, #1320
 970 0066 1846     		mov	r0, r3
 971 0068 FFF7FEFF 		bl	level_sensor_take_reading
 972 006c B7F93E35 		ldrsh	r3, [r7, #1342]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 26


 973 0070 1846     		mov	r0, r3
 974 0072 FFF7FEFF 		bl	valve_level_controller
 975              	.L37:
 362:notoriOS.c    ****             }
 363:notoriOS.c    ****             return 0u;
 976              		.loc 1 363 0
 977 0076 0023     		movs	r3, #0
 978 0078 DCE1     		b	.L33
 979              	.L34:
 364:notoriOS.c    ****             }
 365:notoriOS.c    ****             
 366:notoriOS.c    ****     }else if(modem_get_state() == MODEM_STATE_READY){
 980              		.loc 1 366 0
 981 007a FFF7FEFF 		bl	modem_get_state
 982 007e 0346     		mov	r3, r0
 983 0080 042B     		cmp	r3, #4
 984 0082 40F0D681 		bne	.L36
 985              	.LBB2:
 367:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Modem is ready.");
 986              		.loc 1 367 0
 987 0086 9C49     		ldr	r1, .L47+12
 988 0088 0020     		movs	r0, #0
 989 008a FFF7FEFF 		bl	printNotif
 368:notoriOS.c    ****         
 369:notoriOS.c    ****         http_request[0] = '\0';
 990              		.loc 1 369 0
 991 008e 9B4B     		ldr	r3, .L47+16
 992 0090 0022     		movs	r2, #0
 993 0092 1A70     		strb	r2, [r3]
 370:notoriOS.c    ****         http_body[0] = '\0';
 994              		.loc 1 370 0
 995 0094 9A4B     		ldr	r3, .L47+20
 996 0096 0022     		movs	r2, #0
 997 0098 1A70     		strb	r2, [r3]
 371:notoriOS.c    ****         http_route[0] = '\0';
 998              		.loc 1 371 0
 999 009a 9A4B     		ldr	r3, .L47+24
 1000 009c 0022     		movs	r2, #0
 1001 009e 1A70     		strb	r2, [r3]
 372:notoriOS.c    ****         //char *base = "write";
 373:notoriOS.c    ****         
 374:notoriOS.c    ****         // Push cell strength data (RSRP: reference signal received power)
 375:notoriOS.c    ****         char s_rsrp[DATA_MAX_KEY_LENGTH];
 376:notoriOS.c    ****         snprintf(s_rsrp,sizeof(s_rsrp),"%d",modem_stats.rsrp);
 1002              		.loc 1 376 0
 1003 00a0 994B     		ldr	r3, .L47+28
 1004 00a2 5B69     		ldr	r3, [r3, #20]
 1005 00a4 07F21450 		addw	r0, r7, #1300
 1006 00a8 984A     		ldr	r2, .L47+32
 1007 00aa 1421     		movs	r1, #20
 1008 00ac FFF7FEFF 		bl	snprintf
 377:notoriOS.c    ****         pushData("rsrp", s_rsrp, getTimeStamp());
 1009              		.loc 1 377 0
 1010 00b0 FFF7FEFF 		bl	getTimeStamp
 1011 00b4 0246     		mov	r2, r0
 1012 00b6 07F21453 		addw	r3, r7, #1300
 1013 00ba 1946     		mov	r1, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 27


 1014 00bc 9448     		ldr	r0, .L47+36
 1015 00be FFF7FEFF 		bl	pushData
 378:notoriOS.c    ****         
 379:notoriOS.c    ****         // Push syncData try_counter to know how many tries it tried to connect
 380:notoriOS.c    ****         char c_try_counter[20];
 381:notoriOS.c    ****         snprintf(c_try_counter,sizeof(c_try_counter),"%d",try_counter);
 1016              		.loc 1 381 0
 1017 00c2 8A4B     		ldr	r3, .L47
 1018 00c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1019 00c6 07F5A060 		add	r0, r7, #1280
 1020 00ca 904A     		ldr	r2, .L47+32
 1021 00cc 1421     		movs	r1, #20
 1022 00ce FFF7FEFF 		bl	snprintf
 382:notoriOS.c    ****         pushData("try_counter",c_try_counter,getTimeStamp());
 1023              		.loc 1 382 0
 1024 00d2 FFF7FEFF 		bl	getTimeStamp
 1025 00d6 0246     		mov	r2, r0
 1026 00d8 07F5A063 		add	r3, r7, #1280
 1027 00dc 1946     		mov	r1, r3
 1028 00de 8D48     		ldr	r0, .L47+40
 1029 00e0 FFF7FEFF 		bl	pushData
 383:notoriOS.c    ****         
 384:notoriOS.c    ****         // Get size of the actual data stack count and push it to the stack
 385:notoriOS.c    ****         // If the buffer didn't overflow, then the data_count_sent is dataPointsInStack
 386:notoriOS.c    ****         // Otherwise, if the buffer overflows, then the data_count_sent is DATA_MAX_COUNT
 387:notoriOS.c    ****         if(buffer_overflow == false){
 1030              		.loc 1 387 0
 1031 00e4 8C4B     		ldr	r3, .L47+44
 1032 00e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1033 00e8 83F00103 		eor	r3, r3, #1
 1034 00ec DBB2     		uxtb	r3, r3
 1035 00ee 002B     		cmp	r3, #0
 1036 00f0 16D0     		beq	.L38
 1037              	.LBB3:
 388:notoriOS.c    ****             uint16 data_count_sent = sizeOfDataStack();
 1038              		.loc 1 388 0
 1039 00f2 FFF7FEFF 		bl	sizeOfDataStack
 1040 00f6 0346     		mov	r3, r0
 1041 00f8 A7F85035 		strh	r3, [r7, #1360]	@ movhi
 389:notoriOS.c    ****             char c_data_count_sent[20];
 390:notoriOS.c    ****             snprintf(c_data_count_sent,sizeof(c_data_count_sent),"%d",data_count_sent);
 1042              		.loc 1 390 0
 1043 00fc B7F85035 		ldrh	r3, [r7, #1360]
 1044 0100 07F59B60 		add	r0, r7, #1240
 1045 0104 814A     		ldr	r2, .L47+32
 1046 0106 1421     		movs	r1, #20
 1047 0108 FFF7FEFF 		bl	snprintf
 391:notoriOS.c    ****             pushData("data_count_sent",c_data_count_sent,getTimeStamp());
 1048              		.loc 1 391 0
 1049 010c FFF7FEFF 		bl	getTimeStamp
 1050 0110 0246     		mov	r2, r0
 1051 0112 07F59B63 		add	r3, r7, #1240
 1052 0116 1946     		mov	r1, r3
 1053 0118 8048     		ldr	r0, .L47+48
 1054 011a FFF7FEFF 		bl	pushData
 1055              	.LBE3:
 1056 011e 0FE0     		b	.L39
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 28


 1057              	.L38:
 1058              	.LBB4:
 392:notoriOS.c    ****         }else{
 393:notoriOS.c    ****             char c_data_count_sent[20];
 394:notoriOS.c    ****             snprintf(c_data_count_sent,sizeof(c_data_count_sent),"%d",DATA_MAX_VALUES);
 1059              		.loc 1 394 0
 1060 0120 07F2C440 		addw	r0, r7, #1220
 1061 0124 9623     		movs	r3, #150
 1062 0126 794A     		ldr	r2, .L47+32
 1063 0128 1421     		movs	r1, #20
 1064 012a FFF7FEFF 		bl	snprintf
 395:notoriOS.c    ****             pushData("data_count_sent",c_data_count_sent,getTimeStamp());
 1065              		.loc 1 395 0
 1066 012e FFF7FEFF 		bl	getTimeStamp
 1067 0132 0246     		mov	r2, r0
 1068 0134 07F2C443 		addw	r3, r7, #1220
 1069 0138 1946     		mov	r1, r3
 1070 013a 7848     		ldr	r0, .L47+48
 1071 013c FFF7FEFF 		bl	pushData
 1072              	.L39:
 1073              	.LBE4:
 396:notoriOS.c    ****         }
 397:notoriOS.c    ****         
 398:notoriOS.c    ****         // Get size of the desired data stack count and push it to the stack
 399:notoriOS.c    ****         uint16 data_count_desired = sizeOfDataStackDesired();
 1074              		.loc 1 399 0
 1075 0140 FFF7FEFF 		bl	sizeOfDataStackDesired
 1076 0144 0346     		mov	r3, r0
 1077 0146 A7F84E35 		strh	r3, [r7, #1358]	@ movhi
 400:notoriOS.c    ****         char c_data_count_desired[20];
 401:notoriOS.c    ****         // subtract 1 to disclude data_count_sent so that it focuses only on the actual data
 402:notoriOS.c    ****         snprintf(c_data_count_desired,sizeof(c_data_count_desired),"%d", data_count_desired-1);
 1078              		.loc 1 402 0
 1079 014a B7F84E35 		ldrh	r3, [r7, #1358]
 1080 014e 013B     		subs	r3, r3, #1
 1081 0150 07F2EC40 		addw	r0, r7, #1260
 1082 0154 6D4A     		ldr	r2, .L47+32
 1083 0156 1421     		movs	r1, #20
 1084 0158 FFF7FEFF 		bl	snprintf
 403:notoriOS.c    ****         pushData("data_count_desired",c_data_count_desired,getTimeStamp());
 1085              		.loc 1 403 0
 1086 015c FFF7FEFF 		bl	getTimeStamp
 1087 0160 0246     		mov	r2, r0
 1088 0162 07F2EC43 		addw	r3, r7, #1260
 1089 0166 1946     		mov	r1, r3
 1090 0168 6D48     		ldr	r0, .L47+52
 1091 016a FFF7FEFF 		bl	pushData
 404:notoriOS.c    ****         
 405:notoriOS.c    ****         // Construct HTPP request
 406:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Begin HTTP post.");
 1092              		.loc 1 406 0
 1093 016e 6D49     		ldr	r1, .L47+56
 1094 0170 0020     		movs	r0, #0
 1095 0172 FFF7FEFF 		bl	printNotif
 407:notoriOS.c    ****         
 408:notoriOS.c    ****         // Old influx API
 409:notoriOS.c    ****         // Construct_influx_route(http_route,base,system_settings.ep_user,system_settings.ep_pswd,s
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 29


 410:notoriOS.c    ****         construct_malcom_route(http_route,"api/v1/write",modem_info.imei,CURRENT_COMMIT);
 1096              		.loc 1 410 0
 1097 0176 6C4B     		ldr	r3, .L47+60
 1098 0178 6C4A     		ldr	r2, .L47+64
 1099 017a 6D49     		ldr	r1, .L47+68
 1100 017c 6148     		ldr	r0, .L47+24
 1101 017e FFF7FEFF 		bl	construct_malcom_route
 411:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"HTTP route: %s", http_route);
 1102              		.loc 1 411 0
 1103 0182 604A     		ldr	r2, .L47+24
 1104 0184 6B49     		ldr	r1, .L47+72
 1105 0186 0020     		movs	r0, #0
 1106 0188 FFF7FEFF 		bl	printNotif
 412:notoriOS.c    ****         
 413:notoriOS.c    ****         //OLD INFLUX API
 414:notoriOS.c    ****         //construct_influx_write_body(http_body,system_settings.node_id);
 415:notoriOS.c    ****         construct_malcom_body(http_body);
 1107              		.loc 1 415 0
 1108 018c 5C48     		ldr	r0, .L47+20
 1109 018e FFF7FEFF 		bl	construct_malcom_body
 416:notoriOS.c    ****         construct_generic_HTTP_request(http_request,http_body,system_settings.ep_host,http_route,sy
 1110              		.loc 1 416 0
 1111 0192 694B     		ldr	r3, .L47+76
 1112 0194 5B6E     		ldr	r3, [r3, #100]
 1113 0196 694A     		ldr	r2, .L47+80
 1114 0198 0592     		str	r2, [sp, #20]
 1115 019a 0022     		movs	r2, #0
 1116 019c 0492     		str	r2, [sp, #16]
 1117 019e 684A     		ldr	r2, .L47+84
 1118 01a0 0392     		str	r2, [sp, #12]
 1119 01a2 684A     		ldr	r2, .L47+88
 1120 01a4 0292     		str	r2, [sp, #8]
 1121 01a6 684A     		ldr	r2, .L47+92
 1122 01a8 0192     		str	r2, [sp, #4]
 1123 01aa 0093     		str	r3, [sp]
 1124 01ac 554B     		ldr	r3, .L47+24
 1125 01ae 624A     		ldr	r2, .L47+76
 1126 01b0 5349     		ldr	r1, .L47+20
 1127 01b2 5248     		ldr	r0, .L47+16
 1128 01b4 FFF7FEFF 		bl	construct_generic_HTTP_request
 417:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Full HTTP Request: %s", http_request);
 1129              		.loc 1 417 0
 1130 01b8 504A     		ldr	r2, .L47+16
 1131 01ba 6449     		ldr	r1, .L47+96
 1132 01bc 0020     		movs	r0, #0
 1133 01be FFF7FEFF 		bl	printNotif
 418:notoriOS.c    ****         
 419:notoriOS.c    ****         // Push request to modem and escape with <ctrl+z> escape sequence
 420:notoriOS.c    ****         // Open port and begin command line sequence
 421:notoriOS.c    ****         char portConfig[200];
 422:notoriOS.c    ****         uint8 status = 0u;
 1134              		.loc 1 422 0
 1135 01c2 0023     		movs	r3, #0
 1136 01c4 87F84D35 		strb	r3, [r7, #1357]
 423:notoriOS.c    ****         
 424:notoriOS.c    ****         snprintf(portConfig,sizeof(portConfig),"AT#SD=1,0,%d,\"%s\",0,0,1\r",system_settings.ep_por
 1137              		.loc 1 424 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 30


 1138 01c8 5B4B     		ldr	r3, .L47+76
 1139 01ca 5A6E     		ldr	r2, [r3, #100]
 1140 01cc 381D     		adds	r0, r7, #4
 1141 01ce 5A4B     		ldr	r3, .L47+76
 1142 01d0 0093     		str	r3, [sp]
 1143 01d2 1346     		mov	r3, r2
 1144 01d4 5E4A     		ldr	r2, .L47+100
 1145 01d6 C821     		movs	r1, #200
 1146 01d8 FFF7FEFF 		bl	snprintf
 425:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"%s",portConfig);
 1147              		.loc 1 425 0
 1148 01dc 3B1D     		adds	r3, r7, #4
 1149 01de 1A46     		mov	r2, r3
 1150 01e0 5C49     		ldr	r1, .L47+104
 1151 01e2 0020     		movs	r0, #0
 1152 01e4 FFF7FEFF 		bl	printNotif
 426:notoriOS.c    ****         status = at_write_command(portConfig,"OK",10000u);
 1153              		.loc 1 426 0
 1154 01e8 3B1D     		adds	r3, r7, #4
 1155 01ea 42F21072 		movw	r2, #10000
 1156 01ee 5A49     		ldr	r1, .L47+108
 1157 01f0 1846     		mov	r0, r3
 1158 01f2 FFF7FEFF 		bl	at_write_command
 1159 01f6 0346     		mov	r3, r0
 1160 01f8 87F84D35 		strb	r3, [r7, #1357]
 427:notoriOS.c    ****         
 428:notoriOS.c    ****         // create character pointer to chunk through the http_request
 429:notoriOS.c    ****         char *chunk;
 430:notoriOS.c    ****         // Set chunk to start where http_request starts
 431:notoriOS.c    ****         chunk = http_request;
 1161              		.loc 1 431 0
 1162 01fc 3F4B     		ldr	r3, .L47+16
 1163 01fe C7F85435 		str	r3, [r7, #1364]
 432:notoriOS.c    ****         // variable for the number of packets to send
 433:notoriOS.c    ****         int8 packets;
 434:notoriOS.c    ****         packets = ceil(nextafter((strlen(http_request)/MAX_BYTES_SENT),MAX_BYTES_SENT));
 1164              		.loc 1 434 0
 1165 0202 3E48     		ldr	r0, .L47+16
 1166 0204 FFF7FEFF 		bl	strlen
 1167 0208 0246     		mov	r2, r0
 1168 020a 544B     		ldr	r3, .L47+112
 1169 020c A3FB0223 		umull	r2, r3, r3, r2
 1170 0210 5B09     		lsrs	r3, r3, #5
 1171 0212 1846     		mov	r0, r3
 1172 0214 FFF7FEFF 		bl	__aeabi_ui2d
 1173 0218 4FF00002 		mov	r2, #0
 1174 021c 504B     		ldr	r3, .L47+116
 1175 021e FFF7FEFF 		bl	nextafter
 1176 0222 0346     		mov	r3, r0
 1177 0224 0C46     		mov	r4, r1
 1178 0226 1846     		mov	r0, r3
 1179 0228 2146     		mov	r1, r4
 1180 022a FFF7FEFF 		bl	ceil
 1181 022e 0346     		mov	r3, r0
 1182 0230 0C46     		mov	r4, r1
 1183 0232 1846     		mov	r0, r3
 1184 0234 2146     		mov	r1, r4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 31


 1185 0236 FFF7FEFF 		bl	__aeabi_d2iz
 1186 023a 0346     		mov	r3, r0
 1187 023c 87F84C35 		strb	r3, [r7, #1356]
 435:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT, "http_request len: %d", strlen(http_request));
 1188              		.loc 1 435 0
 1189 0240 2E48     		ldr	r0, .L47+16
 1190 0242 FFF7FEFF 		bl	strlen
 1191 0246 0346     		mov	r3, r0
 1192 0248 1A46     		mov	r2, r3
 1193 024a 4649     		ldr	r1, .L47+120
 1194 024c 0020     		movs	r0, #0
 1195 024e FFF7FEFF 		bl	printNotif
 436:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT, "# of packets: %d", packets);
 1196              		.loc 1 436 0
 1197 0252 97F94C35 		ldrsb	r3, [r7, #1356]
 1198 0256 1A46     		mov	r2, r3
 1199 0258 4349     		ldr	r1, .L47+124
 1200 025a 0020     		movs	r0, #0
 1201 025c FFF7FEFF 		bl	printNotif
 1202              	.LBB5:
 437:notoriOS.c    ****         // while the size of the chunk of the data we are sending to the server is smaller than the
 438:notoriOS.c    ****         for(int8 packet = 0; packet < packets; packet++){
 1203              		.loc 1 438 0
 1204 0260 0023     		movs	r3, #0
 1205 0262 87F85335 		strb	r3, [r7, #1363]
 1206 0266 9BE0     		b	.L40
 1207              	.L43:
 1208              	.LBB6:
 439:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 440:notoriOS.c    ****             char http_chunk[1001];
 441:notoriOS.c    ****             // AT command #SSEND= is an execution command that permits, while the module is in comm
 442:notoriOS.c    ****             // To complete the operation, send Ctrl-Z char to exit
 443:notoriOS.c    ****             status = at_write_command("AT#SSEND=1\r\n", ">", 1000u);
 1209              		.loc 1 443 0
 1210 0268 4FF47A72 		mov	r2, #1000
 1211 026c 3F49     		ldr	r1, .L47+128
 1212 026e 4048     		ldr	r0, .L47+132
 1213 0270 FFF7FEFF 		bl	at_write_command
 1214 0274 0346     		mov	r3, r0
 1215 0276 87F84D35 		strb	r3, [r7, #1357]
 444:notoriOS.c    ****             // Print the first 1000 characters of http_request into http_chunk
 445:notoriOS.c    ****             snprintf(http_chunk, MAX_BYTES_SENT, "%s",chunk);
 1216              		.loc 1 445 0
 1217 027a 07F1CC00 		add	r0, r7, #204
 1218 027e D7F85435 		ldr	r3, [r7, #1364]
 1219 0282 344A     		ldr	r2, .L47+104
 1220 0284 4FF4FA71 		mov	r1, #500
 1221 0288 FFF7FEFF 		bl	snprintf
 446:notoriOS.c    ****             // Append 1 character "<ctrl+z> escape sequence" to http_request to exit modem command 
 447:notoriOS.c    ****             strncat(http_chunk, "\032", 1); 
 1222              		.loc 1 447 0
 1223 028c 07F1CC03 		add	r3, r7, #204
 1224 0290 1846     		mov	r0, r3
 1225 0292 FFF7FEFF 		bl	strlen
 1226 0296 0346     		mov	r3, r0
 1227 0298 1A46     		mov	r2, r3
 1228 029a 07F1CC03 		add	r3, r7, #204
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 32


 1229 029e 1344     		add	r3, r3, r2
 1230 02a0 3449     		ldr	r1, .L47+136
 1231 02a2 1A46     		mov	r2, r3
 1232 02a4 0B46     		mov	r3, r1
 1233 02a6 1B88     		ldrh	r3, [r3]	@ unaligned
 1234 02a8 1380     		strh	r3, [r2]	@ unaligned
 448:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"chunk %d: %s", packet, http_chunk);
 1235              		.loc 1 448 0
 1236 02aa 97F95325 		ldrsb	r2, [r7, #1363]
 1237 02ae 07F1CC03 		add	r3, r7, #204
 1238 02b2 3149     		ldr	r1, .L47+140
 1239 02b4 0020     		movs	r0, #0
 1240 02b6 FFF7FEFF 		bl	printNotif
 449:notoriOS.c    ****             // Send data to server
 450:notoriOS.c    ****             if ((packet+1) != packets){
 1241              		.loc 1 450 0
 1242 02ba 97F95335 		ldrsb	r3, [r7, #1363]
 1243 02be 5A1C     		adds	r2, r3, #1
 1244 02c0 97F94C35 		ldrsb	r3, [r7, #1356]
 1245 02c4 9A42     		cmp	r2, r3
 1246 02c6 59D0     		beq	.L41
 451:notoriOS.c    ****                 status = at_write_command(http_chunk, "OK", 5000u);
 1247              		.loc 1 451 0
 1248 02c8 07F1CC03 		add	r3, r7, #204
 1249 02cc 41F28832 		movw	r2, #5000
 1250 02d0 2149     		ldr	r1, .L47+108
 1251 02d2 1846     		mov	r0, r3
 1252 02d4 FFF7FEFF 		bl	at_write_command
 1253 02d8 0346     		mov	r3, r0
 1254 02da 87F84D35 		strb	r3, [r7, #1357]
 452:notoriOS.c    ****                 // Move the pointer forward 
 453:notoriOS.c    ****                 chunk = chunk + MAX_BYTES_SENT - 1;
 1255              		.loc 1 453 0
 1256 02de D7F85435 		ldr	r3, [r7, #1364]
 1257 02e2 03F2F313 		addw	r3, r3, #499
 1258 02e6 C7F85435 		str	r3, [r7, #1364]
 1259 02ea 52E0     		b	.L42
 1260              	.L48:
 1261              		.align	2
 1262              	.L47:
 1263 02ec 00000000 		.word	try_counter
 1264 02f0 00000000 		.word	updatable_parameters
 1265 02f4 C0000000 		.word	.LC7
 1266 02f8 EC000000 		.word	.LC8
 1267 02fc 00000000 		.word	http_request
 1268 0300 00000000 		.word	http_body
 1269 0304 00000000 		.word	http_route
 1270 0308 00000000 		.word	modem_stats
 1271 030c 3C000000 		.word	.LC2
 1272 0310 FC000000 		.word	.LC9
 1273 0314 04010000 		.word	.LC10
 1274 0318 00000000 		.word	buffer_overflow
 1275 031c 10010000 		.word	.LC11
 1276 0320 20010000 		.word	.LC12
 1277 0324 34010000 		.word	.LC13
 1278 0328 48010000 		.word	.LC14
 1279 032c 28000000 		.word	modem_info+40
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 33


 1280 0330 74010000 		.word	.LC15
 1281 0334 84010000 		.word	.LC16
 1282 0338 00000000 		.word	system_settings
 1283 033c 94010000 		.word	.LC17
 1284 0340 98010000 		.word	.LC18
 1285 0344 9C010000 		.word	.LC19
 1286 0348 A4010000 		.word	.LC20
 1287 034c AC010000 		.word	.LC21
 1288 0350 C4010000 		.word	.LC22
 1289 0354 E0010000 		.word	.LC23
 1290 0358 E4010000 		.word	.LC24
 1291 035c D34D6210 		.word	274877907
 1292 0360 00407F40 		.word	1082081280
 1293 0364 E8010000 		.word	.LC25
 1294 0368 00020000 		.word	.LC26
 1295 036c 14020000 		.word	.LC27
 1296 0370 18020000 		.word	.LC28
 1297 0374 28020000 		.word	.LC29
 1298 0378 2C020000 		.word	.LC30
 1299              	.L41:
 454:notoriOS.c    ****             }else{
 455:notoriOS.c    ****                 status = at_write_command(http_chunk, "SRING", 5000u);
 1300              		.loc 1 455 0
 1301 037c 07F1CC03 		add	r3, r7, #204
 1302 0380 41F28832 		movw	r2, #5000
 1303 0384 2E49     		ldr	r1, .L49
 1304 0386 1846     		mov	r0, r3
 1305 0388 FFF7FEFF 		bl	at_write_command
 1306 038c 0346     		mov	r3, r0
 1307 038e 87F84D35 		strb	r3, [r7, #1357]
 1308              	.L42:
 1309              	.LBE6:
 438:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 1310              		.loc 1 438 0 discriminator 2
 1311 0392 97F95335 		ldrsb	r3, [r7, #1363]
 1312 0396 DBB2     		uxtb	r3, r3
 1313 0398 0133     		adds	r3, r3, #1
 1314 039a DBB2     		uxtb	r3, r3
 1315 039c 87F85335 		strb	r3, [r7, #1363]
 1316              	.L40:
 438:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 1317              		.loc 1 438 0 is_stmt 0 discriminator 1
 1318 03a0 97F95325 		ldrsb	r2, [r7, #1363]
 1319 03a4 97F94C35 		ldrsb	r3, [r7, #1356]
 1320 03a8 9A42     		cmp	r2, r3
 1321 03aa FFF65DAF 		blt	.L43
 1322              	.LBE5:
 456:notoriOS.c    ****             }
 457:notoriOS.c    ****             
 458:notoriOS.c    ****         }
 459:notoriOS.c    ****         
 460:notoriOS.c    ****         // Read received buffer
 461:notoriOS.c    ****         // A good write will return code "OS-OK"
 462:notoriOS.c    ****         // AT command #SRECV= is an execution command that permits users to read data arrived throu
 463:notoriOS.c    ****         // = 1 means the UPD information is enabled: data are read just until the end of the UDP da
 464:notoriOS.c    ****         status = at_write_command("AT#SRECV=1,1000\r","OS-OK",5000u);
 1323              		.loc 1 464 0 is_stmt 1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 34


 1324 03ae 41F28832 		movw	r2, #5000
 1325 03b2 2449     		ldr	r1, .L49+4
 1326 03b4 2448     		ldr	r0, .L49+8
 1327 03b6 FFF7FEFF 		bl	at_write_command
 1328 03ba 0346     		mov	r3, r0
 1329 03bc 87F84D35 		strb	r3, [r7, #1357]
 465:notoriOS.c    ****         //printNotif(NOTIF_TYPE_EVENT,"Received SRECV: %s",uart_received_string);
 466:notoriOS.c    ****     
 467:notoriOS.c    ****   
 468:notoriOS.c    ****         // If it worked, clear the queue and clock how long the end-to-end tx took
 469:notoriOS.c    ****         if(status == 1u){
 1330              		.loc 1 469 0
 1331 03c0 97F84D35 		ldrb	r3, [r7, #1357]	@ zero_extendqisi2
 1332 03c4 012B     		cmp	r3, #1
 1333 03c6 1DD1     		bne	.L44
 1334              	.LBB7:
 470:notoriOS.c    ****             get_updated_parameters_from_malcom();
 1335              		.loc 1 470 0
 1336 03c8 FFF7FEFF 		bl	get_updated_parameters_from_malcom
 471:notoriOS.c    ****             Clear_Data_Stack();
 1337              		.loc 1 471 0
 1338 03cc FFF7FEFF 		bl	Clear_Data_Stack
 472:notoriOS.c    ****             int send_time = (int)(getTimeStamp()-(int32)modem_start_time_stamp);
 1339              		.loc 1 472 0
 1340 03d0 FFF7FEFF 		bl	getTimeStamp
 1341 03d4 0246     		mov	r2, r0
 1342 03d6 1D4B     		ldr	r3, .L49+12
 1343 03d8 1B68     		ldr	r3, [r3]
 1344 03da D31A     		subs	r3, r2, r3
 1345 03dc C7F84835 		str	r3, [r7, #1352]
 473:notoriOS.c    ****             char s_send_time[10];
 474:notoriOS.c    ****             snprintf(s_send_time,sizeof(s_send_time),"%d",send_time);
 1346              		.loc 1 474 0
 1347 03e0 07F59760 		add	r0, r7, #1208
 1348 03e4 D7F84835 		ldr	r3, [r7, #1352]
 1349 03e8 194A     		ldr	r2, .L49+16
 1350 03ea 0A21     		movs	r1, #10
 1351 03ec FFF7FEFF 		bl	snprintf
 475:notoriOS.c    ****             pushData("modem_tx_time",s_send_time,getTimeStamp());
 1352              		.loc 1 475 0
 1353 03f0 FFF7FEFF 		bl	getTimeStamp
 1354 03f4 0246     		mov	r2, r0
 1355 03f6 07F59763 		add	r3, r7, #1208
 1356 03fa 1946     		mov	r1, r3
 1357 03fc 1548     		ldr	r0, .L49+20
 1358 03fe FFF7FEFF 		bl	pushData
 1359              	.LBE7:
 1360 0402 03E0     		b	.L45
 1361              	.L44:
 476:notoriOS.c    ****         }else{
 477:notoriOS.c    ****             printNotif(NOTIF_TYPE_ERROR, "OS-NO: Could not receive data from server.");
 1362              		.loc 1 477 0
 1363 0404 1449     		ldr	r1, .L49+24
 1364 0406 0220     		movs	r0, #2
 1365 0408 FFF7FEFF 		bl	printNotif
 1366              	.L45:
 478:notoriOS.c    ****         }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 35


 479:notoriOS.c    ****          
 480:notoriOS.c    ****         // Get time, and if it looks good, set the RTC with it
 481:notoriOS.c    ****         long network_time = modem_get_network_time();
 1367              		.loc 1 481 0
 1368 040c FFF7FEFF 		bl	modem_get_network_time
 1369 0410 C7F84405 		str	r0, [r7, #1348]
 482:notoriOS.c    ****         if(network_time != 0){
 1370              		.loc 1 482 0
 1371 0414 D7F84435 		ldr	r3, [r7, #1348]
 1372 0418 002B     		cmp	r3, #0
 1373 041a 03D0     		beq	.L46
 483:notoriOS.c    ****            setTime(network_time);
 1374              		.loc 1 483 0
 1375 041c D7F84405 		ldr	r0, [r7, #1348]
 1376 0420 FFF7FEFF 		bl	setTime
 1377              	.L46:
 484:notoriOS.c    ****         }
 485:notoriOS.c    ****         
 486:notoriOS.c    ****         // If transmitted, flush the data stack and shut down modem
 487:notoriOS.c    ****         // If not -- keep the statck and try next time
 488:notoriOS.c    ****         // Power down the modem -- completely "kill" modem to conserve power
 489:notoriOS.c    ****         modem_power_down();
 1378              		.loc 1 489 0
 1379 0424 FFF7FEFF 		bl	modem_power_down
 490:notoriOS.c    ****         
 491:notoriOS.c    ****         try_counter = 0u;
 1380              		.loc 1 491 0
 1381 0428 0C4B     		ldr	r3, .L49+28
 1382 042a 0022     		movs	r2, #0
 1383 042c 1A70     		strb	r2, [r3]
 492:notoriOS.c    ****         return 0u;
 1384              		.loc 1 492 0
 1385 042e 0023     		movs	r3, #0
 1386 0430 00E0     		b	.L33
 1387              	.L36:
 1388              	.LBE2:
 493:notoriOS.c    ****     }
 494:notoriOS.c    ****       
 495:notoriOS.c    ****       return 1u; // Not done yet
 1389              		.loc 1 495 0
 1390 0432 0123     		movs	r3, #1
 1391              	.L33:
 496:notoriOS.c    **** }
 1392              		.loc 1 496 0 discriminator 1
 1393 0434 1846     		mov	r0, r3
 1394 0436 07F25C57 		addw	r7, r7, #1372
 1395              		.cfi_def_cfa_offset 12
 1396 043a BD46     		mov	sp, r7
 1397              		.cfi_def_cfa_register 13
 1398              		@ sp needed
 1399 043c 90BD     		pop	{r4, r7, pc}
 1400              	.L50:
 1401 043e 00BF     		.align	2
 1402              	.L49:
 1403 0440 3C020000 		.word	.LC31
 1404 0444 44020000 		.word	.LC32
 1405 0448 4C020000 		.word	.LC33
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 36


 1406 044c 00000000 		.word	modem_start_time_stamp
 1407 0450 3C000000 		.word	.LC2
 1408 0454 60020000 		.word	.LC34
 1409 0458 70020000 		.word	.LC35
 1410 045c 00000000 		.word	try_counter
 1411              		.cfi_endproc
 1412              	.LFE74:
 1413              		.size	syncData, .-syncData
 1414              		.section	.text.configureRemoteParams,"ax",%progbits
 1415              		.align	2
 1416              		.global	configureRemoteParams
 1417              		.thumb
 1418              		.thumb_func
 1419              		.type	configureRemoteParams, %function
 1420              	configureRemoteParams:
 1421              	.LFB75:
 497:notoriOS.c    **** 
 498:notoriOS.c    **** // ==============================================
 499:notoriOS.c    **** // Syncs with cell-tower clock and check meta-DB
 500:notoriOS.c    **** // Returns 0 when done
 501:notoriOS.c    **** // ==============================================
 502:notoriOS.c    **** uint8 configureRemoteParams(){
 1422              		.loc 1 502 0
 1423              		.cfi_startproc
 1424              		@ args = 0, pretend = 0, frame = 8
 1425              		@ frame_needed = 1, uses_anonymous_args = 0
 1426 0000 80B5     		push	{r7, lr}
 1427              		.cfi_def_cfa_offset 8
 1428              		.cfi_offset 7, -8
 1429              		.cfi_offset 14, -4
 1430 0002 82B0     		sub	sp, sp, #8
 1431              		.cfi_def_cfa_offset 16
 1432 0004 00AF     		add	r7, sp, #0
 1433              		.cfi_def_cfa_register 7
 503:notoriOS.c    ****     
 504:notoriOS.c    ****     if(modem_get_state() == MODEM_STATE_OFF){
 1434              		.loc 1 504 0
 1435 0006 FFF7FEFF 		bl	modem_get_state
 1436 000a 0346     		mov	r3, r0
 1437 000c 002B     		cmp	r3, #0
 1438 000e 02D1     		bne	.L52
 505:notoriOS.c    ****         // This puts all the modem points into a state that won't leak power    
 506:notoriOS.c    ****         modem_power_up();
 1439              		.loc 1 506 0
 1440 0010 FFF7FEFF 		bl	modem_power_up
 1441 0014 11E0     		b	.L53
 1442              	.L52:
 507:notoriOS.c    ****             
 508:notoriOS.c    ****     }else if(modem_get_state() == MODEM_STATE_READY){
 1443              		.loc 1 508 0
 1444 0016 FFF7FEFF 		bl	modem_get_state
 1445 001a 0346     		mov	r3, r0
 1446 001c 042B     		cmp	r3, #4
 1447 001e 0CD1     		bne	.L53
 1448              	.LBB8:
 509:notoriOS.c    ****         
 510:notoriOS.c    ****         // This is where we will interfasce with some sort of broker that assings node IDs
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 37


 511:notoriOS.c    ****         
 512:notoriOS.c    ****         // Get time, and if it looks good, set the RTC with it
 513:notoriOS.c    ****         long network_time = modem_get_network_time();
 1449              		.loc 1 513 0
 1450 0020 FFF7FEFF 		bl	modem_get_network_time
 1451 0024 7860     		str	r0, [r7, #4]
 514:notoriOS.c    ****         if(network_time != 0){
 1452              		.loc 1 514 0
 1453 0026 7B68     		ldr	r3, [r7, #4]
 1454 0028 002B     		cmp	r3, #0
 1455 002a 02D0     		beq	.L54
 515:notoriOS.c    ****             setTime(network_time);
 1456              		.loc 1 515 0
 1457 002c 7868     		ldr	r0, [r7, #4]
 1458 002e FFF7FEFF 		bl	setTime
 1459              	.L54:
 516:notoriOS.c    ****         }
 517:notoriOS.c    ****         
 518:notoriOS.c    ****         // Get GPS coordinates
 519:notoriOS.c    ****         //gps_t gps = modem_get_gps_coordinates();
 520:notoriOS.c    ****         // Power down the modem -- completely "kill" modem to conserve power
 521:notoriOS.c    ****         modem_power_down();
 1460              		.loc 1 521 0
 1461 0032 FFF7FEFF 		bl	modem_power_down
 522:notoriOS.c    ****         return 0u;
 1462              		.loc 1 522 0
 1463 0036 0023     		movs	r3, #0
 1464 0038 00E0     		b	.L55
 1465              	.L53:
 1466              	.LBE8:
 523:notoriOS.c    ****         
 524:notoriOS.c    ****     }
 525:notoriOS.c    ****     
 526:notoriOS.c    ****     return 1u;
 1467              		.loc 1 526 0
 1468 003a 0123     		movs	r3, #1
 1469              	.L55:
 527:notoriOS.c    **** }
 1470              		.loc 1 527 0
 1471 003c 1846     		mov	r0, r3
 1472 003e 0837     		adds	r7, r7, #8
 1473              		.cfi_def_cfa_offset 8
 1474 0040 BD46     		mov	sp, r7
 1475              		.cfi_def_cfa_register 13
 1476              		@ sp needed
 1477 0042 80BD     		pop	{r7, pc}
 1478              		.cfi_endproc
 1479              	.LFE75:
 1480              		.size	configureRemoteParams, .-configureRemoteParams
 1481              		.section	.rodata
 1482 029b 00       		.align	2
 1483              	.LC36:
 1484 029c 256C6400 		.ascii	"%ld\000"
 1485              		.align	2
 1486              	.LC37:
 1487 02a0 6D617862 		.ascii	"maxbotix_depth=%s\000"
 1487      6F746978 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 38


 1487      5F646570 
 1487      74683D25 
 1487      7300
 1488 02b2 0000     		.align	2
 1489              	.LC38:
 1490 02b4 6D617862 		.ascii	"maxbotix_depth\000"
 1490      6F746978 
 1490      5F646570 
 1490      746800
 1491 02c3 00       		.align	2
 1492              	.LC39:
 1493 02c4 612B00   		.ascii	"a+\000"
 1494 02c7 00       		.align	2
 1495              	.LC40:
 1496 02c8 206D6178 		.ascii	" maxbotix_depth: \000"
 1496      626F7469 
 1496      785F6465 
 1496      7074683A 
 1496      2000
 1497 02da 0000     		.align	2
 1498              	.LC41:
 1499 02dc 2000     		.ascii	" \000"
 1500 02de 0000     		.align	2
 1501              	.LC42:
 1502 02e0 436F756C 		.ascii	"Could not get valid readings from Maxbotix.\000"
 1502      64206E6F 
 1502      74206765 
 1502      74207661 
 1502      6C696420 
 1503              		.global	__aeabi_f2d
 1504              		.align	2
 1505              	.LC43:
 1506 030c 252E3266 		.ascii	"%.2f\000"
 1506      00
 1507 0311 000000   		.align	2
 1508              	.LC44:
 1509 0314 765F6261 		.ascii	"v_bat=%s\000"
 1509      743D2573 
 1509      00
 1510 031d 000000   		.align	2
 1511              	.LC45:
 1512 0320 765F6261 		.ascii	"v_bat\000"
 1512      7400
 1513 0326 0000     		.align	2
 1514              	.LC46:
 1515 0328 20766261 		.ascii	" vbat: \000"
 1515      743A2000 
 1516              		.align	2
 1517              	.LC47:
 1518 0330 70726573 		.ascii	"pressure_current=%s\000"
 1518      73757265 
 1518      5F637572 
 1518      72656E74 
 1518      3D257300 
 1519              		.align	2
 1520              	.LC48:
 1521 0344 70726573 		.ascii	"pressure_current\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 39


 1521      73757265 
 1521      5F637572 
 1521      72656E74 
 1521      00
 1522 0355 000000   		.align	2
 1523              	.LC49:
 1524 0358 20707265 		.ascii	" pressure_current: \000"
 1524      73737572 
 1524      655F6375 
 1524      7272656E 
 1524      743A2000 
 1525              		.align	2
 1526              	.LC50:
 1527 036c 70726573 		.ascii	"pressure_depth=%s\000"
 1527      73757265 
 1527      5F646570 
 1527      74683D25 
 1527      7300
 1528 037e 0000     		.align	2
 1529              	.LC51:
 1530 0380 70726573 		.ascii	"pressure_depth\000"
 1530      73757265 
 1530      5F646570 
 1530      746800
 1531 038f 00       		.align	2
 1532              	.LC52:
 1533 0390 20707265 		.ascii	" pressure_depth: \000"
 1533      73737572 
 1533      655F6465 
 1533      7074683A 
 1533      2000
 1534 03a2 0000     		.align	2
 1535              	.LC53:
 1536 03a4 436F756C 		.ascii	"Could not get valid readings from ADC.\000"
 1536      64206E6F 
 1536      74206765 
 1536      74207661 
 1536      6C696420 
 1537 03cb 00       		.align	2
 1538              	.LC54:
 1539 03cc 256600   		.ascii	"%f\000"
 1540 03cf 00       		.align	2
 1541              	.LC55:
 1542 03d0 76616C76 		.ascii	"valve_open=%s\000"
 1542      655F6F70 
 1542      656E3D25 
 1542      7300
 1543 03de 0000     		.align	2
 1544              	.LC56:
 1545 03e0 76616C76 		.ascii	"valve_open\000"
 1545      655F6F70 
 1545      656E00
 1546 03eb 00       		.align	2
 1547              	.LC57:
 1548 03ec 2076616C 		.ascii	" valve_open: \000"
 1548      76655F6F 
 1548      70656E3A 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 40


 1548      2000
 1549              		.section	.text.makeMeasurements,"ax",%progbits
 1550              		.align	2
 1551              		.global	makeMeasurements
 1552              		.thumb
 1553              		.thumb_func
 1554              		.type	makeMeasurements, %function
 1555              	makeMeasurements:
 1556              	.LFB76:
 528:notoriOS.c    **** 
 529:notoriOS.c    **** 
 530:notoriOS.c    **** // ==============================================
 531:notoriOS.c    **** // Make sensor measurements, which will be handeled by another cutions
 532:notoriOS.c    **** // Returns 0 when finished
 533:notoriOS.c    **** // ==============================================
 534:notoriOS.c    **** uint8 makeMeasurements(){
 1557              		.loc 1 534 0
 1558              		.cfi_startproc
 1559              		@ args = 0, pretend = 0, frame = 160
 1560              		@ frame_needed = 1, uses_anonymous_args = 0
 1561 0000 B0B5     		push	{r4, r5, r7, lr}
 1562              		.cfi_def_cfa_offset 16
 1563              		.cfi_offset 4, -16
 1564              		.cfi_offset 5, -12
 1565              		.cfi_offset 7, -8
 1566              		.cfi_offset 14, -4
 1567 0002 ACB0     		sub	sp, sp, #176
 1568              		.cfi_def_cfa_offset 192
 1569 0004 04AF     		add	r7, sp, #16
 1570              		.cfi_def_cfa 7, 176
 535:notoriOS.c    ****     
 536:notoriOS.c    ****     // Get clock time and save to timeStamp
 537:notoriOS.c    ****     long timeStamp = getTimeStamp();
 1571              		.loc 1 537 0
 1572 0006 FFF7FEFF 		bl	getTimeStamp
 1573 000a C7F89C00 		str	r0, [r7, #156]
 538:notoriOS.c    ****     char c_timeStamp[32];
 539:notoriOS.c    ****     snprintf(c_timeStamp,sizeof(c_timeStamp),"%ld",timeStamp);
 1574              		.loc 1 539 0
 1575 000e 07F17800 		add	r0, r7, #120
 1576 0012 D7F89C30 		ldr	r3, [r7, #156]
 1577 0016 C14A     		ldr	r2, .L67
 1578 0018 2021     		movs	r1, #32
 1579 001a FFF7FEFF 		bl	snprintf
 540:notoriOS.c    ****     
 541:notoriOS.c    ****     // Holds string for value that will be written 
 542:notoriOS.c    ****     char value[DATA_MAX_KEY_LENGTH];
 543:notoriOS.c    ****     
 544:notoriOS.c    ****     // If node type is depth node, take level sensor measurements
 545:notoriOS.c    ****     if(updatable_parameters.node_type == NODE_TYPE_DEPTH){
 1580              		.loc 1 545 0
 1581 001e C04B     		ldr	r3, .L67+4
 1582 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1583 0022 002B     		cmp	r3, #0
 1584 0024 3CD1     		bne	.L57
 1585              	.LBB9:
 546:notoriOS.c    ****         
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 41


 547:notoriOS.c    ****         // level_sensor_t is a new data type we defined in level_sensor.h. We then use that data ty
 548:notoriOS.c    ****         level_sensor_t m_level_sensor;
 549:notoriOS.c    ****         
 550:notoriOS.c    ****         // Take level sensor readings and save them to m_level_sensor
 551:notoriOS.c    ****         m_level_sensor = level_sensor_take_reading();
 1586              		.loc 1 551 0
 1587 0026 07F12C03 		add	r3, r7, #44
 1588 002a 1846     		mov	r0, r3
 1589 002c FFF7FEFF 		bl	level_sensor_take_reading
 552:notoriOS.c    ****     
 553:notoriOS.c    ****         // If the number of valid level sensor readings is greater than 0, then print the level sen
 554:notoriOS.c    ****         if(m_level_sensor.num_valid_readings > 0){
 1590              		.loc 1 554 0
 1591 0030 97F84430 		ldrb	r3, [r7, #68]	@ zero_extendqisi2
 1592 0034 002B     		cmp	r3, #0
 1593 0036 2FD0     		beq	.L58
 555:notoriOS.c    ****             snprintf(value,sizeof(value),"%d",m_level_sensor.level_reading);
 1594              		.loc 1 555 0
 1595 0038 B7F94230 		ldrsh	r3, [r7, #66]
 1596 003c 07F16400 		add	r0, r7, #100
 1597 0040 B84A     		ldr	r2, .L67+8
 1598 0042 1421     		movs	r1, #20
 1599 0044 FFF7FEFF 		bl	snprintf
 556:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"maxbotix_depth=%s",value);
 1600              		.loc 1 556 0
 1601 0048 07F16403 		add	r3, r7, #100
 1602 004c 1A46     		mov	r2, r3
 1603 004e B649     		ldr	r1, .L67+12
 1604 0050 0020     		movs	r0, #0
 1605 0052 FFF7FEFF 		bl	printNotif
 557:notoriOS.c    ****             pushData("maxbotix_depth",value,timeStamp);
 1606              		.loc 1 557 0
 1607 0056 07F16403 		add	r3, r7, #100
 1608 005a D7F89C20 		ldr	r2, [r7, #156]
 1609 005e 1946     		mov	r1, r3
 1610 0060 B248     		ldr	r0, .L67+16
 1611 0062 FFF7FEFF 		bl	pushData
 558:notoriOS.c    ****             
 559:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 560:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1612              		.loc 1 560 0
 1613 0066 07F17803 		add	r3, r7, #120
 1614 006a 1A46     		mov	r2, r3
 1615 006c B049     		ldr	r1, .L67+20
 1616 006e B148     		ldr	r0, .L67+24
 1617 0070 FFF7FEFF 		bl	SD_write
 561:notoriOS.c    ****             SD_write(Data_fileName, "a+", " maxbotix_depth: ");
 1618              		.loc 1 561 0
 1619 0074 B04A     		ldr	r2, .L67+28
 1620 0076 AE49     		ldr	r1, .L67+20
 1621 0078 AE48     		ldr	r0, .L67+24
 1622 007a FFF7FEFF 		bl	SD_write
 562:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1623              		.loc 1 562 0
 1624 007e 07F16403 		add	r3, r7, #100
 1625 0082 1A46     		mov	r2, r3
 1626 0084 AA49     		ldr	r1, .L67+20
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 42


 1627 0086 AB48     		ldr	r0, .L67+24
 1628 0088 FFF7FEFF 		bl	SD_write
 563:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1629              		.loc 1 563 0
 1630 008c AB4A     		ldr	r2, .L67+32
 1631 008e A849     		ldr	r1, .L67+20
 1632 0090 A848     		ldr	r0, .L67+24
 1633 0092 FFF7FEFF 		bl	SD_write
 1634 0096 03E0     		b	.L57
 1635              	.L58:
 564:notoriOS.c    ****         }else{
 565:notoriOS.c    ****             printNotif(NOTIF_TYPE_ERROR,"Could not get valid readings from Maxbotix.");
 1636              		.loc 1 565 0
 1637 0098 A949     		ldr	r1, .L67+36
 1638 009a 0220     		movs	r0, #2
 1639 009c FFF7FEFF 		bl	printNotif
 1640              	.L57:
 1641              	.LBE9:
 566:notoriOS.c    ****             //pushData("maxbotix_depth","error",timeStamp);
 567:notoriOS.c    ****         }
 568:notoriOS.c    ****     }
 569:notoriOS.c    ****     
 570:notoriOS.c    ****     
 571:notoriOS.c    ****     // voltage_t is a new data type we defined in voltages.h. We then use that data type to define 
 572:notoriOS.c    ****     voltage_t m_voltage;
 573:notoriOS.c    ****     
 574:notoriOS.c    ****     // Take voltage readings and save them to m_voltage
 575:notoriOS.c    ****     m_voltage = voltage_take_readings();
 1642              		.loc 1 575 0
 1643 00a0 07F14803 		add	r3, r7, #72
 1644 00a4 1846     		mov	r0, r3
 1645 00a6 FFF7FEFF 		bl	voltage_take_readings
 576:notoriOS.c    ****     
 577:notoriOS.c    ****     // If the reading is valid, print the voltage battery and pressure transducer reading and push 
 578:notoriOS.c    ****     if(m_voltage.valid){
 1646              		.loc 1 578 0
 1647 00aa 97F86030 		ldrb	r3, [r7, #96]	@ zero_extendqisi2
 1648 00ae 002B     		cmp	r3, #0
 1649 00b0 00F0B280 		beq	.L60
 579:notoriOS.c    ****         // battery voltage data
 580:notoriOS.c    ****         snprintf(value,sizeof(value),"%.2f",m_voltage.voltage_battery);
 1650              		.loc 1 580 0
 1651 00b4 BB6C     		ldr	r3, [r7, #72]	@ float
 1652 00b6 1846     		mov	r0, r3
 1653 00b8 FFF7FEFF 		bl	__aeabi_f2d
 1654 00bc 0346     		mov	r3, r0
 1655 00be 0C46     		mov	r4, r1
 1656 00c0 07F16400 		add	r0, r7, #100
 1657 00c4 CDE90034 		strd	r3, [sp]
 1658 00c8 9E4A     		ldr	r2, .L67+40
 1659 00ca 1421     		movs	r1, #20
 1660 00cc FFF7FEFF 		bl	snprintf
 581:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"v_bat=%s",value);
 1661              		.loc 1 581 0
 1662 00d0 07F16403 		add	r3, r7, #100
 1663 00d4 1A46     		mov	r2, r3
 1664 00d6 9C49     		ldr	r1, .L67+44
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 43


 1665 00d8 0020     		movs	r0, #0
 1666 00da FFF7FEFF 		bl	printNotif
 582:notoriOS.c    ****         pushData("v_bat",value,timeStamp);
 1667              		.loc 1 582 0
 1668 00de 07F16403 		add	r3, r7, #100
 1669 00e2 D7F89C20 		ldr	r2, [r7, #156]
 1670 00e6 1946     		mov	r1, r3
 1671 00e8 9848     		ldr	r0, .L67+48
 1672 00ea FFF7FEFF 		bl	pushData
 583:notoriOS.c    ****         
 584:notoriOS.c    ****         // Print measurement to SD card to file called data.txt
 585:notoriOS.c    ****         SD_write(Data_fileName, "a+", " ");
 1673              		.loc 1 585 0
 1674 00ee 934A     		ldr	r2, .L67+32
 1675 00f0 8F49     		ldr	r1, .L67+20
 1676 00f2 9048     		ldr	r0, .L67+24
 1677 00f4 FFF7FEFF 		bl	SD_write
 586:notoriOS.c    ****         SD_write(Data_fileName, "a+", c_timeStamp);
 1678              		.loc 1 586 0
 1679 00f8 07F17803 		add	r3, r7, #120
 1680 00fc 1A46     		mov	r2, r3
 1681 00fe 8C49     		ldr	r1, .L67+20
 1682 0100 8C48     		ldr	r0, .L67+24
 1683 0102 FFF7FEFF 		bl	SD_write
 587:notoriOS.c    ****         SD_write(Data_fileName, "a+", " vbat: ");
 1684              		.loc 1 587 0
 1685 0106 924A     		ldr	r2, .L67+52
 1686 0108 8949     		ldr	r1, .L67+20
 1687 010a 8A48     		ldr	r0, .L67+24
 1688 010c FFF7FEFF 		bl	SD_write
 588:notoriOS.c    ****         SD_write(Data_fileName, "a+", value);
 1689              		.loc 1 588 0
 1690 0110 07F16403 		add	r3, r7, #100
 1691 0114 1A46     		mov	r2, r3
 1692 0116 8649     		ldr	r1, .L67+20
 1693 0118 8648     		ldr	r0, .L67+24
 1694 011a FFF7FEFF 		bl	SD_write
 589:notoriOS.c    ****         
 590:notoriOS.c    ****         // If node type is green infrastructure node, take pressure transducer measurements
 591:notoriOS.c    ****         if(updatable_parameters.node_type == NODE_TYPE_GREENINFRASTRUCTURE){
 1695              		.loc 1 591 0
 1696 011e 804B     		ldr	r3, .L67+4
 1697 0120 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1698 0122 012B     		cmp	r3, #1
 1699 0124 7CD1     		bne	.L62
 1700              	.LBB10:
 592:notoriOS.c    ****             
 593:notoriOS.c    ****             // pressure transducer voltage (V) data
 594:notoriOS.c    ****             //snprintf(value,sizeof(value),"%.2f",m_voltage.voltage_pressure);
 595:notoriOS.c    ****             //printNotif(NOTIF_TYPE_EVENT,"pressure_voltage=%s",value);
 596:notoriOS.c    ****             //pushData("pressure_voltage",value,timeStamp);
 597:notoriOS.c    ****             
 598:notoriOS.c    ****             // pressure_t is a new data type we defined in voltages.h. We then use that data type t
 599:notoriOS.c    ****             pressure_t m_pressure;
 600:notoriOS.c    ****             
 601:notoriOS.c    ****             // Make pressure transducer calculators for current and depth
 602:notoriOS.c    ****             m_pressure = pressure_calculations(m_voltage);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 44


 1701              		.loc 1 602 0
 1702 0126 07F11C05 		add	r5, r7, #28
 1703 012a 6C46     		mov	r4, sp
 1704 012c 07F15403 		add	r3, r7, #84
 1705 0130 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 1706 0132 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 1707 0136 07F14803 		add	r3, r7, #72
 1708 013a 0ECB     		ldmia	r3, {r1, r2, r3}
 1709 013c 2846     		mov	r0, r5
 1710 013e FFF7FEFF 		bl	pressure_calculations
 603:notoriOS.c    ****             
 604:notoriOS.c    ****             // pressure transducer current (mA) data
 605:notoriOS.c    ****             snprintf(value,sizeof(value),"%.2f",m_pressure.pressure_current);
 1711              		.loc 1 605 0
 1712 0142 7B6A     		ldr	r3, [r7, #36]	@ float
 1713 0144 1846     		mov	r0, r3
 1714 0146 FFF7FEFF 		bl	__aeabi_f2d
 1715 014a 0346     		mov	r3, r0
 1716 014c 0C46     		mov	r4, r1
 1717 014e 07F16400 		add	r0, r7, #100
 1718 0152 CDE90034 		strd	r3, [sp]
 1719 0156 7B4A     		ldr	r2, .L67+40
 1720 0158 1421     		movs	r1, #20
 1721 015a FFF7FEFF 		bl	snprintf
 606:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"pressure_current=%s",value);
 1722              		.loc 1 606 0
 1723 015e 07F16403 		add	r3, r7, #100
 1724 0162 1A46     		mov	r2, r3
 1725 0164 7B49     		ldr	r1, .L67+56
 1726 0166 0020     		movs	r0, #0
 1727 0168 FFF7FEFF 		bl	printNotif
 607:notoriOS.c    ****             pushData("pressure_current",value,timeStamp);
 1728              		.loc 1 607 0
 1729 016c 07F16403 		add	r3, r7, #100
 1730 0170 D7F89C20 		ldr	r2, [r7, #156]
 1731 0174 1946     		mov	r1, r3
 1732 0176 7848     		ldr	r0, .L67+60
 1733 0178 FFF7FEFF 		bl	pushData
 608:notoriOS.c    ****             
 609:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 610:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1734              		.loc 1 610 0
 1735 017c 6F4A     		ldr	r2, .L67+32
 1736 017e 6C49     		ldr	r1, .L67+20
 1737 0180 6C48     		ldr	r0, .L67+24
 1738 0182 FFF7FEFF 		bl	SD_write
 611:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1739              		.loc 1 611 0
 1740 0186 07F17803 		add	r3, r7, #120
 1741 018a 1A46     		mov	r2, r3
 1742 018c 6849     		ldr	r1, .L67+20
 1743 018e 6948     		ldr	r0, .L67+24
 1744 0190 FFF7FEFF 		bl	SD_write
 612:notoriOS.c    ****             SD_write(Data_fileName, "a+", " pressure_current: ");
 1745              		.loc 1 612 0
 1746 0194 714A     		ldr	r2, .L67+64
 1747 0196 6649     		ldr	r1, .L67+20
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 45


 1748 0198 6648     		ldr	r0, .L67+24
 1749 019a FFF7FEFF 		bl	SD_write
 613:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1750              		.loc 1 613 0
 1751 019e 07F16403 		add	r3, r7, #100
 1752 01a2 1A46     		mov	r2, r3
 1753 01a4 6249     		ldr	r1, .L67+20
 1754 01a6 6348     		ldr	r0, .L67+24
 1755 01a8 FFF7FEFF 		bl	SD_write
 614:notoriOS.c    ****             
 615:notoriOS.c    ****             // pressure transducer depth (ft) data
 616:notoriOS.c    ****             snprintf(value,sizeof(value),"%.2f",m_pressure.pressure_depth);
 1756              		.loc 1 616 0
 1757 01ac BB6A     		ldr	r3, [r7, #40]	@ float
 1758 01ae 1846     		mov	r0, r3
 1759 01b0 FFF7FEFF 		bl	__aeabi_f2d
 1760 01b4 0346     		mov	r3, r0
 1761 01b6 0C46     		mov	r4, r1
 1762 01b8 07F16400 		add	r0, r7, #100
 1763 01bc CDE90034 		strd	r3, [sp]
 1764 01c0 604A     		ldr	r2, .L67+40
 1765 01c2 1421     		movs	r1, #20
 1766 01c4 FFF7FEFF 		bl	snprintf
 617:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"pressure_depth=%s",value);
 1767              		.loc 1 617 0
 1768 01c8 07F16403 		add	r3, r7, #100
 1769 01cc 1A46     		mov	r2, r3
 1770 01ce 6449     		ldr	r1, .L67+68
 1771 01d0 0020     		movs	r0, #0
 1772 01d2 FFF7FEFF 		bl	printNotif
 618:notoriOS.c    ****             pushData("pressure_depth",value,timeStamp);
 1773              		.loc 1 618 0
 1774 01d6 07F16403 		add	r3, r7, #100
 1775 01da D7F89C20 		ldr	r2, [r7, #156]
 1776 01de 1946     		mov	r1, r3
 1777 01e0 6048     		ldr	r0, .L67+72
 1778 01e2 FFF7FEFF 		bl	pushData
 619:notoriOS.c    ****             
 620:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 621:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1779              		.loc 1 621 0
 1780 01e6 554A     		ldr	r2, .L67+32
 1781 01e8 5149     		ldr	r1, .L67+20
 1782 01ea 5248     		ldr	r0, .L67+24
 1783 01ec FFF7FEFF 		bl	SD_write
 622:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1784              		.loc 1 622 0
 1785 01f0 07F17803 		add	r3, r7, #120
 1786 01f4 1A46     		mov	r2, r3
 1787 01f6 4E49     		ldr	r1, .L67+20
 1788 01f8 4E48     		ldr	r0, .L67+24
 1789 01fa FFF7FEFF 		bl	SD_write
 623:notoriOS.c    ****             SD_write(Data_fileName, "a+", " pressure_depth: ");
 1790              		.loc 1 623 0
 1791 01fe 5A4A     		ldr	r2, .L67+76
 1792 0200 4B49     		ldr	r1, .L67+20
 1793 0202 4C48     		ldr	r0, .L67+24
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 46


 1794 0204 FFF7FEFF 		bl	SD_write
 624:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1795              		.loc 1 624 0
 1796 0208 07F16403 		add	r3, r7, #100
 1797 020c 1A46     		mov	r2, r3
 1798 020e 4849     		ldr	r1, .L67+20
 1799 0210 4848     		ldr	r0, .L67+24
 1800 0212 FFF7FEFF 		bl	SD_write
 1801 0216 03E0     		b	.L62
 1802              	.L60:
 1803              	.LBE10:
 625:notoriOS.c    ****         }    
 626:notoriOS.c    ****     }else{
 627:notoriOS.c    ****         printNotif(NOTIF_TYPE_ERROR,"Could not get valid readings from ADC.");
 1804              		.loc 1 627 0
 1805 0218 5449     		ldr	r1, .L67+80
 1806 021a 0220     		movs	r0, #2
 1807 021c FFF7FEFF 		bl	printNotif
 1808              	.L62:
 628:notoriOS.c    ****     }
 629:notoriOS.c    ****     
 630:notoriOS.c    ****        // If node type is valve, take level sensor measurements and valve position measurements
 631:notoriOS.c    ****     if(updatable_parameters.node_type == NODE_TYPE_VALVE){
 1809              		.loc 1 631 0
 1810 0220 3F4B     		ldr	r3, .L67+4
 1811 0222 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1812 0224 042B     		cmp	r3, #4
 1813 0226 73D1     		bne	.L63
 1814              	.LBB11:
 632:notoriOS.c    ****         
 633:notoriOS.c    ****         // level_sensor_t is a new data type we defined in level_sensor.h. We then use that data ty
 634:notoriOS.c    ****         level_sensor_t m_level_sensor;
 635:notoriOS.c    ****         
 636:notoriOS.c    ****         // Take level sensor readings and save them to m_level_sensor
 637:notoriOS.c    ****         m_level_sensor = level_sensor_take_reading();
 1815              		.loc 1 637 0
 1816 0228 3B46     		mov	r3, r7
 1817 022a 1846     		mov	r0, r3
 1818 022c FFF7FEFF 		bl	level_sensor_take_reading
 638:notoriOS.c    ****     
 639:notoriOS.c    ****         // If the number of valid level sensor readings is greater than 0, then print the level sen
 640:notoriOS.c    ****         if(m_level_sensor.num_valid_readings > 0){
 1819              		.loc 1 640 0
 1820 0230 3B7E     		ldrb	r3, [r7, #24]	@ zero_extendqisi2
 1821 0232 002B     		cmp	r3, #0
 1822 0234 2FD0     		beq	.L64
 641:notoriOS.c    ****             snprintf(value,sizeof(value),"%d",m_level_sensor.level_reading);
 1823              		.loc 1 641 0
 1824 0236 B7F91630 		ldrsh	r3, [r7, #22]
 1825 023a 07F16400 		add	r0, r7, #100
 1826 023e 394A     		ldr	r2, .L67+8
 1827 0240 1421     		movs	r1, #20
 1828 0242 FFF7FEFF 		bl	snprintf
 642:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"maxbotix_depth=%s",value);
 1829              		.loc 1 642 0
 1830 0246 07F16403 		add	r3, r7, #100
 1831 024a 1A46     		mov	r2, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 47


 1832 024c 3649     		ldr	r1, .L67+12
 1833 024e 0020     		movs	r0, #0
 1834 0250 FFF7FEFF 		bl	printNotif
 643:notoriOS.c    ****             pushData("maxbotix_depth",value,timeStamp);
 1835              		.loc 1 643 0
 1836 0254 07F16403 		add	r3, r7, #100
 1837 0258 D7F89C20 		ldr	r2, [r7, #156]
 1838 025c 1946     		mov	r1, r3
 1839 025e 3348     		ldr	r0, .L67+16
 1840 0260 FFF7FEFF 		bl	pushData
 644:notoriOS.c    ****             
 645:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 646:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1841              		.loc 1 646 0
 1842 0264 07F17803 		add	r3, r7, #120
 1843 0268 1A46     		mov	r2, r3
 1844 026a 3149     		ldr	r1, .L67+20
 1845 026c 3148     		ldr	r0, .L67+24
 1846 026e FFF7FEFF 		bl	SD_write
 647:notoriOS.c    ****             SD_write(Data_fileName, "a+", " maxbotix_depth: ");
 1847              		.loc 1 647 0
 1848 0272 314A     		ldr	r2, .L67+28
 1849 0274 2E49     		ldr	r1, .L67+20
 1850 0276 2F48     		ldr	r0, .L67+24
 1851 0278 FFF7FEFF 		bl	SD_write
 648:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1852              		.loc 1 648 0
 1853 027c 07F16403 		add	r3, r7, #100
 1854 0280 1A46     		mov	r2, r3
 1855 0282 2B49     		ldr	r1, .L67+20
 1856 0284 2B48     		ldr	r0, .L67+24
 1857 0286 FFF7FEFF 		bl	SD_write
 649:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1858              		.loc 1 649 0
 1859 028a 2C4A     		ldr	r2, .L67+32
 1860 028c 2849     		ldr	r1, .L67+20
 1861 028e 2948     		ldr	r0, .L67+24
 1862 0290 FFF7FEFF 		bl	SD_write
 1863 0294 03E0     		b	.L65
 1864              	.L64:
 650:notoriOS.c    ****         }else{
 651:notoriOS.c    ****             printNotif(NOTIF_TYPE_ERROR,"Could not get valid readings from Maxbotix.");
 1865              		.loc 1 651 0
 1866 0296 2A49     		ldr	r1, .L67+36
 1867 0298 0220     		movs	r0, #2
 1868 029a FFF7FEFF 		bl	printNotif
 1869              	.L65:
 652:notoriOS.c    ****             //pushData("maxbotix_depth","error",timeStamp);
 653:notoriOS.c    ****         }
 654:notoriOS.c    ****         
 655:notoriOS.c    ****         float32 valve_position = read_Valve_pos();
 1870              		.loc 1 655 0
 1871 029e FFF7FEFF 		bl	read_Valve_pos
 1872 02a2 C7F89800 		str	r0, [r7, #152]	@ float
 656:notoriOS.c    ****         
 657:notoriOS.c    ****         // TODO: check this reading for validity
 658:notoriOS.c    ****         
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 48


 659:notoriOS.c    ****         
 660:notoriOS.c    ****         snprintf(value,sizeof(value),"%f",valve_position);
 1873              		.loc 1 660 0
 1874 02a6 D7F89800 		ldr	r0, [r7, #152]	@ float
 1875 02aa FFF7FEFF 		bl	__aeabi_f2d
 1876 02ae 0346     		mov	r3, r0
 1877 02b0 0C46     		mov	r4, r1
 1878 02b2 07F16400 		add	r0, r7, #100
 1879 02b6 CDE90034 		strd	r3, [sp]
 1880 02ba 2D4A     		ldr	r2, .L67+84
 1881 02bc 1421     		movs	r1, #20
 1882 02be FFF7FEFF 		bl	snprintf
 661:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"valve_open=%s",value);
 1883              		.loc 1 661 0
 1884 02c2 07F16403 		add	r3, r7, #100
 1885 02c6 1A46     		mov	r2, r3
 1886 02c8 2A49     		ldr	r1, .L67+88
 1887 02ca 0020     		movs	r0, #0
 1888 02cc FFF7FEFF 		bl	printNotif
 662:notoriOS.c    ****         pushData("valve_open",value,timeStamp);
 1889              		.loc 1 662 0
 1890 02d0 07F16403 		add	r3, r7, #100
 1891 02d4 D7F89C20 		ldr	r2, [r7, #156]
 1892 02d8 1946     		mov	r1, r3
 1893 02da 2748     		ldr	r0, .L67+92
 1894 02dc FFF7FEFF 		bl	pushData
 663:notoriOS.c    ****         
 664:notoriOS.c    ****         // Print measurement to SD card to file called data.txt
 665:notoriOS.c    ****         SD_write(Data_fileName, "a+", c_timeStamp);
 1895              		.loc 1 665 0
 1896 02e0 07F17803 		add	r3, r7, #120
 1897 02e4 1A46     		mov	r2, r3
 1898 02e6 1249     		ldr	r1, .L67+20
 1899 02e8 1248     		ldr	r0, .L67+24
 1900 02ea FFF7FEFF 		bl	SD_write
 666:notoriOS.c    ****         SD_write(Data_fileName, "a+", " valve_open: ");
 1901              		.loc 1 666 0
 1902 02ee 234A     		ldr	r2, .L67+96
 1903 02f0 0F49     		ldr	r1, .L67+20
 1904 02f2 1048     		ldr	r0, .L67+24
 1905 02f4 FFF7FEFF 		bl	SD_write
 667:notoriOS.c    ****         SD_write(Data_fileName, "a+", value);
 1906              		.loc 1 667 0
 1907 02f8 07F16403 		add	r3, r7, #100
 1908 02fc 1A46     		mov	r2, r3
 1909 02fe 0C49     		ldr	r1, .L67+20
 1910 0300 0C48     		ldr	r0, .L67+24
 1911 0302 FFF7FEFF 		bl	SD_write
 668:notoriOS.c    ****         SD_write(Data_fileName, "a+", " ");
 1912              		.loc 1 668 0
 1913 0306 0D4A     		ldr	r2, .L67+32
 1914 0308 0949     		ldr	r1, .L67+20
 1915 030a 0A48     		ldr	r0, .L67+24
 1916 030c FFF7FEFF 		bl	SD_write
 1917              	.L63:
 1918              	.LBE11:
 669:notoriOS.c    ****         
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 49


 670:notoriOS.c    ****     }
 671:notoriOS.c    ****     
 672:notoriOS.c    ****     return 0u;
 1919              		.loc 1 672 0
 1920 0310 0023     		movs	r3, #0
 673:notoriOS.c    **** }
 1921              		.loc 1 673 0
 1922 0312 1846     		mov	r0, r3
 1923 0314 A037     		adds	r7, r7, #160
 1924              		.cfi_def_cfa_offset 16
 1925 0316 BD46     		mov	sp, r7
 1926              		.cfi_def_cfa_register 13
 1927              		@ sp needed
 1928 0318 B0BD     		pop	{r4, r5, r7, pc}
 1929              	.L68:
 1930 031a 00BF     		.align	2
 1931              	.L67:
 1932 031c 9C020000 		.word	.LC36
 1933 0320 00000000 		.word	updatable_parameters
 1934 0324 3C000000 		.word	.LC2
 1935 0328 A0020000 		.word	.LC37
 1936 032c B4020000 		.word	.LC38
 1937 0330 C4020000 		.word	.LC39
 1938 0334 00000000 		.word	Data_fileName
 1939 0338 C8020000 		.word	.LC40
 1940 033c DC020000 		.word	.LC41
 1941 0340 E0020000 		.word	.LC42
 1942 0344 0C030000 		.word	.LC43
 1943 0348 14030000 		.word	.LC44
 1944 034c 20030000 		.word	.LC45
 1945 0350 28030000 		.word	.LC46
 1946 0354 30030000 		.word	.LC47
 1947 0358 44030000 		.word	.LC48
 1948 035c 58030000 		.word	.LC49
 1949 0360 6C030000 		.word	.LC50
 1950 0364 80030000 		.word	.LC51
 1951 0368 90030000 		.word	.LC52
 1952 036c A4030000 		.word	.LC53
 1953 0370 CC030000 		.word	.LC54
 1954 0374 D0030000 		.word	.LC55
 1955 0378 E0030000 		.word	.LC56
 1956 037c EC030000 		.word	.LC57
 1957              		.cfi_endproc
 1958              	.LFE76:
 1959              		.size	makeMeasurements, .-makeMeasurements
 1960              		.section	.rodata
 1961 03fa 0000     		.align	2
 1962              	.LC58:
 1963 03fc 4572726F 		.ascii	"Error setting system time.\000"
 1963      72207365 
 1963      7474696E 
 1963      67207379 
 1963      7374656D 
 1964              		.section	.text.setTime,"ax",%progbits
 1965              		.align	2
 1966              		.global	setTime
 1967              		.thumb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 50


 1968              		.thumb_func
 1969              		.type	setTime, %function
 1970              	setTime:
 1971              	.LFB77:
 674:notoriOS.c    **** 
 675:notoriOS.c    **** // ==============================================
 676:notoriOS.c    **** // Set the system time
 677:notoriOS.c    **** // Returns 0 if there is an error, returns 1 if successful
 678:notoriOS.c    **** // ==============================================
 679:notoriOS.c    **** uint8 setTime(long timeStamp){
 1972              		.loc 1 679 0
 1973              		.cfi_startproc
 1974              		@ args = 0, pretend = 0, frame = 24
 1975              		@ frame_needed = 1, uses_anonymous_args = 0
 1976 0000 80B5     		push	{r7, lr}
 1977              		.cfi_def_cfa_offset 8
 1978              		.cfi_offset 7, -8
 1979              		.cfi_offset 14, -4
 1980 0002 86B0     		sub	sp, sp, #24
 1981              		.cfi_def_cfa_offset 32
 1982 0004 00AF     		add	r7, sp, #0
 1983              		.cfi_def_cfa_register 7
 1984 0006 7860     		str	r0, [r7, #4]
 680:notoriOS.c    ****     // If timestamp is <= 0 print error statement and return 0
 681:notoriOS.c    ****     if(timeStamp <=0){
 1985              		.loc 1 681 0
 1986 0008 7B68     		ldr	r3, [r7, #4]
 1987 000a 002B     		cmp	r3, #0
 1988 000c 05DC     		bgt	.L70
 682:notoriOS.c    ****         printNotif(NOTIF_TYPE_ERROR,"Error setting system time.");
 1989              		.loc 1 682 0
 1990 000e 1849     		ldr	r1, .L72
 1991 0010 0220     		movs	r0, #2
 1992 0012 FFF7FEFF 		bl	printNotif
 683:notoriOS.c    ****         return 0;  
 1993              		.loc 1 683 0
 1994 0016 0023     		movs	r3, #0
 1995 0018 25E0     		b	.L71
 1996              	.L70:
 684:notoriOS.c    ****     }
 685:notoriOS.c    ****     // Create a new pointer t of data structure tm
 686:notoriOS.c    ****     struct tm * t;
 687:notoriOS.c    ****     // Converts a calendar time (pointed to by timer) and returns a pointer to a structure containi
 688:notoriOS.c    ****     t = gmtime(&timeStamp);
 1997              		.loc 1 688 0
 1998 001a 3B1D     		adds	r3, r7, #4
 1999 001c 1846     		mov	r0, r3
 2000 001e FFF7FEFF 		bl	gmtime
 2001 0022 7861     		str	r0, [r7, #20]
 689:notoriOS.c    ****     
 690:notoriOS.c    ****     // Create variable localTime of data structure RTC_TIME_DATE
 691:notoriOS.c    ****     RTC_TIME_DATE localTime;
 692:notoriOS.c    ****     localTime.Sec = t->tm_sec;
 2002              		.loc 1 692 0
 2003 0024 7B69     		ldr	r3, [r7, #20]
 2004 0026 1B68     		ldr	r3, [r3]
 2005 0028 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 51


 2006 002a 3B72     		strb	r3, [r7, #8]
 693:notoriOS.c    ****     localTime.Min = t->tm_min;
 2007              		.loc 1 693 0
 2008 002c 7B69     		ldr	r3, [r7, #20]
 2009 002e 5B68     		ldr	r3, [r3, #4]
 2010 0030 DBB2     		uxtb	r3, r3
 2011 0032 7B72     		strb	r3, [r7, #9]
 694:notoriOS.c    ****     localTime.Hour = t->tm_hour;
 2012              		.loc 1 694 0
 2013 0034 7B69     		ldr	r3, [r7, #20]
 2014 0036 9B68     		ldr	r3, [r3, #8]
 2015 0038 DBB2     		uxtb	r3, r3
 2016 003a BB72     		strb	r3, [r7, #10]
 695:notoriOS.c    ****     localTime.Year = t->tm_year + 1900;
 2017              		.loc 1 695 0
 2018 003c 7B69     		ldr	r3, [r7, #20]
 2019 003e 5B69     		ldr	r3, [r3, #20]
 2020 0040 9BB2     		uxth	r3, r3
 2021 0042 03F26C73 		addw	r3, r3, #1900
 2022 0046 9BB2     		uxth	r3, r3
 2023 0048 7B82     		strh	r3, [r7, #18]	@ movhi
 696:notoriOS.c    ****     localTime.Month = t->tm_mon;
 2024              		.loc 1 696 0
 2025 004a 7B69     		ldr	r3, [r7, #20]
 2026 004c 1B69     		ldr	r3, [r3, #16]
 2027 004e DBB2     		uxtb	r3, r3
 2028 0050 3B74     		strb	r3, [r7, #16]
 697:notoriOS.c    ****     localTime.DayOfMonth = t->tm_mday;
 2029              		.loc 1 697 0
 2030 0052 7B69     		ldr	r3, [r7, #20]
 2031 0054 DB68     		ldr	r3, [r3, #12]
 2032 0056 DBB2     		uxtb	r3, r3
 2033 0058 3B73     		strb	r3, [r7, #12]
 698:notoriOS.c    **** 
 699:notoriOS.c    ****     // Writes time and date values as current time and date.
 700:notoriOS.c    ****     RTC_WriteTime(&localTime);
 2034              		.loc 1 700 0
 2035 005a 07F10803 		add	r3, r7, #8
 2036 005e 1846     		mov	r0, r3
 2037 0060 FFF7FEFF 		bl	RTC_WriteTime
 701:notoriOS.c    ****     
 702:notoriOS.c    ****     // Return 1 when the system time was set properly.
 703:notoriOS.c    ****     return 1;
 2038              		.loc 1 703 0
 2039 0064 0123     		movs	r3, #1
 2040              	.L71:
 704:notoriOS.c    **** }
 2041              		.loc 1 704 0
 2042 0066 1846     		mov	r0, r3
 2043 0068 1837     		adds	r7, r7, #24
 2044              		.cfi_def_cfa_offset 8
 2045 006a BD46     		mov	sp, r7
 2046              		.cfi_def_cfa_register 13
 2047              		@ sp needed
 2048 006c 80BD     		pop	{r7, pc}
 2049              	.L73:
 2050 006e 00BF     		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 52


 2051              	.L72:
 2052 0070 FC030000 		.word	.LC58
 2053              		.cfi_endproc
 2054              	.LFE77:
 2055              		.size	setTime, .-setTime
 2056              		.section	.rodata
 2057 0417 00       		.align	2
 2058              	.LC59:
 2059 0418 75706772 		.ascii	"upgrade.hex\000"
 2059      6164652E 
 2059      68657800 
 2060              		.section	.text.upgraded,"ax",%progbits
 2061              		.align	2
 2062              		.global	upgraded
 2063              		.thumb
 2064              		.thumb_func
 2065              		.type	upgraded, %function
 2066              	upgraded:
 2067              	.LFB78:
 705:notoriOS.c    **** 
 706:notoriOS.c    **** //downloads and stores files on SD card
 707:notoriOS.c    **** 
 708:notoriOS.c    **** 
 709:notoriOS.c    **** 
 710:notoriOS.c    **** // ==============================================
 711:notoriOS.c    **** // Will they love it, will they hate it
 712:notoriOS.c    **** // Never fade it, I evade it
 713:notoriOS.c    **** // Cause I never really want to complicate it
 714:notoriOS.c    **** //      - Logic, Upgraded (2015)
 715:notoriOS.c    **** //
 716:notoriOS.c    **** // downloads new firmware, stores it on SD card, and reboots the system to allow bootloader 
 717:notoriOS.c    **** // returns 0 if modem is connected, 1 if the file downlaod failed, and does not return otherwise (b
 718:notoriOS.c    **** // ==============================================
 719:notoriOS.c    **** 
 720:notoriOS.c    **** uint8 upgraded(char *host, int port,  char *route){
 2068              		.loc 1 720 0
 2069              		.cfi_startproc
 2070              		@ args = 0, pretend = 0, frame = 232
 2071              		@ frame_needed = 1, uses_anonymous_args = 0
 2072 0000 80B5     		push	{r7, lr}
 2073              		.cfi_def_cfa_offset 8
 2074              		.cfi_offset 7, -8
 2075              		.cfi_offset 14, -4
 2076 0002 C0B0     		sub	sp, sp, #256
 2077              		.cfi_def_cfa_offset 264
 2078 0004 06AF     		add	r7, sp, #24
 2079              		.cfi_def_cfa 7, 240
 2080 0006 F860     		str	r0, [r7, #12]
 2081 0008 B960     		str	r1, [r7, #8]
 2082 000a 7A60     		str	r2, [r7, #4]
 721:notoriOS.c    ****     
 722:notoriOS.c    ****     uint8 upgrade_status = 0;
 2083              		.loc 1 722 0
 2084 000c 0023     		movs	r3, #0
 2085 000e 87F8E730 		strb	r3, [r7, #231]
 723:notoriOS.c    ****     
 724:notoriOS.c    ****    //AGPS will only work if we're connected to network, so don't call this fuction otherwise
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 53


 725:notoriOS.c    ****     if(modem_state != MODEM_STATE_READY){
 2086              		.loc 1 725 0
 2087 0012 384B     		ldr	r3, .L78
 2088 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2089 0016 042B     		cmp	r3, #4
 2090 0018 02D0     		beq	.L75
 726:notoriOS.c    ****         return upgrade_status;//where valid = 0
 2091              		.loc 1 726 0
 2092 001a 97F8E730 		ldrb	r3, [r7, #231]	@ zero_extendqisi2
 2093 001e 65E0     		b	.L77
 2094              	.L75:
 727:notoriOS.c    ****     }
 728:notoriOS.c    ****     
 729:notoriOS.c    ****     char fileName[] = "upgrade.hex";
 2095              		.loc 1 729 0
 2096 0020 354A     		ldr	r2, .L78+4
 2097 0022 07F1D803 		add	r3, r7, #216
 2098 0026 07CA     		ldmia	r2, {r0, r1, r2}
 2099 0028 83E80700 		stmia	r3, {r0, r1, r2}
 730:notoriOS.c    ****     //delete file, if one exisits already
 731:notoriOS.c    ****     SD_rmfile(fileName);
 2100              		.loc 1 731 0
 2101 002c 07F1D803 		add	r3, r7, #216
 2102 0030 1846     		mov	r0, r3
 2103 0032 FFF7FEFF 		bl	SD_rmfile
 732:notoriOS.c    ****     
 733:notoriOS.c    ****     // Create http request
 734:notoriOS.c    ****     construct_generic_HTTP_request(http_request,http_body,host,route,port,"POST","Close","",0,"1.1"
 2104              		.loc 1 734 0
 2105 0036 314B     		ldr	r3, .L78+8
 2106 0038 0593     		str	r3, [sp, #20]
 2107 003a 0023     		movs	r3, #0
 2108 003c 0493     		str	r3, [sp, #16]
 2109 003e 304B     		ldr	r3, .L78+12
 2110 0040 0393     		str	r3, [sp, #12]
 2111 0042 304B     		ldr	r3, .L78+16
 2112 0044 0293     		str	r3, [sp, #8]
 2113 0046 304B     		ldr	r3, .L78+20
 2114 0048 0193     		str	r3, [sp, #4]
 2115 004a BB68     		ldr	r3, [r7, #8]
 2116 004c 0093     		str	r3, [sp]
 2117 004e 7B68     		ldr	r3, [r7, #4]
 2118 0050 FA68     		ldr	r2, [r7, #12]
 2119 0052 2E49     		ldr	r1, .L78+24
 2120 0054 2E48     		ldr	r0, .L78+28
 2121 0056 FFF7FEFF 		bl	construct_generic_HTTP_request
 735:notoriOS.c    ****     printNotif(NOTIF_TYPE_EVENT,"Full HTTP Request: %s", http_request);
 2122              		.loc 1 735 0
 2123 005a 2D4A     		ldr	r2, .L78+28
 2124 005c 2D49     		ldr	r1, .L78+32
 2125 005e 0020     		movs	r0, #0
 2126 0060 FFF7FEFF 		bl	printNotif
 736:notoriOS.c    ****     // Create array portConfig of size 200 characters
 737:notoriOS.c    ****     char portConfig[200];
 738:notoriOS.c    ****     // Print port configurations
 739:notoriOS.c    ****     snprintf(portConfig,sizeof(portConfig),"AT#SD=1,0,%d,\"%s\",0,0,1\r",port,host);
 2127              		.loc 1 739 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 54


 2128 0064 07F11000 		add	r0, r7, #16
 2129 0068 FB68     		ldr	r3, [r7, #12]
 2130 006a 0093     		str	r3, [sp]
 2131 006c BB68     		ldr	r3, [r7, #8]
 2132 006e 2A4A     		ldr	r2, .L78+36
 2133 0070 C821     		movs	r1, #200
 2134 0072 FFF7FEFF 		bl	snprintf
 740:notoriOS.c    ****     printNotif(NOTIF_TYPE_EVENT,"%s",portConfig);
 2135              		.loc 1 740 0
 2136 0076 07F11003 		add	r3, r7, #16
 2137 007a 1A46     		mov	r2, r3
 2138 007c 2749     		ldr	r1, .L78+40
 2139 007e 0020     		movs	r0, #0
 2140 0080 FFF7FEFF 		bl	printNotif
 741:notoriOS.c    ****     // AT command to configure the port
 742:notoriOS.c    ****     upgrade_status = at_write_command(portConfig,"OK",10000u);
 2141              		.loc 1 742 0
 2142 0084 07F11003 		add	r3, r7, #16
 2143 0088 42F21072 		movw	r2, #10000
 2144 008c 2449     		ldr	r1, .L78+44
 2145 008e 1846     		mov	r0, r3
 2146 0090 FFF7FEFF 		bl	at_write_command
 2147 0094 0346     		mov	r3, r0
 2148 0096 87F8E730 		strb	r3, [r7, #231]
 743:notoriOS.c    ****     // AT command #SSEND= is an execution command that permits, while the modul eis in command mode
 744:notoriOS.c    ****     // To complete the operation, send Ctrl-Z char to exit
 745:notoriOS.c    ****     upgrade_status = at_write_command("AT#SSEND=1\r\n",   ">", 1000u);
 2149              		.loc 1 745 0
 2150 009a 4FF47A72 		mov	r2, #1000
 2151 009e 2149     		ldr	r1, .L78+48
 2152 00a0 2148     		ldr	r0, .L78+52
 2153 00a2 FFF7FEFF 		bl	at_write_command
 2154 00a6 0346     		mov	r3, r0
 2155 00a8 87F8E730 		strb	r3, [r7, #231]
 746:notoriOS.c    ****     // Append <ctrl+z> escape sequence to http_request to exit modem command line
 747:notoriOS.c    ****     strncat(http_request, "\032", 1); 
 2156              		.loc 1 747 0
 2157 00ac 1848     		ldr	r0, .L78+28
 2158 00ae FFF7FEFF 		bl	strlen
 2159 00b2 0346     		mov	r3, r0
 2160 00b4 1A46     		mov	r2, r3
 2161 00b6 164B     		ldr	r3, .L78+28
 2162 00b8 1344     		add	r3, r3, r2
 2163 00ba 1C49     		ldr	r1, .L78+56
 2164 00bc 1A46     		mov	r2, r3
 2165 00be 0B46     		mov	r3, r1
 2166 00c0 1B88     		ldrh	r3, [r3]	@ unaligned
 2167 00c2 1380     		strh	r3, [r2]	@ unaligned
 748:notoriOS.c    ****     // AT command to send http request
 749:notoriOS.c    ****     upgrade_status = at_write_command(http_request, "OK", 5000u);
 2168              		.loc 1 749 0
 2169 00c4 41F28832 		movw	r2, #5000
 2170 00c8 1549     		ldr	r1, .L78+44
 2171 00ca 1148     		ldr	r0, .L78+28
 2172 00cc FFF7FEFF 		bl	at_write_command
 2173 00d0 0346     		mov	r3, r0
 2174 00d2 87F8E730 		strb	r3, [r7, #231]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 55


 750:notoriOS.c    ****     // AT command #SRECV= is an execution command that permits users to read data arrived through a
 751:notoriOS.c    ****     // = 1 means the UPD information is enabled: data are read just until the end of the UDP datagr
 752:notoriOS.c    ****     upgrade_status = at_write_command("AT#SRECV=1,1000\r","OS-OK",5000u);
 2175              		.loc 1 752 0
 2176 00d6 41F28832 		movw	r2, #5000
 2177 00da 1549     		ldr	r1, .L78+60
 2178 00dc 1548     		ldr	r0, .L78+64
 2179 00de FFF7FEFF 		bl	at_write_command
 2180 00e2 0346     		mov	r3, r0
 2181 00e4 87F8E730 		strb	r3, [r7, #231]
 753:notoriOS.c    ****     //SD_write(fileName,"w+",uart_received_string);
 754:notoriOS.c    ****     
 755:notoriOS.c    ****     
 756:notoriOS.c    ****     return upgrade_status;
 2182              		.loc 1 756 0
 2183 00e8 97F8E730 		ldrb	r3, [r7, #231]	@ zero_extendqisi2
 2184              	.L77:
 757:notoriOS.c    ****     
 758:notoriOS.c    **** }
 2185              		.loc 1 758 0 discriminator 1
 2186 00ec 1846     		mov	r0, r3
 2187 00ee E837     		adds	r7, r7, #232
 2188              		.cfi_def_cfa_offset 8
 2189 00f0 BD46     		mov	sp, r7
 2190              		.cfi_def_cfa_register 13
 2191              		@ sp needed
 2192 00f2 80BD     		pop	{r7, pc}
 2193              	.L79:
 2194              		.align	2
 2195              	.L78:
 2196 00f4 00000000 		.word	modem_state
 2197 00f8 18040000 		.word	.LC59
 2198 00fc 94010000 		.word	.LC17
 2199 0100 98010000 		.word	.LC18
 2200 0104 9C010000 		.word	.LC19
 2201 0108 A4010000 		.word	.LC20
 2202 010c 00000000 		.word	http_body
 2203 0110 00000000 		.word	http_request
 2204 0114 AC010000 		.word	.LC21
 2205 0118 C4010000 		.word	.LC22
 2206 011c E0010000 		.word	.LC23
 2207 0120 E4010000 		.word	.LC24
 2208 0124 14020000 		.word	.LC27
 2209 0128 18020000 		.word	.LC28
 2210 012c 28020000 		.word	.LC29
 2211 0130 44020000 		.word	.LC32
 2212 0134 4C020000 		.word	.LC33
 2213              		.cfi_endproc
 2214              	.LFE78:
 2215              		.size	upgraded, .-upgraded
 2216              		.text
 2217              	.Letext0:
 2218              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2219              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2220              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2221              		.file 5 "Generated_Source\\PSoC5/RTC.h"
 2222              		.file 6 "testing.h"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 56


 2223              		.file 7 "level_sensor.h"
 2224              		.file 8 "voltages.h"
 2225              		.file 9 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2226              		.file 10 "data.h"
 2227              		.file 11 "modem.h"
 2228              		.file 12 "notoriOS.h"
 2229              		.file 13 "Generated_Source\\PSoC5/core_cm3.h"
 2230              		.section	.debug_info,"",%progbits
 2231              	.Ldebug_info0:
 2232 0000 6F0C0000 		.4byte	0xc6f
 2233 0004 0400     		.2byte	0x4
 2234 0006 00000000 		.4byte	.Ldebug_abbrev0
 2235 000a 04       		.byte	0x4
 2236 000b 01       		.uleb128 0x1
 2237 000c AC000000 		.4byte	.LASF165
 2238 0010 0C       		.byte	0xc
 2239 0011 FC070000 		.4byte	.LASF166
 2240 0015 2C000000 		.4byte	.LASF167
 2241 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2242 001d 00000000 		.4byte	0
 2243 0021 00000000 		.4byte	.Ldebug_line0
 2244 0025 02       		.uleb128 0x2
 2245 0026 01       		.byte	0x1
 2246 0027 06       		.byte	0x6
 2247 0028 7D000000 		.4byte	.LASF0
 2248 002c 02       		.uleb128 0x2
 2249 002d 01       		.byte	0x1
 2250 002e 08       		.byte	0x8
 2251 002f EE050000 		.4byte	.LASF1
 2252 0033 02       		.uleb128 0x2
 2253 0034 02       		.byte	0x2
 2254 0035 05       		.byte	0x5
 2255 0036 57040000 		.4byte	.LASF2
 2256 003a 02       		.uleb128 0x2
 2257 003b 02       		.byte	0x2
 2258 003c 07       		.byte	0x7
 2259 003d 94070000 		.4byte	.LASF3
 2260 0041 03       		.uleb128 0x3
 2261 0042 4F070000 		.4byte	.LASF9
 2262 0046 02       		.byte	0x2
 2263 0047 3F       		.byte	0x3f
 2264 0048 4C000000 		.4byte	0x4c
 2265 004c 02       		.uleb128 0x2
 2266 004d 04       		.byte	0x4
 2267 004e 05       		.byte	0x5
 2268 004f 41020000 		.4byte	.LASF4
 2269 0053 02       		.uleb128 0x2
 2270 0054 04       		.byte	0x4
 2271 0055 07       		.byte	0x7
 2272 0056 94030000 		.4byte	.LASF5
 2273 005a 02       		.uleb128 0x2
 2274 005b 08       		.byte	0x8
 2275 005c 05       		.byte	0x5
 2276 005d 9C010000 		.4byte	.LASF6
 2277 0061 02       		.uleb128 0x2
 2278 0062 08       		.byte	0x8
 2279 0063 07       		.byte	0x7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 57


 2280 0064 4B010000 		.4byte	.LASF7
 2281 0068 04       		.uleb128 0x4
 2282 0069 04       		.byte	0x4
 2283 006a 05       		.byte	0x5
 2284 006b 696E7400 		.ascii	"int\000"
 2285 006f 02       		.uleb128 0x2
 2286 0070 04       		.byte	0x4
 2287 0071 07       		.byte	0x7
 2288 0072 40030000 		.4byte	.LASF8
 2289 0076 03       		.uleb128 0x3
 2290 0077 E6050000 		.4byte	.LASF10
 2291 007b 03       		.byte	0x3
 2292 007c 2C       		.byte	0x2c
 2293 007d 41000000 		.4byte	0x41
 2294 0081 05       		.uleb128 0x5
 2295 0082 78020000 		.4byte	.LASF11
 2296 0086 04       		.byte	0x4
 2297 0087 9201     		.2byte	0x192
 2298 0089 2C000000 		.4byte	0x2c
 2299 008d 05       		.uleb128 0x5
 2300 008e 08000000 		.4byte	.LASF12
 2301 0092 04       		.byte	0x4
 2302 0093 9301     		.2byte	0x193
 2303 0095 3A000000 		.4byte	0x3a
 2304 0099 05       		.uleb128 0x5
 2305 009a BC020000 		.4byte	.LASF13
 2306 009e 04       		.byte	0x4
 2307 009f 9401     		.2byte	0x194
 2308 00a1 53000000 		.4byte	0x53
 2309 00a5 05       		.uleb128 0x5
 2310 00a6 1A040000 		.4byte	.LASF14
 2311 00aa 04       		.byte	0x4
 2312 00ab 9501     		.2byte	0x195
 2313 00ad 25000000 		.4byte	0x25
 2314 00b1 05       		.uleb128 0x5
 2315 00b2 11080000 		.4byte	.LASF15
 2316 00b6 04       		.byte	0x4
 2317 00b7 9601     		.2byte	0x196
 2318 00b9 33000000 		.4byte	0x33
 2319 00bd 05       		.uleb128 0x5
 2320 00be 96020000 		.4byte	.LASF16
 2321 00c2 04       		.byte	0x4
 2322 00c3 9701     		.2byte	0x197
 2323 00c5 4C000000 		.4byte	0x4c
 2324 00c9 05       		.uleb128 0x5
 2325 00ca CC040000 		.4byte	.LASF17
 2326 00ce 04       		.byte	0x4
 2327 00cf 9801     		.2byte	0x198
 2328 00d1 D5000000 		.4byte	0xd5
 2329 00d5 02       		.uleb128 0x2
 2330 00d6 04       		.byte	0x4
 2331 00d7 04       		.byte	0x4
 2332 00d8 8B050000 		.4byte	.LASF18
 2333 00dc 02       		.uleb128 0x2
 2334 00dd 08       		.byte	0x8
 2335 00de 04       		.byte	0x4
 2336 00df A2080000 		.4byte	.LASF19
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 58


 2337 00e3 02       		.uleb128 0x2
 2338 00e4 01       		.byte	0x1
 2339 00e5 08       		.byte	0x8
 2340 00e6 10070000 		.4byte	.LASF20
 2341 00ea 02       		.uleb128 0x2
 2342 00eb 08       		.byte	0x8
 2343 00ec 04       		.byte	0x4
 2344 00ed F2060000 		.4byte	.LASF21
 2345 00f1 02       		.uleb128 0x2
 2346 00f2 04       		.byte	0x4
 2347 00f3 07       		.byte	0x7
 2348 00f4 E5040000 		.4byte	.LASF22
 2349 00f8 06       		.uleb128 0x6
 2350 00f9 04       		.byte	0x4
 2351 00fa E3000000 		.4byte	0xe3
 2352 00fe 07       		.uleb128 0x7
 2353 00ff E3000000 		.4byte	0xe3
 2354 0103 0E010000 		.4byte	0x10e
 2355 0107 08       		.uleb128 0x8
 2356 0108 F1000000 		.4byte	0xf1
 2357 010c 17       		.byte	0x17
 2358 010d 00       		.byte	0
 2359 010e 09       		.uleb128 0x9
 2360 010f 0C       		.byte	0xc
 2361 0110 05       		.byte	0x5
 2362 0111 30       		.byte	0x30
 2363 0112 77010000 		.4byte	0x177
 2364 0116 0A       		.uleb128 0xa
 2365 0117 53656300 		.ascii	"Sec\000"
 2366 011b 05       		.byte	0x5
 2367 011c 32       		.byte	0x32
 2368 011d 81000000 		.4byte	0x81
 2369 0121 00       		.byte	0
 2370 0122 0A       		.uleb128 0xa
 2371 0123 4D696E00 		.ascii	"Min\000"
 2372 0127 05       		.byte	0x5
 2373 0128 33       		.byte	0x33
 2374 0129 81000000 		.4byte	0x81
 2375 012d 01       		.byte	0x1
 2376 012e 0B       		.uleb128 0xb
 2377 012f 62010000 		.4byte	.LASF23
 2378 0133 05       		.byte	0x5
 2379 0134 34       		.byte	0x34
 2380 0135 81000000 		.4byte	0x81
 2381 0139 02       		.byte	0x2
 2382 013a 0B       		.uleb128 0xb
 2383 013b 51060000 		.4byte	.LASF24
 2384 013f 05       		.byte	0x5
 2385 0140 35       		.byte	0x35
 2386 0141 81000000 		.4byte	0x81
 2387 0145 03       		.byte	0x3
 2388 0146 0B       		.uleb128 0xb
 2389 0147 D5030000 		.4byte	.LASF25
 2390 014b 05       		.byte	0x5
 2391 014c 36       		.byte	0x36
 2392 014d 81000000 		.4byte	0x81
 2393 0151 04       		.byte	0x4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 59


 2394 0152 0B       		.uleb128 0xb
 2395 0153 5C080000 		.4byte	.LASF26
 2396 0157 05       		.byte	0x5
 2397 0158 37       		.byte	0x37
 2398 0159 8D000000 		.4byte	0x8d
 2399 015d 06       		.byte	0x6
 2400 015e 0B       		.uleb128 0xb
 2401 015f 45010000 		.4byte	.LASF27
 2402 0163 05       		.byte	0x5
 2403 0164 38       		.byte	0x38
 2404 0165 81000000 		.4byte	0x81
 2405 0169 08       		.byte	0x8
 2406 016a 0B       		.uleb128 0xb
 2407 016b DB050000 		.4byte	.LASF28
 2408 016f 05       		.byte	0x5
 2409 0170 39       		.byte	0x39
 2410 0171 8D000000 		.4byte	0x8d
 2411 0175 0A       		.byte	0xa
 2412 0176 00       		.byte	0
 2413 0177 03       		.uleb128 0x3
 2414 0178 30050000 		.4byte	.LASF29
 2415 017c 05       		.byte	0x5
 2416 017d 3A       		.byte	0x3a
 2417 017e 82010000 		.4byte	0x182
 2418 0182 0C       		.uleb128 0xc
 2419 0183 0E010000 		.4byte	0x10e
 2420 0187 0D       		.uleb128 0xd
 2421 0188 8101     		.2byte	0x181
 2422 018a 06       		.byte	0x6
 2423 018b 0A       		.byte	0xa
 2424 018c B5010000 		.4byte	0x1b5
 2425 0190 0B       		.uleb128 0xb
 2426 0191 D1050000 		.4byte	.LASF30
 2427 0195 06       		.byte	0x6
 2428 0196 0C       		.byte	0xc
 2429 0197 B5010000 		.4byte	0x1b5
 2430 019b 00       		.byte	0
 2431 019c 0B       		.uleb128 0xb
 2432 019d D1070000 		.4byte	.LASF31
 2433 01a1 06       		.byte	0x6
 2434 01a2 0D       		.byte	0xd
 2435 01a3 81000000 		.4byte	0x81
 2436 01a7 80       		.byte	0x80
 2437 01a8 0B       		.uleb128 0xb
 2438 01a9 73060000 		.4byte	.LASF32
 2439 01ad 06       		.byte	0x6
 2440 01ae 0F       		.byte	0xf
 2441 01af C5010000 		.4byte	0x1c5
 2442 01b3 81       		.byte	0x81
 2443 01b4 00       		.byte	0
 2444 01b5 07       		.uleb128 0x7
 2445 01b6 E3000000 		.4byte	0xe3
 2446 01ba C5010000 		.4byte	0x1c5
 2447 01be 08       		.uleb128 0x8
 2448 01bf F1000000 		.4byte	0xf1
 2449 01c3 7F       		.byte	0x7f
 2450 01c4 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 60


 2451 01c5 07       		.uleb128 0x7
 2452 01c6 E3000000 		.4byte	0xe3
 2453 01ca D5010000 		.4byte	0x1d5
 2454 01ce 08       		.uleb128 0x8
 2455 01cf F1000000 		.4byte	0xf1
 2456 01d3 FF       		.byte	0xff
 2457 01d4 00       		.byte	0
 2458 01d5 03       		.uleb128 0x3
 2459 01d6 5B060000 		.4byte	.LASF33
 2460 01da 06       		.byte	0x6
 2461 01db 10       		.byte	0x10
 2462 01dc 87010000 		.4byte	0x187
 2463 01e0 09       		.uleb128 0x9
 2464 01e1 1A       		.byte	0x1a
 2465 01e2 07       		.byte	0x7
 2466 01e3 10       		.byte	0x10
 2467 01e4 19020000 		.4byte	0x219
 2468 01e8 0B       		.uleb128 0xb
 2469 01e9 CC020000 		.4byte	.LASF34
 2470 01ed 07       		.byte	0x7
 2471 01ee 11       		.byte	0x11
 2472 01ef 19020000 		.4byte	0x219
 2473 01f3 00       		.byte	0
 2474 01f4 0B       		.uleb128 0xb
 2475 01f5 7E070000 		.4byte	.LASF35
 2476 01f9 07       		.byte	0x7
 2477 01fa 12       		.byte	0x12
 2478 01fb B1000000 		.4byte	0xb1
 2479 01ff 16       		.byte	0x16
 2480 0200 0B       		.uleb128 0xb
 2481 0201 6C030000 		.4byte	.LASF36
 2482 0205 07       		.byte	0x7
 2483 0206 13       		.byte	0x13
 2484 0207 81000000 		.4byte	0x81
 2485 020b 18       		.byte	0x18
 2486 020c 0B       		.uleb128 0xb
 2487 020d 17000000 		.4byte	.LASF37
 2488 0211 07       		.byte	0x7
 2489 0212 14       		.byte	0x14
 2490 0213 81000000 		.4byte	0x81
 2491 0217 19       		.byte	0x19
 2492 0218 00       		.byte	0
 2493 0219 07       		.uleb128 0x7
 2494 021a B1000000 		.4byte	0xb1
 2495 021e 29020000 		.4byte	0x229
 2496 0222 08       		.uleb128 0x8
 2497 0223 F1000000 		.4byte	0xf1
 2498 0227 0A       		.byte	0xa
 2499 0228 00       		.byte	0
 2500 0229 03       		.uleb128 0x3
 2501 022a 91050000 		.4byte	.LASF38
 2502 022e 07       		.byte	0x7
 2503 022f 15       		.byte	0x15
 2504 0230 E0010000 		.4byte	0x1e0
 2505 0234 09       		.uleb128 0x9
 2506 0235 1C       		.byte	0x1c
 2507 0236 08       		.byte	0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 61


 2508 0237 14       		.byte	0x14
 2509 0238 91020000 		.4byte	0x291
 2510 023c 0B       		.uleb128 0xb
 2511 023d C5030000 		.4byte	.LASF39
 2512 0241 08       		.byte	0x8
 2513 0242 15       		.byte	0x15
 2514 0243 D5000000 		.4byte	0xd5
 2515 0247 00       		.byte	0
 2516 0248 0B       		.uleb128 0xb
 2517 0249 E8010000 		.4byte	.LASF40
 2518 024d 08       		.byte	0x8
 2519 024e 16       		.byte	0x16
 2520 024f D5000000 		.4byte	0xd5
 2521 0253 04       		.byte	0x4
 2522 0254 0B       		.uleb128 0xb
 2523 0255 F6010000 		.4byte	.LASF41
 2524 0259 08       		.byte	0x8
 2525 025a 17       		.byte	0x17
 2526 025b D5000000 		.4byte	0xd5
 2527 025f 08       		.byte	0x8
 2528 0260 0B       		.uleb128 0xb
 2529 0261 6D050000 		.4byte	.LASF42
 2530 0265 08       		.byte	0x8
 2531 0266 18       		.byte	0x18
 2532 0267 D5000000 		.4byte	0xd5
 2533 026b 0C       		.byte	0xc
 2534 026c 0B       		.uleb128 0xb
 2535 026d 4A080000 		.4byte	.LASF43
 2536 0271 08       		.byte	0x8
 2537 0272 19       		.byte	0x19
 2538 0273 D5000000 		.4byte	0xd5
 2539 0277 10       		.byte	0x10
 2540 0278 0B       		.uleb128 0xb
 2541 0279 15070000 		.4byte	.LASF44
 2542 027d 08       		.byte	0x8
 2543 027e 1A       		.byte	0x1a
 2544 027f D5000000 		.4byte	0xd5
 2545 0283 14       		.byte	0x14
 2546 0284 0B       		.uleb128 0xb
 2547 0285 E4060000 		.4byte	.LASF45
 2548 0289 08       		.byte	0x8
 2549 028a 1B       		.byte	0x1b
 2550 028b 81000000 		.4byte	0x81
 2551 028f 18       		.byte	0x18
 2552 0290 00       		.byte	0
 2553 0291 03       		.uleb128 0x3
 2554 0292 A9080000 		.4byte	.LASF46
 2555 0296 08       		.byte	0x8
 2556 0297 1C       		.byte	0x1c
 2557 0298 34020000 		.4byte	0x234
 2558 029c 09       		.uleb128 0x9
 2559 029d 10       		.byte	0x10
 2560 029e 08       		.byte	0x8
 2561 029f 1E       		.byte	0x1e
 2562 02a0 D5020000 		.4byte	0x2d5
 2563 02a4 0B       		.uleb128 0xb
 2564 02a5 2C030000 		.4byte	.LASF47
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 62


 2565 02a9 08       		.byte	0x8
 2566 02aa 1F       		.byte	0x1f
 2567 02ab D5000000 		.4byte	0xd5
 2568 02af 00       		.byte	0
 2569 02b0 0B       		.uleb128 0xb
 2570 02b1 63020000 		.4byte	.LASF48
 2571 02b5 08       		.byte	0x8
 2572 02b6 20       		.byte	0x20
 2573 02b7 D5000000 		.4byte	0xd5
 2574 02bb 04       		.byte	0x4
 2575 02bc 0B       		.uleb128 0xb
 2576 02bd D3060000 		.4byte	.LASF49
 2577 02c1 08       		.byte	0x8
 2578 02c2 21       		.byte	0x21
 2579 02c3 D5000000 		.4byte	0xd5
 2580 02c7 08       		.byte	0x8
 2581 02c8 0B       		.uleb128 0xb
 2582 02c9 3D060000 		.4byte	.LASF50
 2583 02cd 08       		.byte	0x8
 2584 02ce 22       		.byte	0x22
 2585 02cf D5000000 		.4byte	0xd5
 2586 02d3 0C       		.byte	0xc
 2587 02d4 00       		.byte	0
 2588 02d5 03       		.uleb128 0x3
 2589 02d6 66080000 		.4byte	.LASF51
 2590 02da 08       		.byte	0x8
 2591 02db 23       		.byte	0x23
 2592 02dc 9C020000 		.4byte	0x29c
 2593 02e0 0E       		.uleb128 0xe
 2594 02e1 746D00   		.ascii	"tm\000"
 2595 02e4 24       		.byte	0x24
 2596 02e5 09       		.byte	0x9
 2597 02e6 21       		.byte	0x21
 2598 02e7 58030000 		.4byte	0x358
 2599 02eb 0B       		.uleb128 0xb
 2600 02ec BF070000 		.4byte	.LASF52
 2601 02f0 09       		.byte	0x9
 2602 02f1 23       		.byte	0x23
 2603 02f2 68000000 		.4byte	0x68
 2604 02f6 00       		.byte	0
 2605 02f7 0B       		.uleb128 0xb
 2606 02f8 C5040000 		.4byte	.LASF53
 2607 02fc 09       		.byte	0x9
 2608 02fd 24       		.byte	0x24
 2609 02fe 68000000 		.4byte	0x68
 2610 0302 04       		.byte	0x4
 2611 0303 0B       		.uleb128 0xb
 2612 0304 0F000000 		.4byte	.LASF54
 2613 0308 09       		.byte	0x9
 2614 0309 25       		.byte	0x25
 2615 030a 68000000 		.4byte	0x68
 2616 030e 08       		.byte	0x8
 2617 030f 0B       		.uleb128 0xb
 2618 0310 AE070000 		.4byte	.LASF55
 2619 0314 09       		.byte	0x9
 2620 0315 26       		.byte	0x26
 2621 0316 68000000 		.4byte	0x68
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 63


 2622 031a 0C       		.byte	0xc
 2623 031b 0B       		.uleb128 0xb
 2624 031c F7020000 		.4byte	.LASF56
 2625 0320 09       		.byte	0x9
 2626 0321 27       		.byte	0x27
 2627 0322 68000000 		.4byte	0x68
 2628 0326 10       		.byte	0x10
 2629 0327 0B       		.uleb128 0xb
 2630 0328 1A030000 		.4byte	.LASF57
 2631 032c 09       		.byte	0x9
 2632 032d 28       		.byte	0x28
 2633 032e 68000000 		.4byte	0x68
 2634 0332 14       		.byte	0x14
 2635 0333 0B       		.uleb128 0xb
 2636 0334 EA060000 		.4byte	.LASF58
 2637 0338 09       		.byte	0x9
 2638 0339 29       		.byte	0x29
 2639 033a 68000000 		.4byte	0x68
 2640 033e 18       		.byte	0x18
 2641 033f 0B       		.uleb128 0xb
 2642 0340 EE040000 		.4byte	.LASF59
 2643 0344 09       		.byte	0x9
 2644 0345 2A       		.byte	0x2a
 2645 0346 68000000 		.4byte	0x68
 2646 034a 1C       		.byte	0x1c
 2647 034b 0B       		.uleb128 0xb
 2648 034c FE030000 		.4byte	.LASF60
 2649 0350 09       		.byte	0x9
 2650 0351 2B       		.byte	0x2b
 2651 0352 68000000 		.4byte	0x68
 2652 0356 20       		.byte	0x20
 2653 0357 00       		.byte	0
 2654 0358 09       		.uleb128 0x9
 2655 0359 2C       		.byte	0x2c
 2656 035a 0A       		.byte	0xa
 2657 035b 14       		.byte	0x14
 2658 035c 85030000 		.4byte	0x385
 2659 0360 0A       		.uleb128 0xa
 2660 0361 6B657900 		.ascii	"key\000"
 2661 0365 0A       		.byte	0xa
 2662 0366 15       		.byte	0x15
 2663 0367 85030000 		.4byte	0x385
 2664 036b 00       		.byte	0
 2665 036c 0B       		.uleb128 0xb
 2666 036d 0F030000 		.4byte	.LASF61
 2667 0371 0A       		.byte	0xa
 2668 0372 16       		.byte	0x16
 2669 0373 85030000 		.4byte	0x385
 2670 0377 14       		.byte	0x14
 2671 0378 0B       		.uleb128 0xb
 2672 0379 26050000 		.4byte	.LASF62
 2673 037d 0A       		.byte	0xa
 2674 037e 17       		.byte	0x17
 2675 037f BD000000 		.4byte	0xbd
 2676 0383 28       		.byte	0x28
 2677 0384 00       		.byte	0
 2678 0385 07       		.uleb128 0x7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 64


 2679 0386 E3000000 		.4byte	0xe3
 2680 038a 95030000 		.4byte	0x395
 2681 038e 08       		.uleb128 0x8
 2682 038f F1000000 		.4byte	0xf1
 2683 0393 13       		.byte	0x13
 2684 0394 00       		.byte	0
 2685 0395 03       		.uleb128 0x3
 2686 0396 55030000 		.4byte	.LASF63
 2687 039a 0A       		.byte	0xa
 2688 039b 19       		.byte	0x19
 2689 039c 58030000 		.4byte	0x358
 2690 03a0 09       		.uleb128 0x9
 2691 03a1 3C       		.byte	0x3c
 2692 03a2 0B       		.byte	0xb
 2693 03a3 37       		.byte	0x37
 2694 03a4 CD030000 		.4byte	0x3cd
 2695 03a8 0B       		.uleb128 0xb
 2696 03a9 A7070000 		.4byte	.LASF64
 2697 03ad 0B       		.byte	0xb
 2698 03ae 38       		.byte	0x38
 2699 03af 85030000 		.4byte	0x385
 2700 03b3 00       		.byte	0
 2701 03b4 0B       		.uleb128 0xb
 2702 03b5 C3020000 		.4byte	.LASF65
 2703 03b9 0B       		.byte	0xb
 2704 03ba 39       		.byte	0x39
 2705 03bb 85030000 		.4byte	0x385
 2706 03bf 14       		.byte	0x14
 2707 03c0 0B       		.uleb128 0xb
 2708 03c1 6E060000 		.4byte	.LASF66
 2709 03c5 0B       		.byte	0xb
 2710 03c6 3A       		.byte	0x3a
 2711 03c7 85030000 		.4byte	0x385
 2712 03cb 28       		.byte	0x28
 2713 03cc 00       		.byte	0
 2714 03cd 03       		.uleb128 0x3
 2715 03ce 2E020000 		.4byte	.LASF67
 2716 03d2 0B       		.byte	0xb
 2717 03d3 3C       		.byte	0x3c
 2718 03d4 A0030000 		.4byte	0x3a0
 2719 03d8 09       		.uleb128 0x9
 2720 03d9 20       		.byte	0x20
 2721 03da 0B       		.byte	0xb
 2722 03db 3E       		.byte	0x3e
 2723 03dc 41040000 		.4byte	0x441
 2724 03e0 0B       		.uleb128 0xb
 2725 03e1 3B020000 		.4byte	.LASF68
 2726 03e5 0B       		.byte	0xb
 2727 03e6 3F       		.byte	0x3f
 2728 03e7 68000000 		.4byte	0x68
 2729 03eb 00       		.byte	0
 2730 03ec 0A       		.uleb128 0xa
 2731 03ed 62657200 		.ascii	"ber\000"
 2732 03f1 0B       		.byte	0xb
 2733 03f2 40       		.byte	0x40
 2734 03f3 68000000 		.4byte	0x68
 2735 03f7 04       		.byte	0x4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 65


 2736 03f8 0B       		.uleb128 0xb
 2737 03f9 4C060000 		.4byte	.LASF69
 2738 03fd 0B       		.byte	0xb
 2739 03fe 41       		.byte	0x41
 2740 03ff 68000000 		.4byte	0x68
 2741 0403 08       		.byte	0x8
 2742 0404 0B       		.uleb128 0xb
 2743 0405 B2010000 		.4byte	.LASF70
 2744 0409 0B       		.byte	0xb
 2745 040a 42       		.byte	0x42
 2746 040b 68000000 		.4byte	0x68
 2747 040f 0C       		.byte	0xc
 2748 0410 0B       		.uleb128 0xb
 2749 0411 17060000 		.4byte	.LASF71
 2750 0415 0B       		.byte	0xb
 2751 0416 43       		.byte	0x43
 2752 0417 68000000 		.4byte	0x68
 2753 041b 10       		.byte	0x10
 2754 041c 0B       		.uleb128 0xb
 2755 041d 12060000 		.4byte	.LASF72
 2756 0421 0B       		.byte	0xb
 2757 0422 44       		.byte	0x44
 2758 0423 68000000 		.4byte	0x68
 2759 0427 14       		.byte	0x14
 2760 0428 0B       		.uleb128 0xb
 2761 0429 C5010000 		.4byte	.LASF73
 2762 042d 0B       		.byte	0xb
 2763 042e 45       		.byte	0x45
 2764 042f 68000000 		.4byte	0x68
 2765 0433 18       		.byte	0x18
 2766 0434 0B       		.uleb128 0xb
 2767 0435 4A020000 		.4byte	.LASF74
 2768 0439 0B       		.byte	0xb
 2769 043a 46       		.byte	0x46
 2770 043b 68000000 		.4byte	0x68
 2771 043f 1C       		.byte	0x1c
 2772 0440 00       		.byte	0
 2773 0441 03       		.uleb128 0x3
 2774 0442 C5060000 		.4byte	.LASF75
 2775 0446 0B       		.byte	0xb
 2776 0447 48       		.byte	0x48
 2777 0448 D8030000 		.4byte	0x3d8
 2778 044c 09       		.uleb128 0x9
 2779 044d 05       		.byte	0x5
 2780 044e 0B       		.byte	0xb
 2781 044f 54       		.byte	0x54
 2782 0450 91040000 		.4byte	0x491
 2783 0454 0B       		.uleb128 0xb
 2784 0455 9C020000 		.4byte	.LASF76
 2785 0459 0B       		.byte	0xb
 2786 045a 56       		.byte	0x56
 2787 045b 81000000 		.4byte	0x81
 2788 045f 00       		.byte	0
 2789 0460 0B       		.uleb128 0xb
 2790 0461 3B080000 		.4byte	.LASF77
 2791 0465 0B       		.byte	0xb
 2792 0466 58       		.byte	0x58
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 66


 2793 0467 91040000 		.4byte	0x491
 2794 046b 01       		.byte	0x1
 2795 046c 0B       		.uleb128 0xb
 2796 046d 62070000 		.4byte	.LASF78
 2797 0471 0B       		.byte	0xb
 2798 0472 5A       		.byte	0x5a
 2799 0473 81000000 		.4byte	0x81
 2800 0477 02       		.byte	0x2
 2801 0478 0B       		.uleb128 0xb
 2802 0479 33060000 		.4byte	.LASF79
 2803 047d 0B       		.byte	0xb
 2804 047e 5C       		.byte	0x5c
 2805 047f 81000000 		.4byte	0x81
 2806 0483 03       		.byte	0x3
 2807 0484 0B       		.uleb128 0xb
 2808 0485 FE020000 		.4byte	.LASF80
 2809 0489 0B       		.byte	0xb
 2810 048a 5F       		.byte	0x5f
 2811 048b 81000000 		.4byte	0x81
 2812 048f 04       		.byte	0x4
 2813 0490 00       		.byte	0
 2814 0491 02       		.uleb128 0x2
 2815 0492 01       		.byte	0x1
 2816 0493 02       		.byte	0x2
 2817 0494 E0050000 		.4byte	.LASF81
 2818 0498 03       		.uleb128 0x3
 2819 0499 92040000 		.4byte	.LASF82
 2820 049d 0B       		.byte	0xb
 2821 049e 61       		.byte	0x61
 2822 049f 4C040000 		.4byte	0x44c
 2823 04a3 09       		.uleb128 0x9
 2824 04a4 06       		.byte	0x6
 2825 04a5 0C       		.byte	0xc
 2826 04a6 2E       		.byte	0x2e
 2827 04a7 DC040000 		.4byte	0x4dc
 2828 04ab 0B       		.uleb128 0xb
 2829 04ac DF020000 		.4byte	.LASF83
 2830 04b0 0C       		.byte	0xc
 2831 04b1 30       		.byte	0x30
 2832 04b2 8D000000 		.4byte	0x8d
 2833 04b6 00       		.byte	0
 2834 04b7 0B       		.uleb128 0xb
 2835 04b8 25080000 		.4byte	.LASF84
 2836 04bc 0C       		.byte	0xc
 2837 04bd 31       		.byte	0x31
 2838 04be B1000000 		.4byte	0xb1
 2839 04c2 02       		.byte	0x2
 2840 04c3 0B       		.uleb128 0xb
 2841 04c4 17080000 		.4byte	.LASF85
 2842 04c8 0C       		.byte	0xc
 2843 04c9 32       		.byte	0x32
 2844 04ca 81000000 		.4byte	0x81
 2845 04ce 04       		.byte	0x4
 2846 04cf 0B       		.uleb128 0xb
 2847 04d0 89000000 		.4byte	.LASF86
 2848 04d4 0C       		.byte	0xc
 2849 04d5 33       		.byte	0x33
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 67


 2850 04d6 81000000 		.4byte	0x81
 2851 04da 05       		.byte	0x5
 2852 04db 00       		.byte	0
 2853 04dc 03       		.uleb128 0x3
 2854 04dd 5D020000 		.4byte	.LASF87
 2855 04e1 0C       		.byte	0xc
 2856 04e2 36       		.byte	0x36
 2857 04e3 E7040000 		.4byte	0x4e7
 2858 04e7 0C       		.uleb128 0xc
 2859 04e8 A3040000 		.4byte	0x4a3
 2860 04ec 09       		.uleb128 0x9
 2861 04ed 1C       		.byte	0x1c
 2862 04ee 0C       		.byte	0xc
 2863 04ef 39       		.byte	0x39
 2864 04f0 0D050000 		.4byte	0x50d
 2865 04f4 0B       		.uleb128 0xb
 2866 04f5 07040000 		.4byte	.LASF88
 2867 04f9 0C       		.byte	0xc
 2868 04fa 3B       		.byte	0x3b
 2869 04fb 0D050000 		.4byte	0x50d
 2870 04ff 00       		.byte	0
 2871 0500 0B       		.uleb128 0xb
 2872 0501 8C080000 		.4byte	.LASF89
 2873 0505 0C       		.byte	0xc
 2874 0506 3C       		.byte	0x3c
 2875 0507 FE000000 		.4byte	0xfe
 2876 050b 04       		.byte	0x4
 2877 050c 00       		.byte	0
 2878 050d 06       		.uleb128 0x6
 2879 050e 04       		.byte	0x4
 2880 050f CD030000 		.4byte	0x3cd
 2881 0513 03       		.uleb128 0x3
 2882 0514 87040000 		.4byte	.LASF90
 2883 0518 0C       		.byte	0xc
 2884 0519 3E       		.byte	0x3e
 2885 051a EC040000 		.4byte	0x4ec
 2886 051e 09       		.uleb128 0x9
 2887 051f 68       		.byte	0x68
 2888 0520 0C       		.byte	0xc
 2889 0521 44       		.byte	0x44
 2890 0522 3F050000 		.4byte	0x53f
 2891 0526 0B       		.uleb128 0xb
 2892 0527 12040000 		.4byte	.LASF91
 2893 052b 0C       		.byte	0xc
 2894 052c 49       		.byte	0x49
 2895 052d 3F050000 		.4byte	0x53f
 2896 0531 00       		.byte	0
 2897 0532 0B       		.uleb128 0xb
 2898 0533 F6030000 		.4byte	.LASF92
 2899 0537 0C       		.byte	0xc
 2900 0538 4A       		.byte	0x4a
 2901 0539 68000000 		.4byte	0x68
 2902 053d 64       		.byte	0x64
 2903 053e 00       		.byte	0
 2904 053f 07       		.uleb128 0x7
 2905 0540 E3000000 		.4byte	0xe3
 2906 0544 4F050000 		.4byte	0x54f
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 68


 2907 0548 08       		.uleb128 0x8
 2908 0549 F1000000 		.4byte	0xf1
 2909 054d 63       		.byte	0x63
 2910 054e 00       		.byte	0
 2911 054f 03       		.uleb128 0x3
 2912 0550 F6040000 		.4byte	.LASF93
 2913 0554 0C       		.byte	0xc
 2914 0555 50       		.byte	0x50
 2915 0556 1E050000 		.4byte	0x51e
 2916 055a 0F       		.uleb128 0xf
 2917 055b A1000000 		.4byte	.LASF168
 2918 055f 01       		.byte	0x1
 2919 0560 14       		.byte	0x14
 2920 0561 00000000 		.4byte	.LFB64
 2921 0565 0C000000 		.4byte	.LFE64-.LFB64
 2922 0569 01       		.uleb128 0x1
 2923 056a 9C       		.byte	0x9c
 2924 056b 10       		.uleb128 0x10
 2925 056c 7C080000 		.4byte	.LASF107
 2926 0570 01       		.byte	0x1
 2927 0571 28       		.byte	0x28
 2928 0572 00000000 		.4byte	.LFB65
 2929 0576 2C010000 		.4byte	.LFE65-.LFB65
 2930 057a 01       		.uleb128 0x1
 2931 057b 9C       		.byte	0x9c
 2932 057c AB050000 		.4byte	0x5ab
 2933 0580 11       		.uleb128 0x11
 2934 0581 59070000 		.4byte	.LASF94
 2935 0585 01       		.byte	0x1
 2936 0586 3C       		.byte	0x3c
 2937 0587 AB050000 		.4byte	0x5ab
 2938 058b 02       		.uleb128 0x2
 2939 058c 91       		.byte	0x91
 2940 058d 64       		.sleb128 -28
 2941 058e 11       		.uleb128 0x11
 2942 058f 44080000 		.4byte	.LASF95
 2943 0593 01       		.byte	0x1
 2944 0594 59       		.byte	0x59
 2945 0595 BB050000 		.4byte	0x5bb
 2946 0599 02       		.uleb128 0x2
 2947 059a 91       		.byte	0x91
 2948 059b 58       		.sleb128 -40
 2949 059c 11       		.uleb128 0x11
 2950 059d A6030000 		.4byte	.LASF96
 2951 05a1 01       		.byte	0x1
 2952 05a2 5E       		.byte	0x5e
 2953 05a3 81000000 		.4byte	0x81
 2954 05a7 02       		.uleb128 0x2
 2955 05a8 91       		.byte	0x91
 2956 05a9 6F       		.sleb128 -17
 2957 05aa 00       		.byte	0
 2958 05ab 07       		.uleb128 0x7
 2959 05ac 99000000 		.4byte	0x99
 2960 05b0 BB050000 		.4byte	0x5bb
 2961 05b4 08       		.uleb128 0x8
 2962 05b5 F1000000 		.4byte	0xf1
 2963 05b9 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 69


 2964 05ba 00       		.byte	0
 2965 05bb 07       		.uleb128 0x7
 2966 05bc E3000000 		.4byte	0xe3
 2967 05c0 CB050000 		.4byte	0x5cb
 2968 05c4 08       		.uleb128 0x8
 2969 05c5 F1000000 		.4byte	0xf1
 2970 05c9 09       		.byte	0x9
 2971 05ca 00       		.byte	0
 2972 05cb 12       		.uleb128 0x12
 2973 05cc 1F040000 		.4byte	.LASF98
 2974 05d0 01       		.byte	0x1
 2975 05d1 68       		.byte	0x68
 2976 05d2 68000000 		.4byte	0x68
 2977 05d6 00000000 		.4byte	.LFB66
 2978 05da 64000000 		.4byte	.LFE66-.LFB66
 2979 05de 01       		.uleb128 0x1
 2980 05df 9C       		.byte	0x9c
 2981 05e0 F3050000 		.4byte	0x5f3
 2982 05e4 11       		.uleb128 0x11
 2983 05e5 C4050000 		.4byte	.LASF97
 2984 05e9 01       		.byte	0x1
 2985 05ea 82       		.byte	0x82
 2986 05eb 81000000 		.4byte	0x81
 2987 05ef 02       		.uleb128 0x2
 2988 05f0 91       		.byte	0x91
 2989 05f1 77       		.sleb128 -9
 2990 05f2 00       		.byte	0
 2991 05f3 13       		.uleb128 0x13
 2992 05f4 8C070000 		.4byte	.LASF169
 2993 05f8 01       		.byte	0x1
 2994 05f9 92       		.byte	0x92
 2995 05fa 00000000 		.4byte	.LFB67
 2996 05fe 2A000000 		.4byte	.LFE67-.LFB67
 2997 0602 01       		.uleb128 0x1
 2998 0603 9C       		.byte	0x9c
 2999 0604 14       		.uleb128 0x14
 3000 0605 61030000 		.4byte	.LASF99
 3001 0609 01       		.byte	0x1
 3002 060a B7       		.byte	0xb7
 3003 060b 00000000 		.4byte	.LFB68
 3004 060f 50000000 		.4byte	.LFE68-.LFB68
 3005 0613 01       		.uleb128 0x1
 3006 0614 9C       		.byte	0x9c
 3007 0615 28060000 		.4byte	0x628
 3008 0619 15       		.uleb128 0x15
 3009 061a A9040000 		.4byte	.LASF100
 3010 061e 01       		.byte	0x1
 3011 061f B7       		.byte	0xb7
 3012 0620 81000000 		.4byte	0x81
 3013 0624 02       		.uleb128 0x2
 3014 0625 91       		.byte	0x91
 3015 0626 77       		.sleb128 -9
 3016 0627 00       		.byte	0
 3017 0628 16       		.uleb128 0x16
 3018 0629 71080000 		.4byte	.LASF104
 3019 062d 01       		.byte	0x1
 3020 062e CE       		.byte	0xce
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 70


 3021 062f 81000000 		.4byte	0x81
 3022 0633 00000000 		.4byte	.LFB69
 3023 0637 48000000 		.4byte	.LFE69-.LFB69
 3024 063b 01       		.uleb128 0x1
 3025 063c 9C       		.byte	0x9c
 3026 063d 5E060000 		.4byte	0x65e
 3027 0641 15       		.uleb128 0x15
 3028 0642 D4040000 		.4byte	.LASF101
 3029 0646 01       		.byte	0x1
 3030 0647 CE       		.byte	0xce
 3031 0648 5E060000 		.4byte	0x65e
 3032 064c 02       		.uleb128 0x2
 3033 064d 91       		.byte	0x91
 3034 064e 74       		.sleb128 -12
 3035 064f 15       		.uleb128 0x15
 3036 0650 A9040000 		.4byte	.LASF100
 3037 0654 01       		.byte	0x1
 3038 0655 CE       		.byte	0xce
 3039 0656 81000000 		.4byte	0x81
 3040 065a 02       		.uleb128 0x2
 3041 065b 91       		.byte	0x91
 3042 065c 73       		.sleb128 -13
 3043 065d 00       		.byte	0
 3044 065e 06       		.uleb128 0x6
 3045 065f 04       		.byte	0x4
 3046 0660 DC040000 		.4byte	0x4dc
 3047 0664 17       		.uleb128 0x17
 3048 0665 1C060000 		.4byte	.LASF102
 3049 0669 01       		.byte	0x1
 3050 066a E3       		.byte	0xe3
 3051 066b 00000000 		.4byte	.LFB70
 3052 066f 1E000000 		.4byte	.LFE70-.LFB70
 3053 0673 01       		.uleb128 0x1
 3054 0674 9C       		.byte	0x9c
 3055 0675 88060000 		.4byte	0x688
 3056 0679 15       		.uleb128 0x15
 3057 067a 7A060000 		.4byte	.LASF103
 3058 067e 01       		.byte	0x1
 3059 067f E3       		.byte	0xe3
 3060 0680 5E060000 		.4byte	0x65e
 3061 0684 02       		.uleb128 0x2
 3062 0685 91       		.byte	0x91
 3063 0686 74       		.sleb128 -12
 3064 0687 00       		.byte	0
 3065 0688 18       		.uleb128 0x18
 3066 0689 53050000 		.4byte	.LASF105
 3067 068d 01       		.byte	0x1
 3068 068e EC       		.byte	0xec
 3069 068f DC040000 		.4byte	0x4dc
 3070 0693 00000000 		.4byte	.LFB71
 3071 0697 46000000 		.4byte	.LFE71-.LFB71
 3072 069b 01       		.uleb128 0x1
 3073 069c 9C       		.byte	0x9c
 3074 069d DA060000 		.4byte	0x6da
 3075 06a1 15       		.uleb128 0x15
 3076 06a2 DF020000 		.4byte	.LASF83
 3077 06a6 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 71


 3078 06a7 EC       		.byte	0xec
 3079 06a8 8D000000 		.4byte	0x8d
 3080 06ac 02       		.uleb128 0x2
 3081 06ad 91       		.byte	0x91
 3082 06ae 6A       		.sleb128 -22
 3083 06af 15       		.uleb128 0x15
 3084 06b0 17080000 		.4byte	.LASF85
 3085 06b4 01       		.byte	0x1
 3086 06b5 EC       		.byte	0xec
 3087 06b6 81000000 		.4byte	0x81
 3088 06ba 02       		.uleb128 0x2
 3089 06bb 91       		.byte	0x91
 3090 06bc 69       		.sleb128 -23
 3091 06bd 15       		.uleb128 0x15
 3092 06be 89000000 		.4byte	.LASF86
 3093 06c2 01       		.byte	0x1
 3094 06c3 EC       		.byte	0xec
 3095 06c4 81000000 		.4byte	0x81
 3096 06c8 02       		.uleb128 0x2
 3097 06c9 91       		.byte	0x91
 3098 06ca 68       		.sleb128 -24
 3099 06cb 11       		.uleb128 0x11
 3100 06cc B6070000 		.4byte	.LASF106
 3101 06d0 01       		.byte	0x1
 3102 06d1 EF       		.byte	0xef
 3103 06d2 DC040000 		.4byte	0x4dc
 3104 06d6 02       		.uleb128 0x2
 3105 06d7 91       		.byte	0x91
 3106 06d8 70       		.sleb128 -16
 3107 06d9 00       		.byte	0
 3108 06da 19       		.uleb128 0x19
 3109 06db 89060000 		.4byte	.LASF108
 3110 06df 01       		.byte	0x1
 3111 06e0 0501     		.2byte	0x105
 3112 06e2 00000000 		.4byte	.LFB72
 3113 06e6 2C010000 		.4byte	.LFE72-.LFB72
 3114 06ea 01       		.uleb128 0x1
 3115 06eb 9C       		.byte	0x9c
 3116 06ec 51070000 		.4byte	0x751
 3117 06f0 1A       		.uleb128 0x1a
 3118 06f1 8D010000 		.4byte	.LASF109
 3119 06f5 01       		.byte	0x1
 3120 06f6 0D01     		.2byte	0x10d
 3121 06f8 D5010000 		.4byte	0x1d5
 3122 06fc 03       		.uleb128 0x3
 3123 06fd 91       		.byte	0x91
 3124 06fe EC7C     		.sleb128 -404
 3125 0700 1A       		.uleb128 0x1a
 3126 0701 9A080000 		.4byte	.LASF110
 3127 0705 01       		.byte	0x1
 3128 0706 1101     		.2byte	0x111
 3129 0708 D5010000 		.4byte	0x1d5
 3130 070c 03       		.uleb128 0x3
 3131 070d 91       		.byte	0x91
 3132 070e E879     		.sleb128 -792
 3133 0710 1A       		.uleb128 0x1a
 3134 0711 F1070000 		.4byte	.LASF111
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 72


 3135 0715 01       		.byte	0x1
 3136 0716 1501     		.2byte	0x115
 3137 0718 D5010000 		.4byte	0x1d5
 3138 071c 03       		.uleb128 0x3
 3139 071d 91       		.byte	0x91
 3140 071e E476     		.sleb128 -1180
 3141 0720 1A       		.uleb128 0x1a
 3142 0721 3A010000 		.4byte	.LASF112
 3143 0725 01       		.byte	0x1
 3144 0726 1901     		.2byte	0x119
 3145 0728 D5010000 		.4byte	0x1d5
 3146 072c 03       		.uleb128 0x3
 3147 072d 91       		.byte	0x91
 3148 072e E073     		.sleb128 -1568
 3149 0730 1A       		.uleb128 0x1a
 3150 0731 4D040000 		.4byte	.LASF113
 3151 0735 01       		.byte	0x1
 3152 0736 1D01     		.2byte	0x11d
 3153 0738 D5010000 		.4byte	0x1d5
 3154 073c 03       		.uleb128 0x3
 3155 073d 91       		.byte	0x91
 3156 073e DC70     		.sleb128 -1956
 3157 0740 1A       		.uleb128 0x1a
 3158 0741 00000000 		.4byte	.LASF114
 3159 0745 01       		.byte	0x1
 3160 0746 2101     		.2byte	0x121
 3161 0748 D5010000 		.4byte	0x1d5
 3162 074c 03       		.uleb128 0x3
 3163 074d 91       		.byte	0x91
 3164 074e D86D     		.sleb128 -2344
 3165 0750 00       		.byte	0
 3166 0751 1B       		.uleb128 0x1b
 3167 0752 87080000 		.4byte	.LASF170
 3168 0756 01       		.byte	0x1
 3169 0757 2C01     		.2byte	0x12c
 3170 0759 68000000 		.4byte	0x68
 3171 075d 00000000 		.4byte	.LFB73
 3172 0761 1E000000 		.4byte	.LFE73-.LFB73
 3173 0765 01       		.uleb128 0x1
 3174 0766 9C       		.byte	0x9c
 3175 0767 1C       		.uleb128 0x1c
 3176 0768 A6020000 		.4byte	.LASF115
 3177 076c 01       		.byte	0x1
 3178 076d 4201     		.2byte	0x142
 3179 076f 81000000 		.4byte	0x81
 3180 0773 00000000 		.4byte	.LFB74
 3181 0777 60040000 		.4byte	.LFE74-.LFB74
 3182 077b 01       		.uleb128 0x1
 3183 077c 9C       		.byte	0x9c
 3184 077d C2080000 		.4byte	0x8c2
 3185 0781 1D       		.uleb128 0x1d
 3186 0782 86000000 		.4byte	.LBB2
 3187 0786 AC030000 		.4byte	.LBE2-.LBB2
 3188 078a 1A       		.uleb128 0x1a
 3189 078b 66050000 		.4byte	.LASF116
 3190 078f 01       		.byte	0x1
 3191 0790 7701     		.2byte	0x177
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 73


 3192 0792 85030000 		.4byte	0x385
 3193 0796 03       		.uleb128 0x3
 3194 0797 91       		.byte	0x91
 3195 0798 AC7F     		.sleb128 -84
 3196 079a 1A       		.uleb128 0x1a
 3197 079b 7E020000 		.4byte	.LASF117
 3198 079f 01       		.byte	0x1
 3199 07a0 7C01     		.2byte	0x17c
 3200 07a2 85030000 		.4byte	0x385
 3201 07a6 03       		.uleb128 0x3
 3202 07a7 91       		.byte	0x91
 3203 07a8 987F     		.sleb128 -104
 3204 07aa 1A       		.uleb128 0x1a
 3205 07ab B2030000 		.4byte	.LASF118
 3206 07af 01       		.byte	0x1
 3207 07b0 8F01     		.2byte	0x18f
 3208 07b2 8D000000 		.4byte	0x8d
 3209 07b6 02       		.uleb128 0x2
 3210 07b7 91       		.byte	0x91
 3211 07b8 66       		.sleb128 -26
 3212 07b9 1A       		.uleb128 0x1a
 3213 07ba 38040000 		.4byte	.LASF119
 3214 07be 01       		.byte	0x1
 3215 07bf 9001     		.2byte	0x190
 3216 07c1 85030000 		.4byte	0x385
 3217 07c5 03       		.uleb128 0x3
 3218 07c6 91       		.byte	0x91
 3219 07c7 847F     		.sleb128 -124
 3220 07c9 1A       		.uleb128 0x1a
 3221 07ca 44070000 		.4byte	.LASF120
 3222 07ce 01       		.byte	0x1
 3223 07cf A501     		.2byte	0x1a5
 3224 07d1 C2080000 		.4byte	0x8c2
 3225 07d5 03       		.uleb128 0x3
 3226 07d6 91       		.byte	0x91
 3227 07d7 9C75     		.sleb128 -1380
 3228 07d9 1A       		.uleb128 0x1a
 3229 07da D1070000 		.4byte	.LASF31
 3230 07de 01       		.byte	0x1
 3231 07df A601     		.2byte	0x1a6
 3232 07e1 81000000 		.4byte	0x81
 3233 07e5 02       		.uleb128 0x2
 3234 07e6 91       		.byte	0x91
 3235 07e7 65       		.sleb128 -27
 3236 07e8 1A       		.uleb128 0x1a
 3237 07e9 FE060000 		.4byte	.LASF121
 3238 07ed 01       		.byte	0x1
 3239 07ee AD01     		.2byte	0x1ad
 3240 07f0 F8000000 		.4byte	0xf8
 3241 07f4 02       		.uleb128 0x2
 3242 07f5 91       		.byte	0x91
 3243 07f6 6C       		.sleb128 -20
 3244 07f7 1A       		.uleb128 0x1a
 3245 07f8 AA010000 		.4byte	.LASF122
 3246 07fc 01       		.byte	0x1
 3247 07fd B101     		.2byte	0x1b1
 3248 07ff A5000000 		.4byte	0xa5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 74


 3249 0803 02       		.uleb128 0x2
 3250 0804 91       		.byte	0x91
 3251 0805 64       		.sleb128 -28
 3252 0806 1A       		.uleb128 0x1a
 3253 0807 AF020000 		.4byte	.LASF123
 3254 080b 01       		.byte	0x1
 3255 080c E101     		.2byte	0x1e1
 3256 080e 4C000000 		.4byte	0x4c
 3257 0812 02       		.uleb128 0x2
 3258 0813 91       		.byte	0x91
 3259 0814 5C       		.sleb128 -36
 3260 0815 1E       		.uleb128 0x1e
 3261 0816 F2000000 		.4byte	.LBB3
 3262 081a 2C000000 		.4byte	.LBE3-.LBB3
 3263 081e 42080000 		.4byte	0x842
 3264 0822 1A       		.uleb128 0x1a
 3265 0823 B5060000 		.4byte	.LASF124
 3266 0827 01       		.byte	0x1
 3267 0828 8401     		.2byte	0x184
 3268 082a 8D000000 		.4byte	0x8d
 3269 082e 02       		.uleb128 0x2
 3270 082f 91       		.byte	0x91
 3271 0830 68       		.sleb128 -24
 3272 0831 1A       		.uleb128 0x1a
 3273 0832 1C020000 		.4byte	.LASF125
 3274 0836 01       		.byte	0x1
 3275 0837 8501     		.2byte	0x185
 3276 0839 85030000 		.4byte	0x385
 3277 083d 03       		.uleb128 0x3
 3278 083e 91       		.byte	0x91
 3279 083f F07E     		.sleb128 -144
 3280 0841 00       		.byte	0
 3281 0842 1E       		.uleb128 0x1e
 3282 0843 20010000 		.4byte	.LBB4
 3283 0847 20000000 		.4byte	.LBE4-.LBB4
 3284 084b 60080000 		.4byte	0x860
 3285 084f 1A       		.uleb128 0x1a
 3286 0850 1C020000 		.4byte	.LASF125
 3287 0854 01       		.byte	0x1
 3288 0855 8901     		.2byte	0x189
 3289 0857 85030000 		.4byte	0x385
 3290 085b 03       		.uleb128 0x3
 3291 085c 91       		.byte	0x91
 3292 085d DC7E     		.sleb128 -164
 3293 085f 00       		.byte	0
 3294 0860 1E       		.uleb128 0x1e
 3295 0861 60020000 		.4byte	.LBB5
 3296 0865 4E010000 		.4byte	.LBE5-.LBB5
 3297 0869 97080000 		.4byte	0x897
 3298 086d 1A       		.uleb128 0x1a
 3299 086e 5F050000 		.4byte	.LASF126
 3300 0872 01       		.byte	0x1
 3301 0873 B601     		.2byte	0x1b6
 3302 0875 A5000000 		.4byte	0xa5
 3303 0879 02       		.uleb128 0x2
 3304 087a 91       		.byte	0x91
 3305 087b 6B       		.sleb128 -21
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 75


 3306 087c 1D       		.uleb128 0x1d
 3307 087d 68020000 		.4byte	.LBB6
 3308 0881 2A010000 		.4byte	.LBE6-.LBB6
 3309 0885 1A       		.uleb128 0x1a
 3310 0886 7F030000 		.4byte	.LASF127
 3311 088a 01       		.byte	0x1
 3312 088b B801     		.2byte	0x1b8
 3313 088d D2080000 		.4byte	0x8d2
 3314 0891 03       		.uleb128 0x3
 3315 0892 91       		.byte	0x91
 3316 0893 E476     		.sleb128 -1180
 3317 0895 00       		.byte	0
 3318 0896 00       		.byte	0
 3319 0897 1D       		.uleb128 0x1d
 3320 0898 C8030000 		.4byte	.LBB7
 3321 089c 3A000000 		.4byte	.LBE7-.LBB7
 3322 08a0 1A       		.uleb128 0x1a
 3323 08a1 8C020000 		.4byte	.LASF128
 3324 08a5 01       		.byte	0x1
 3325 08a6 D801     		.2byte	0x1d8
 3326 08a8 68000000 		.4byte	0x68
 3327 08ac 02       		.uleb128 0x2
 3328 08ad 91       		.byte	0x91
 3329 08ae 60       		.sleb128 -32
 3330 08af 1A       		.uleb128 0x1a
 3331 08b0 27060000 		.4byte	.LASF129
 3332 08b4 01       		.byte	0x1
 3333 08b5 D901     		.2byte	0x1d9
 3334 08b7 BB050000 		.4byte	0x5bb
 3335 08bb 03       		.uleb128 0x3
 3336 08bc 91       		.byte	0x91
 3337 08bd D07E     		.sleb128 -176
 3338 08bf 00       		.byte	0
 3339 08c0 00       		.byte	0
 3340 08c1 00       		.byte	0
 3341 08c2 07       		.uleb128 0x7
 3342 08c3 E3000000 		.4byte	0xe3
 3343 08c7 D2080000 		.4byte	0x8d2
 3344 08cb 08       		.uleb128 0x8
 3345 08cc F1000000 		.4byte	0xf1
 3346 08d0 C7       		.byte	0xc7
 3347 08d1 00       		.byte	0
 3348 08d2 07       		.uleb128 0x7
 3349 08d3 E3000000 		.4byte	0xe3
 3350 08d7 E3080000 		.4byte	0x8e3
 3351 08db 1F       		.uleb128 0x1f
 3352 08dc F1000000 		.4byte	0xf1
 3353 08e0 E803     		.2byte	0x3e8
 3354 08e2 00       		.byte	0
 3355 08e3 1C       		.uleb128 0x1c
 3356 08e4 A0050000 		.4byte	.LASF130
 3357 08e8 01       		.byte	0x1
 3358 08e9 F601     		.2byte	0x1f6
 3359 08eb 81000000 		.4byte	0x81
 3360 08ef 00000000 		.4byte	.LFB75
 3361 08f3 44000000 		.4byte	.LFE75-.LFB75
 3362 08f7 01       		.uleb128 0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 76


 3363 08f8 9C       		.byte	0x9c
 3364 08f9 17090000 		.4byte	0x917
 3365 08fd 1D       		.uleb128 0x1d
 3366 08fe 20000000 		.4byte	.LBB8
 3367 0902 1A000000 		.4byte	.LBE8-.LBB8
 3368 0906 1A       		.uleb128 0x1a
 3369 0907 AF020000 		.4byte	.LASF123
 3370 090b 01       		.byte	0x1
 3371 090c 0102     		.2byte	0x201
 3372 090e 4C000000 		.4byte	0x4c
 3373 0912 02       		.uleb128 0x2
 3374 0913 91       		.byte	0x91
 3375 0914 74       		.sleb128 -12
 3376 0915 00       		.byte	0
 3377 0916 00       		.byte	0
 3378 0917 1C       		.uleb128 0x1c
 3379 0918 E0030000 		.4byte	.LASF131
 3380 091c 01       		.byte	0x1
 3381 091d 1602     		.2byte	0x216
 3382 091f 81000000 		.4byte	0x81
 3383 0923 00000000 		.4byte	.LFB76
 3384 0927 80030000 		.4byte	.LFE76-.LFB76
 3385 092b 01       		.uleb128 0x1
 3386 092c 9C       		.byte	0x9c
 3387 092d D5090000 		.4byte	0x9d5
 3388 0931 1A       		.uleb128 0x1a
 3389 0932 26050000 		.4byte	.LASF62
 3390 0936 01       		.byte	0x1
 3391 0937 1902     		.2byte	0x219
 3392 0939 4C000000 		.4byte	0x4c
 3393 093d 02       		.uleb128 0x2
 3394 093e 91       		.byte	0x91
 3395 093f 6C       		.sleb128 -20
 3396 0940 1A       		.uleb128 0x1a
 3397 0941 04070000 		.4byte	.LASF132
 3398 0945 01       		.byte	0x1
 3399 0946 1A02     		.2byte	0x21a
 3400 0948 D5090000 		.4byte	0x9d5
 3401 094c 02       		.uleb128 0x2
 3402 094d 91       		.byte	0x91
 3403 094e 48       		.sleb128 -56
 3404 094f 1A       		.uleb128 0x1a
 3405 0950 0F030000 		.4byte	.LASF61
 3406 0954 01       		.byte	0x1
 3407 0955 1E02     		.2byte	0x21e
 3408 0957 85030000 		.4byte	0x385
 3409 095b 03       		.uleb128 0x3
 3410 095c 91       		.byte	0x91
 3411 095d B47F     		.sleb128 -76
 3412 095f 1A       		.uleb128 0x1a
 3413 0960 8A030000 		.4byte	.LASF133
 3414 0964 01       		.byte	0x1
 3415 0965 3C02     		.2byte	0x23c
 3416 0967 91020000 		.4byte	0x291
 3417 096b 03       		.uleb128 0x3
 3418 096c 91       		.byte	0x91
 3419 096d 987F     		.sleb128 -104
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 77


 3420 096f 1E       		.uleb128 0x1e
 3421 0970 26000000 		.4byte	.LBB9
 3422 0974 7A000000 		.4byte	.LBE9-.LBB9
 3423 0978 8D090000 		.4byte	0x98d
 3424 097c 1A       		.uleb128 0x1a
 3425 097d 6F070000 		.4byte	.LASF134
 3426 0981 01       		.byte	0x1
 3427 0982 2402     		.2byte	0x224
 3428 0984 29020000 		.4byte	0x229
 3429 0988 03       		.uleb128 0x3
 3430 0989 91       		.byte	0x91
 3431 098a FC7E     		.sleb128 -132
 3432 098c 00       		.byte	0
 3433 098d 1E       		.uleb128 0x1e
 3434 098e 26010000 		.4byte	.LBB10
 3435 0992 F2000000 		.4byte	.LBE10-.LBB10
 3436 0996 AB090000 		.4byte	0x9ab
 3437 099a 1A       		.uleb128 0x1a
 3438 099b C6070000 		.4byte	.LASF135
 3439 099f 01       		.byte	0x1
 3440 09a0 5702     		.2byte	0x257
 3441 09a2 D5020000 		.4byte	0x2d5
 3442 09a6 03       		.uleb128 0x3
 3443 09a7 91       		.byte	0x91
 3444 09a8 EC7E     		.sleb128 -148
 3445 09aa 00       		.byte	0
 3446 09ab 1D       		.uleb128 0x1d
 3447 09ac 28020000 		.4byte	.LBB11
 3448 09b0 E8000000 		.4byte	.LBE11-.LBB11
 3449 09b4 1A       		.uleb128 0x1a
 3450 09b5 6F070000 		.4byte	.LASF134
 3451 09b9 01       		.byte	0x1
 3452 09ba 7A02     		.2byte	0x27a
 3453 09bc 29020000 		.4byte	0x229
 3454 09c0 03       		.uleb128 0x3
 3455 09c1 91       		.byte	0x91
 3456 09c2 D07E     		.sleb128 -176
 3457 09c4 1A       		.uleb128 0x1a
 3458 09c5 61040000 		.4byte	.LASF136
 3459 09c9 01       		.byte	0x1
 3460 09ca 8F02     		.2byte	0x28f
 3461 09cc C9000000 		.4byte	0xc9
 3462 09d0 02       		.uleb128 0x2
 3463 09d1 91       		.byte	0x91
 3464 09d2 68       		.sleb128 -24
 3465 09d3 00       		.byte	0
 3466 09d4 00       		.byte	0
 3467 09d5 07       		.uleb128 0x7
 3468 09d6 E3000000 		.4byte	0xe3
 3469 09da E5090000 		.4byte	0x9e5
 3470 09de 08       		.uleb128 0x8
 3471 09df F1000000 		.4byte	0xf1
 3472 09e3 1F       		.byte	0x1f
 3473 09e4 00       		.byte	0
 3474 09e5 20       		.uleb128 0x20
 3475 09e6 4D030000 		.4byte	.LASF137
 3476 09ea 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 78


 3477 09eb A702     		.2byte	0x2a7
 3478 09ed 81000000 		.4byte	0x81
 3479 09f1 00000000 		.4byte	.LFB77
 3480 09f5 74000000 		.4byte	.LFE77-.LFB77
 3481 09f9 01       		.uleb128 0x1
 3482 09fa 9C       		.byte	0x9c
 3483 09fb 2B0A0000 		.4byte	0xa2b
 3484 09ff 21       		.uleb128 0x21
 3485 0a00 26050000 		.4byte	.LASF62
 3486 0a04 01       		.byte	0x1
 3487 0a05 A702     		.2byte	0x2a7
 3488 0a07 4C000000 		.4byte	0x4c
 3489 0a0b 02       		.uleb128 0x2
 3490 0a0c 91       		.byte	0x91
 3491 0a0d 64       		.sleb128 -28
 3492 0a0e 22       		.uleb128 0x22
 3493 0a0f 7400     		.ascii	"t\000"
 3494 0a11 01       		.byte	0x1
 3495 0a12 AE02     		.2byte	0x2ae
 3496 0a14 2B0A0000 		.4byte	0xa2b
 3497 0a18 02       		.uleb128 0x2
 3498 0a19 91       		.byte	0x91
 3499 0a1a 74       		.sleb128 -12
 3500 0a1b 1A       		.uleb128 0x1a
 3501 0a1c 05050000 		.4byte	.LASF138
 3502 0a20 01       		.byte	0x1
 3503 0a21 B302     		.2byte	0x2b3
 3504 0a23 77010000 		.4byte	0x177
 3505 0a27 02       		.uleb128 0x2
 3506 0a28 91       		.byte	0x91
 3507 0a29 68       		.sleb128 -24
 3508 0a2a 00       		.byte	0
 3509 0a2b 06       		.uleb128 0x6
 3510 0a2c 04       		.byte	0x4
 3511 0a2d E0020000 		.4byte	0x2e0
 3512 0a31 20       		.uleb128 0x20
 3513 0a32 EE020000 		.4byte	.LASF139
 3514 0a36 01       		.byte	0x1
 3515 0a37 D002     		.2byte	0x2d0
 3516 0a39 81000000 		.4byte	0x81
 3517 0a3d 00000000 		.4byte	.LFB78
 3518 0a41 38010000 		.4byte	.LFE78-.LFB78
 3519 0a45 01       		.uleb128 0x1
 3520 0a46 9C       		.byte	0x9c
 3521 0a47 AA0A0000 		.4byte	0xaaa
 3522 0a4b 21       		.uleb128 0x21
 3523 0a4c 15030000 		.4byte	.LASF140
 3524 0a50 01       		.byte	0x1
 3525 0a51 D002     		.2byte	0x2d0
 3526 0a53 F8000000 		.4byte	0xf8
 3527 0a57 03       		.uleb128 0x3
 3528 0a58 91       		.byte	0x91
 3529 0a59 9C7E     		.sleb128 -228
 3530 0a5b 21       		.uleb128 0x21
 3531 0a5c 0A030000 		.4byte	.LASF141
 3532 0a60 01       		.byte	0x1
 3533 0a61 D002     		.2byte	0x2d0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 79


 3534 0a63 68000000 		.4byte	0x68
 3535 0a67 03       		.uleb128 0x3
 3536 0a68 91       		.byte	0x91
 3537 0a69 987E     		.sleb128 -232
 3538 0a6b 21       		.uleb128 0x21
 3539 0a6c FC050000 		.4byte	.LASF142
 3540 0a70 01       		.byte	0x1
 3541 0a71 D002     		.2byte	0x2d0
 3542 0a73 F8000000 		.4byte	0xf8
 3543 0a77 03       		.uleb128 0x3
 3544 0a78 91       		.byte	0x91
 3545 0a79 947E     		.sleb128 -236
 3546 0a7b 1A       		.uleb128 0x1a
 3547 0a7c 0D020000 		.4byte	.LASF143
 3548 0a80 01       		.byte	0x1
 3549 0a81 D202     		.2byte	0x2d2
 3550 0a83 81000000 		.4byte	0x81
 3551 0a87 02       		.uleb128 0x2
 3552 0a88 91       		.byte	0x91
 3553 0a89 77       		.sleb128 -9
 3554 0a8a 1A       		.uleb128 0x1a
 3555 0a8b 74000000 		.4byte	.LASF144
 3556 0a8f 01       		.byte	0x1
 3557 0a90 D902     		.2byte	0x2d9
 3558 0a92 AA0A0000 		.4byte	0xaaa
 3559 0a96 02       		.uleb128 0x2
 3560 0a97 91       		.byte	0x91
 3561 0a98 68       		.sleb128 -24
 3562 0a99 1A       		.uleb128 0x1a
 3563 0a9a 44070000 		.4byte	.LASF120
 3564 0a9e 01       		.byte	0x1
 3565 0a9f E102     		.2byte	0x2e1
 3566 0aa1 C2080000 		.4byte	0x8c2
 3567 0aa5 03       		.uleb128 0x3
 3568 0aa6 91       		.byte	0x91
 3569 0aa7 A07E     		.sleb128 -224
 3570 0aa9 00       		.byte	0
 3571 0aaa 07       		.uleb128 0x7
 3572 0aab E3000000 		.4byte	0xe3
 3573 0aaf BA0A0000 		.4byte	0xaba
 3574 0ab3 08       		.uleb128 0x8
 3575 0ab4 F1000000 		.4byte	0xf1
 3576 0ab8 0B       		.byte	0xb
 3577 0ab9 00       		.byte	0
 3578 0aba 23       		.uleb128 0x23
 3579 0abb 80010000 		.4byte	.LASF145
 3580 0abf 0D       		.byte	0xd
 3581 0ac0 1207     		.2byte	0x712
 3582 0ac2 C60A0000 		.4byte	0xac6
 3583 0ac6 0C       		.uleb128 0xc
 3584 0ac7 76000000 		.4byte	0x76
 3585 0acb 24       		.uleb128 0x24
 3586 0acc 64000000 		.4byte	.LASF146
 3587 0ad0 0A       		.byte	0xa
 3588 0ad1 11       		.byte	0x11
 3589 0ad2 91040000 		.4byte	0x491
 3590 0ad6 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 80


 3591 0ad7 03       		.byte	0x3
 3592 0ad8 00000000 		.4byte	buffer_overflow
 3593 0adc 24       		.uleb128 0x24
 3594 0add B3040000 		.4byte	.LASF147
 3595 0ae1 0A       		.byte	0xa
 3596 0ae2 22       		.byte	0x22
 3597 0ae3 8D000000 		.4byte	0x8d
 3598 0ae7 05       		.uleb128 0x5
 3599 0ae8 03       		.byte	0x3
 3600 0ae9 00000000 		.4byte	dataPointsInStack
 3601 0aed 24       		.uleb128 0x24
 3602 0aee D8070000 		.4byte	.LASF148
 3603 0af2 0A       		.byte	0xa
 3604 0af3 23       		.byte	0x23
 3605 0af4 8D000000 		.4byte	0x8d
 3606 0af8 05       		.uleb128 0x5
 3607 0af9 03       		.byte	0x3
 3608 0afa 00000000 		.4byte	dataPointsInStackDesired
 3609 0afe 07       		.uleb128 0x7
 3610 0aff 95030000 		.4byte	0x395
 3611 0b03 0E0B0000 		.4byte	0xb0e
 3612 0b07 08       		.uleb128 0x8
 3613 0b08 F1000000 		.4byte	0xf1
 3614 0b0c 95       		.byte	0x95
 3615 0b0d 00       		.byte	0
 3616 0b0e 24       		.uleb128 0x24
 3617 0b0f F1030000 		.4byte	.LASF149
 3618 0b13 0A       		.byte	0xa
 3619 0b14 24       		.byte	0x24
 3620 0b15 FE0A0000 		.4byte	0xafe
 3621 0b19 05       		.uleb128 0x5
 3622 0b1a 03       		.byte	0x3
 3623 0b1b 00000000 		.4byte	data
 3624 0b1f 24       		.uleb128 0x24
 3625 0b20 67010000 		.4byte	.LASF150
 3626 0b24 0B       		.byte	0xb
 3627 0b25 21       		.byte	0x21
 3628 0b26 81000000 		.4byte	0x81
 3629 0b2a 05       		.uleb128 0x5
 3630 0b2b 03       		.byte	0x3
 3631 0b2c 00000000 		.4byte	modem_state
 3632 0b30 24       		.uleb128 0x24
 3633 0b31 70040000 		.4byte	.LASF151
 3634 0b35 0B       		.byte	0xb
 3635 0b36 64       		.byte	0x64
 3636 0b37 BD000000 		.4byte	0xbd
 3637 0b3b 05       		.uleb128 0x5
 3638 0b3c 03       		.byte	0x3
 3639 0b3d 00000000 		.4byte	modem_start_time_stamp
 3640 0b41 24       		.uleb128 0x24
 3641 0b42 07040000 		.4byte	.LASF88
 3642 0b46 0B       		.byte	0xb
 3643 0b47 65       		.byte	0x65
 3644 0b48 CD030000 		.4byte	0x3cd
 3645 0b4c 05       		.uleb128 0x5
 3646 0b4d 03       		.byte	0x3
 3647 0b4e 00000000 		.4byte	modem_info
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 81


 3648 0b52 24       		.uleb128 0x24
 3649 0b53 2D070000 		.4byte	.LASF152
 3650 0b57 0B       		.byte	0xb
 3651 0b58 66       		.byte	0x66
 3652 0b59 41040000 		.4byte	0x441
 3653 0b5d 05       		.uleb128 0x5
 3654 0b5e 03       		.byte	0x3
 3655 0b5f 00000000 		.4byte	modem_stats
 3656 0b63 24       		.uleb128 0x24
 3657 0b64 3E050000 		.4byte	.LASF153
 3658 0b68 0B       		.byte	0xb
 3659 0b69 67       		.byte	0x67
 3660 0b6a 98040000 		.4byte	0x498
 3661 0b6e 05       		.uleb128 0x5
 3662 0b6f 03       		.byte	0x3
 3663 0b70 00000000 		.4byte	updatable_parameters
 3664 0b74 07       		.uleb128 0x7
 3665 0b75 E3000000 		.4byte	0xe3
 3666 0b79 850B0000 		.4byte	0xb85
 3667 0b7d 1F       		.uleb128 0x1f
 3668 0b7e F1000000 		.4byte	0xf1
 3669 0b82 0F27     		.2byte	0x270f
 3670 0b84 00       		.byte	0
 3671 0b85 24       		.uleb128 0x24
 3672 0b86 7E050000 		.4byte	.LASF154
 3673 0b8a 0C       		.byte	0xc
 3674 0b8b 18       		.byte	0x18
 3675 0b8c 740B0000 		.4byte	0xb74
 3676 0b90 05       		.uleb128 0x5
 3677 0b91 03       		.byte	0x3
 3678 0b92 00000000 		.4byte	http_request
 3679 0b96 24       		.uleb128 0x24
 3680 0b97 07080000 		.4byte	.LASF155
 3681 0b9b 0C       		.byte	0xc
 3682 0b9c 19       		.byte	0x19
 3683 0b9d 740B0000 		.4byte	0xb74
 3684 0ba1 05       		.uleb128 0x5
 3685 0ba2 03       		.byte	0x3
 3686 0ba3 00000000 		.4byte	http_body
 3687 0ba7 24       		.uleb128 0x24
 3688 0ba8 39070000 		.4byte	.LASF156
 3689 0bac 0C       		.byte	0xc
 3690 0bad 1A       		.byte	0x1a
 3691 0bae C2080000 		.4byte	0x8c2
 3692 0bb2 05       		.uleb128 0x5
 3693 0bb3 03       		.byte	0x3
 3694 0bb4 00000000 		.4byte	http_route
 3695 0bb8 24       		.uleb128 0x24
 3696 0bb9 62060000 		.4byte	.LASF157
 3697 0bbd 0C       		.byte	0xc
 3698 0bbe 41       		.byte	0x41
 3699 0bbf 13050000 		.4byte	0x513
 3700 0bc3 05       		.uleb128 0x5
 3701 0bc4 03       		.byte	0x3
 3702 0bc5 00000000 		.4byte	system_info
 3703 0bc9 24       		.uleb128 0x24
 3704 0bca 02060000 		.4byte	.LASF158
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 82


 3705 0bce 0C       		.byte	0xc
 3706 0bcf 53       		.byte	0x53
 3707 0bd0 4F050000 		.4byte	0x54f
 3708 0bd4 05       		.uleb128 0x5
 3709 0bd5 03       		.byte	0x3
 3710 0bd6 00000000 		.4byte	system_settings
 3711 0bda 24       		.uleb128 0x24
 3712 0bdb 73010000 		.4byte	.LASF159
 3713 0bdf 0C       		.byte	0xc
 3714 0be0 6F       		.byte	0x6f
 3715 0be1 DC040000 		.4byte	0x4dc
 3716 0be5 05       		.uleb128 0x5
 3717 0be6 03       		.byte	0x3
 3718 0be7 00000000 		.4byte	alarmMeasure
 3719 0beb 24       		.uleb128 0x24
 3720 0bec B7010000 		.4byte	.LASF160
 3721 0bf0 0C       		.byte	0xc
 3722 0bf1 70       		.byte	0x70
 3723 0bf2 81000000 		.4byte	0x81
 3724 0bf6 05       		.uleb128 0x5
 3725 0bf7 03       		.byte	0x3
 3726 0bf8 00000000 		.4byte	timeToMeasure
 3727 0bfc 24       		.uleb128 0x24
 3728 0bfd 22030000 		.4byte	.LASF161
 3729 0c01 0C       		.byte	0xc
 3730 0c02 71       		.byte	0x71
 3731 0c03 DC040000 		.4byte	0x4dc
 3732 0c07 05       		.uleb128 0x5
 3733 0c08 03       		.byte	0x3
 3734 0c09 00000000 		.4byte	alarmSync
 3735 0c0d 24       		.uleb128 0x24
 3736 0c0e DD010000 		.4byte	.LASF162
 3737 0c12 0C       		.byte	0xc
 3738 0c13 72       		.byte	0x72
 3739 0c14 81000000 		.4byte	0x81
 3740 0c18 05       		.uleb128 0x5
 3741 0c19 03       		.byte	0x3
 3742 0c1a 00000000 		.4byte	timeToSync
 3743 0c1e 24       		.uleb128 0x24
 3744 0c1f 0F050000 		.4byte	.LASF163
 3745 0c23 0C       		.byte	0xc
 3746 0c24 73       		.byte	0x73
 3747 0c25 81000000 		.4byte	0x81
 3748 0c29 05       		.uleb128 0x5
 3749 0c2a 03       		.byte	0x3
 3750 0c2b 00000000 		.4byte	timeToSycnRemoteParams
 3751 0c2f 25       		.uleb128 0x25
 3752 0c30 68657900 		.ascii	"hey\000"
 3753 0c34 0C       		.byte	0xc
 3754 0c35 74       		.byte	0x74
 3755 0c36 81000000 		.4byte	0x81
 3756 0c3a 05       		.uleb128 0x5
 3757 0c3b 03       		.byte	0x3
 3758 0c3c 00000000 		.4byte	hey
 3759 0c40 07       		.uleb128 0x7
 3760 0c41 E3000000 		.4byte	0xe3
 3761 0c45 500C0000 		.4byte	0xc50
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 83


 3762 0c49 08       		.uleb128 0x8
 3763 0c4a F1000000 		.4byte	0xf1
 3764 0c4e 1D       		.byte	0x1d
 3765 0c4f 00       		.byte	0
 3766 0c50 24       		.uleb128 0x24
 3767 0c51 B6050000 		.4byte	.LASF164
 3768 0c55 01       		.byte	0x1
 3769 0c56 1D       		.byte	0x1d
 3770 0c57 400C0000 		.4byte	0xc40
 3771 0c5b 05       		.uleb128 0x5
 3772 0c5c 03       		.byte	0x3
 3773 0c5d 00000000 		.4byte	Data_fileName
 3774 0c61 24       		.uleb128 0x24
 3775 0c62 A6030000 		.4byte	.LASF96
 3776 0c66 01       		.byte	0x1
 3777 0c67 1E       		.byte	0x1e
 3778 0c68 81000000 		.4byte	0x81
 3779 0c6c 05       		.uleb128 0x5
 3780 0c6d 03       		.byte	0x3
 3781 0c6e 00000000 		.4byte	try_counter
 3782 0c72 00       		.byte	0
 3783              		.section	.debug_abbrev,"",%progbits
 3784              	.Ldebug_abbrev0:
 3785 0000 01       		.uleb128 0x1
 3786 0001 11       		.uleb128 0x11
 3787 0002 01       		.byte	0x1
 3788 0003 25       		.uleb128 0x25
 3789 0004 0E       		.uleb128 0xe
 3790 0005 13       		.uleb128 0x13
 3791 0006 0B       		.uleb128 0xb
 3792 0007 03       		.uleb128 0x3
 3793 0008 0E       		.uleb128 0xe
 3794 0009 1B       		.uleb128 0x1b
 3795 000a 0E       		.uleb128 0xe
 3796 000b 55       		.uleb128 0x55
 3797 000c 17       		.uleb128 0x17
 3798 000d 11       		.uleb128 0x11
 3799 000e 01       		.uleb128 0x1
 3800 000f 10       		.uleb128 0x10
 3801 0010 17       		.uleb128 0x17
 3802 0011 00       		.byte	0
 3803 0012 00       		.byte	0
 3804 0013 02       		.uleb128 0x2
 3805 0014 24       		.uleb128 0x24
 3806 0015 00       		.byte	0
 3807 0016 0B       		.uleb128 0xb
 3808 0017 0B       		.uleb128 0xb
 3809 0018 3E       		.uleb128 0x3e
 3810 0019 0B       		.uleb128 0xb
 3811 001a 03       		.uleb128 0x3
 3812 001b 0E       		.uleb128 0xe
 3813 001c 00       		.byte	0
 3814 001d 00       		.byte	0
 3815 001e 03       		.uleb128 0x3
 3816 001f 16       		.uleb128 0x16
 3817 0020 00       		.byte	0
 3818 0021 03       		.uleb128 0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 84


 3819 0022 0E       		.uleb128 0xe
 3820 0023 3A       		.uleb128 0x3a
 3821 0024 0B       		.uleb128 0xb
 3822 0025 3B       		.uleb128 0x3b
 3823 0026 0B       		.uleb128 0xb
 3824 0027 49       		.uleb128 0x49
 3825 0028 13       		.uleb128 0x13
 3826 0029 00       		.byte	0
 3827 002a 00       		.byte	0
 3828 002b 04       		.uleb128 0x4
 3829 002c 24       		.uleb128 0x24
 3830 002d 00       		.byte	0
 3831 002e 0B       		.uleb128 0xb
 3832 002f 0B       		.uleb128 0xb
 3833 0030 3E       		.uleb128 0x3e
 3834 0031 0B       		.uleb128 0xb
 3835 0032 03       		.uleb128 0x3
 3836 0033 08       		.uleb128 0x8
 3837 0034 00       		.byte	0
 3838 0035 00       		.byte	0
 3839 0036 05       		.uleb128 0x5
 3840 0037 16       		.uleb128 0x16
 3841 0038 00       		.byte	0
 3842 0039 03       		.uleb128 0x3
 3843 003a 0E       		.uleb128 0xe
 3844 003b 3A       		.uleb128 0x3a
 3845 003c 0B       		.uleb128 0xb
 3846 003d 3B       		.uleb128 0x3b
 3847 003e 05       		.uleb128 0x5
 3848 003f 49       		.uleb128 0x49
 3849 0040 13       		.uleb128 0x13
 3850 0041 00       		.byte	0
 3851 0042 00       		.byte	0
 3852 0043 06       		.uleb128 0x6
 3853 0044 0F       		.uleb128 0xf
 3854 0045 00       		.byte	0
 3855 0046 0B       		.uleb128 0xb
 3856 0047 0B       		.uleb128 0xb
 3857 0048 49       		.uleb128 0x49
 3858 0049 13       		.uleb128 0x13
 3859 004a 00       		.byte	0
 3860 004b 00       		.byte	0
 3861 004c 07       		.uleb128 0x7
 3862 004d 01       		.uleb128 0x1
 3863 004e 01       		.byte	0x1
 3864 004f 49       		.uleb128 0x49
 3865 0050 13       		.uleb128 0x13
 3866 0051 01       		.uleb128 0x1
 3867 0052 13       		.uleb128 0x13
 3868 0053 00       		.byte	0
 3869 0054 00       		.byte	0
 3870 0055 08       		.uleb128 0x8
 3871 0056 21       		.uleb128 0x21
 3872 0057 00       		.byte	0
 3873 0058 49       		.uleb128 0x49
 3874 0059 13       		.uleb128 0x13
 3875 005a 2F       		.uleb128 0x2f
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 85


 3876 005b 0B       		.uleb128 0xb
 3877 005c 00       		.byte	0
 3878 005d 00       		.byte	0
 3879 005e 09       		.uleb128 0x9
 3880 005f 13       		.uleb128 0x13
 3881 0060 01       		.byte	0x1
 3882 0061 0B       		.uleb128 0xb
 3883 0062 0B       		.uleb128 0xb
 3884 0063 3A       		.uleb128 0x3a
 3885 0064 0B       		.uleb128 0xb
 3886 0065 3B       		.uleb128 0x3b
 3887 0066 0B       		.uleb128 0xb
 3888 0067 01       		.uleb128 0x1
 3889 0068 13       		.uleb128 0x13
 3890 0069 00       		.byte	0
 3891 006a 00       		.byte	0
 3892 006b 0A       		.uleb128 0xa
 3893 006c 0D       		.uleb128 0xd
 3894 006d 00       		.byte	0
 3895 006e 03       		.uleb128 0x3
 3896 006f 08       		.uleb128 0x8
 3897 0070 3A       		.uleb128 0x3a
 3898 0071 0B       		.uleb128 0xb
 3899 0072 3B       		.uleb128 0x3b
 3900 0073 0B       		.uleb128 0xb
 3901 0074 49       		.uleb128 0x49
 3902 0075 13       		.uleb128 0x13
 3903 0076 38       		.uleb128 0x38
 3904 0077 0B       		.uleb128 0xb
 3905 0078 00       		.byte	0
 3906 0079 00       		.byte	0
 3907 007a 0B       		.uleb128 0xb
 3908 007b 0D       		.uleb128 0xd
 3909 007c 00       		.byte	0
 3910 007d 03       		.uleb128 0x3
 3911 007e 0E       		.uleb128 0xe
 3912 007f 3A       		.uleb128 0x3a
 3913 0080 0B       		.uleb128 0xb
 3914 0081 3B       		.uleb128 0x3b
 3915 0082 0B       		.uleb128 0xb
 3916 0083 49       		.uleb128 0x49
 3917 0084 13       		.uleb128 0x13
 3918 0085 38       		.uleb128 0x38
 3919 0086 0B       		.uleb128 0xb
 3920 0087 00       		.byte	0
 3921 0088 00       		.byte	0
 3922 0089 0C       		.uleb128 0xc
 3923 008a 35       		.uleb128 0x35
 3924 008b 00       		.byte	0
 3925 008c 49       		.uleb128 0x49
 3926 008d 13       		.uleb128 0x13
 3927 008e 00       		.byte	0
 3928 008f 00       		.byte	0
 3929 0090 0D       		.uleb128 0xd
 3930 0091 13       		.uleb128 0x13
 3931 0092 01       		.byte	0x1
 3932 0093 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 86


 3933 0094 05       		.uleb128 0x5
 3934 0095 3A       		.uleb128 0x3a
 3935 0096 0B       		.uleb128 0xb
 3936 0097 3B       		.uleb128 0x3b
 3937 0098 0B       		.uleb128 0xb
 3938 0099 01       		.uleb128 0x1
 3939 009a 13       		.uleb128 0x13
 3940 009b 00       		.byte	0
 3941 009c 00       		.byte	0
 3942 009d 0E       		.uleb128 0xe
 3943 009e 13       		.uleb128 0x13
 3944 009f 01       		.byte	0x1
 3945 00a0 03       		.uleb128 0x3
 3946 00a1 08       		.uleb128 0x8
 3947 00a2 0B       		.uleb128 0xb
 3948 00a3 0B       		.uleb128 0xb
 3949 00a4 3A       		.uleb128 0x3a
 3950 00a5 0B       		.uleb128 0xb
 3951 00a6 3B       		.uleb128 0x3b
 3952 00a7 0B       		.uleb128 0xb
 3953 00a8 01       		.uleb128 0x1
 3954 00a9 13       		.uleb128 0x13
 3955 00aa 00       		.byte	0
 3956 00ab 00       		.byte	0
 3957 00ac 0F       		.uleb128 0xf
 3958 00ad 2E       		.uleb128 0x2e
 3959 00ae 00       		.byte	0
 3960 00af 3F       		.uleb128 0x3f
 3961 00b0 19       		.uleb128 0x19
 3962 00b1 03       		.uleb128 0x3
 3963 00b2 0E       		.uleb128 0xe
 3964 00b3 3A       		.uleb128 0x3a
 3965 00b4 0B       		.uleb128 0xb
 3966 00b5 3B       		.uleb128 0x3b
 3967 00b6 0B       		.uleb128 0xb
 3968 00b7 27       		.uleb128 0x27
 3969 00b8 19       		.uleb128 0x19
 3970 00b9 11       		.uleb128 0x11
 3971 00ba 01       		.uleb128 0x1
 3972 00bb 12       		.uleb128 0x12
 3973 00bc 06       		.uleb128 0x6
 3974 00bd 40       		.uleb128 0x40
 3975 00be 18       		.uleb128 0x18
 3976 00bf 9642     		.uleb128 0x2116
 3977 00c1 19       		.uleb128 0x19
 3978 00c2 00       		.byte	0
 3979 00c3 00       		.byte	0
 3980 00c4 10       		.uleb128 0x10
 3981 00c5 2E       		.uleb128 0x2e
 3982 00c6 01       		.byte	0x1
 3983 00c7 3F       		.uleb128 0x3f
 3984 00c8 19       		.uleb128 0x19
 3985 00c9 03       		.uleb128 0x3
 3986 00ca 0E       		.uleb128 0xe
 3987 00cb 3A       		.uleb128 0x3a
 3988 00cc 0B       		.uleb128 0xb
 3989 00cd 3B       		.uleb128 0x3b
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 87


 3990 00ce 0B       		.uleb128 0xb
 3991 00cf 11       		.uleb128 0x11
 3992 00d0 01       		.uleb128 0x1
 3993 00d1 12       		.uleb128 0x12
 3994 00d2 06       		.uleb128 0x6
 3995 00d3 40       		.uleb128 0x40
 3996 00d4 18       		.uleb128 0x18
 3997 00d5 9642     		.uleb128 0x2116
 3998 00d7 19       		.uleb128 0x19
 3999 00d8 01       		.uleb128 0x1
 4000 00d9 13       		.uleb128 0x13
 4001 00da 00       		.byte	0
 4002 00db 00       		.byte	0
 4003 00dc 11       		.uleb128 0x11
 4004 00dd 34       		.uleb128 0x34
 4005 00de 00       		.byte	0
 4006 00df 03       		.uleb128 0x3
 4007 00e0 0E       		.uleb128 0xe
 4008 00e1 3A       		.uleb128 0x3a
 4009 00e2 0B       		.uleb128 0xb
 4010 00e3 3B       		.uleb128 0x3b
 4011 00e4 0B       		.uleb128 0xb
 4012 00e5 49       		.uleb128 0x49
 4013 00e6 13       		.uleb128 0x13
 4014 00e7 02       		.uleb128 0x2
 4015 00e8 18       		.uleb128 0x18
 4016 00e9 00       		.byte	0
 4017 00ea 00       		.byte	0
 4018 00eb 12       		.uleb128 0x12
 4019 00ec 2E       		.uleb128 0x2e
 4020 00ed 01       		.byte	0x1
 4021 00ee 3F       		.uleb128 0x3f
 4022 00ef 19       		.uleb128 0x19
 4023 00f0 03       		.uleb128 0x3
 4024 00f1 0E       		.uleb128 0xe
 4025 00f2 3A       		.uleb128 0x3a
 4026 00f3 0B       		.uleb128 0xb
 4027 00f4 3B       		.uleb128 0x3b
 4028 00f5 0B       		.uleb128 0xb
 4029 00f6 49       		.uleb128 0x49
 4030 00f7 13       		.uleb128 0x13
 4031 00f8 11       		.uleb128 0x11
 4032 00f9 01       		.uleb128 0x1
 4033 00fa 12       		.uleb128 0x12
 4034 00fb 06       		.uleb128 0x6
 4035 00fc 40       		.uleb128 0x40
 4036 00fd 18       		.uleb128 0x18
 4037 00fe 9642     		.uleb128 0x2116
 4038 0100 19       		.uleb128 0x19
 4039 0101 01       		.uleb128 0x1
 4040 0102 13       		.uleb128 0x13
 4041 0103 00       		.byte	0
 4042 0104 00       		.byte	0
 4043 0105 13       		.uleb128 0x13
 4044 0106 2E       		.uleb128 0x2e
 4045 0107 00       		.byte	0
 4046 0108 3F       		.uleb128 0x3f
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 88


 4047 0109 19       		.uleb128 0x19
 4048 010a 03       		.uleb128 0x3
 4049 010b 0E       		.uleb128 0xe
 4050 010c 3A       		.uleb128 0x3a
 4051 010d 0B       		.uleb128 0xb
 4052 010e 3B       		.uleb128 0x3b
 4053 010f 0B       		.uleb128 0xb
 4054 0110 11       		.uleb128 0x11
 4055 0111 01       		.uleb128 0x1
 4056 0112 12       		.uleb128 0x12
 4057 0113 06       		.uleb128 0x6
 4058 0114 40       		.uleb128 0x40
 4059 0115 18       		.uleb128 0x18
 4060 0116 9642     		.uleb128 0x2116
 4061 0118 19       		.uleb128 0x19
 4062 0119 00       		.byte	0
 4063 011a 00       		.byte	0
 4064 011b 14       		.uleb128 0x14
 4065 011c 2E       		.uleb128 0x2e
 4066 011d 01       		.byte	0x1
 4067 011e 3F       		.uleb128 0x3f
 4068 011f 19       		.uleb128 0x19
 4069 0120 03       		.uleb128 0x3
 4070 0121 0E       		.uleb128 0xe
 4071 0122 3A       		.uleb128 0x3a
 4072 0123 0B       		.uleb128 0xb
 4073 0124 3B       		.uleb128 0x3b
 4074 0125 0B       		.uleb128 0xb
 4075 0126 27       		.uleb128 0x27
 4076 0127 19       		.uleb128 0x19
 4077 0128 11       		.uleb128 0x11
 4078 0129 01       		.uleb128 0x1
 4079 012a 12       		.uleb128 0x12
 4080 012b 06       		.uleb128 0x6
 4081 012c 40       		.uleb128 0x40
 4082 012d 18       		.uleb128 0x18
 4083 012e 9642     		.uleb128 0x2116
 4084 0130 19       		.uleb128 0x19
 4085 0131 01       		.uleb128 0x1
 4086 0132 13       		.uleb128 0x13
 4087 0133 00       		.byte	0
 4088 0134 00       		.byte	0
 4089 0135 15       		.uleb128 0x15
 4090 0136 05       		.uleb128 0x5
 4091 0137 00       		.byte	0
 4092 0138 03       		.uleb128 0x3
 4093 0139 0E       		.uleb128 0xe
 4094 013a 3A       		.uleb128 0x3a
 4095 013b 0B       		.uleb128 0xb
 4096 013c 3B       		.uleb128 0x3b
 4097 013d 0B       		.uleb128 0xb
 4098 013e 49       		.uleb128 0x49
 4099 013f 13       		.uleb128 0x13
 4100 0140 02       		.uleb128 0x2
 4101 0141 18       		.uleb128 0x18
 4102 0142 00       		.byte	0
 4103 0143 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 89


 4104 0144 16       		.uleb128 0x16
 4105 0145 2E       		.uleb128 0x2e
 4106 0146 01       		.byte	0x1
 4107 0147 3F       		.uleb128 0x3f
 4108 0148 19       		.uleb128 0x19
 4109 0149 03       		.uleb128 0x3
 4110 014a 0E       		.uleb128 0xe
 4111 014b 3A       		.uleb128 0x3a
 4112 014c 0B       		.uleb128 0xb
 4113 014d 3B       		.uleb128 0x3b
 4114 014e 0B       		.uleb128 0xb
 4115 014f 27       		.uleb128 0x27
 4116 0150 19       		.uleb128 0x19
 4117 0151 49       		.uleb128 0x49
 4118 0152 13       		.uleb128 0x13
 4119 0153 11       		.uleb128 0x11
 4120 0154 01       		.uleb128 0x1
 4121 0155 12       		.uleb128 0x12
 4122 0156 06       		.uleb128 0x6
 4123 0157 40       		.uleb128 0x40
 4124 0158 18       		.uleb128 0x18
 4125 0159 9642     		.uleb128 0x2116
 4126 015b 19       		.uleb128 0x19
 4127 015c 01       		.uleb128 0x1
 4128 015d 13       		.uleb128 0x13
 4129 015e 00       		.byte	0
 4130 015f 00       		.byte	0
 4131 0160 17       		.uleb128 0x17
 4132 0161 2E       		.uleb128 0x2e
 4133 0162 01       		.byte	0x1
 4134 0163 3F       		.uleb128 0x3f
 4135 0164 19       		.uleb128 0x19
 4136 0165 03       		.uleb128 0x3
 4137 0166 0E       		.uleb128 0xe
 4138 0167 3A       		.uleb128 0x3a
 4139 0168 0B       		.uleb128 0xb
 4140 0169 3B       		.uleb128 0x3b
 4141 016a 0B       		.uleb128 0xb
 4142 016b 27       		.uleb128 0x27
 4143 016c 19       		.uleb128 0x19
 4144 016d 11       		.uleb128 0x11
 4145 016e 01       		.uleb128 0x1
 4146 016f 12       		.uleb128 0x12
 4147 0170 06       		.uleb128 0x6
 4148 0171 40       		.uleb128 0x40
 4149 0172 18       		.uleb128 0x18
 4150 0173 9742     		.uleb128 0x2117
 4151 0175 19       		.uleb128 0x19
 4152 0176 01       		.uleb128 0x1
 4153 0177 13       		.uleb128 0x13
 4154 0178 00       		.byte	0
 4155 0179 00       		.byte	0
 4156 017a 18       		.uleb128 0x18
 4157 017b 2E       		.uleb128 0x2e
 4158 017c 01       		.byte	0x1
 4159 017d 3F       		.uleb128 0x3f
 4160 017e 19       		.uleb128 0x19
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 90


 4161 017f 03       		.uleb128 0x3
 4162 0180 0E       		.uleb128 0xe
 4163 0181 3A       		.uleb128 0x3a
 4164 0182 0B       		.uleb128 0xb
 4165 0183 3B       		.uleb128 0x3b
 4166 0184 0B       		.uleb128 0xb
 4167 0185 27       		.uleb128 0x27
 4168 0186 19       		.uleb128 0x19
 4169 0187 49       		.uleb128 0x49
 4170 0188 13       		.uleb128 0x13
 4171 0189 11       		.uleb128 0x11
 4172 018a 01       		.uleb128 0x1
 4173 018b 12       		.uleb128 0x12
 4174 018c 06       		.uleb128 0x6
 4175 018d 40       		.uleb128 0x40
 4176 018e 18       		.uleb128 0x18
 4177 018f 9742     		.uleb128 0x2117
 4178 0191 19       		.uleb128 0x19
 4179 0192 01       		.uleb128 0x1
 4180 0193 13       		.uleb128 0x13
 4181 0194 00       		.byte	0
 4182 0195 00       		.byte	0
 4183 0196 19       		.uleb128 0x19
 4184 0197 2E       		.uleb128 0x2e
 4185 0198 01       		.byte	0x1
 4186 0199 3F       		.uleb128 0x3f
 4187 019a 19       		.uleb128 0x19
 4188 019b 03       		.uleb128 0x3
 4189 019c 0E       		.uleb128 0xe
 4190 019d 3A       		.uleb128 0x3a
 4191 019e 0B       		.uleb128 0xb
 4192 019f 3B       		.uleb128 0x3b
 4193 01a0 05       		.uleb128 0x5
 4194 01a1 11       		.uleb128 0x11
 4195 01a2 01       		.uleb128 0x1
 4196 01a3 12       		.uleb128 0x12
 4197 01a4 06       		.uleb128 0x6
 4198 01a5 40       		.uleb128 0x40
 4199 01a6 18       		.uleb128 0x18
 4200 01a7 9642     		.uleb128 0x2116
 4201 01a9 19       		.uleb128 0x19
 4202 01aa 01       		.uleb128 0x1
 4203 01ab 13       		.uleb128 0x13
 4204 01ac 00       		.byte	0
 4205 01ad 00       		.byte	0
 4206 01ae 1A       		.uleb128 0x1a
 4207 01af 34       		.uleb128 0x34
 4208 01b0 00       		.byte	0
 4209 01b1 03       		.uleb128 0x3
 4210 01b2 0E       		.uleb128 0xe
 4211 01b3 3A       		.uleb128 0x3a
 4212 01b4 0B       		.uleb128 0xb
 4213 01b5 3B       		.uleb128 0x3b
 4214 01b6 05       		.uleb128 0x5
 4215 01b7 49       		.uleb128 0x49
 4216 01b8 13       		.uleb128 0x13
 4217 01b9 02       		.uleb128 0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 91


 4218 01ba 18       		.uleb128 0x18
 4219 01bb 00       		.byte	0
 4220 01bc 00       		.byte	0
 4221 01bd 1B       		.uleb128 0x1b
 4222 01be 2E       		.uleb128 0x2e
 4223 01bf 00       		.byte	0
 4224 01c0 3F       		.uleb128 0x3f
 4225 01c1 19       		.uleb128 0x19
 4226 01c2 03       		.uleb128 0x3
 4227 01c3 0E       		.uleb128 0xe
 4228 01c4 3A       		.uleb128 0x3a
 4229 01c5 0B       		.uleb128 0xb
 4230 01c6 3B       		.uleb128 0x3b
 4231 01c7 05       		.uleb128 0x5
 4232 01c8 27       		.uleb128 0x27
 4233 01c9 19       		.uleb128 0x19
 4234 01ca 49       		.uleb128 0x49
 4235 01cb 13       		.uleb128 0x13
 4236 01cc 11       		.uleb128 0x11
 4237 01cd 01       		.uleb128 0x1
 4238 01ce 12       		.uleb128 0x12
 4239 01cf 06       		.uleb128 0x6
 4240 01d0 40       		.uleb128 0x40
 4241 01d1 18       		.uleb128 0x18
 4242 01d2 9642     		.uleb128 0x2116
 4243 01d4 19       		.uleb128 0x19
 4244 01d5 00       		.byte	0
 4245 01d6 00       		.byte	0
 4246 01d7 1C       		.uleb128 0x1c
 4247 01d8 2E       		.uleb128 0x2e
 4248 01d9 01       		.byte	0x1
 4249 01da 3F       		.uleb128 0x3f
 4250 01db 19       		.uleb128 0x19
 4251 01dc 03       		.uleb128 0x3
 4252 01dd 0E       		.uleb128 0xe
 4253 01de 3A       		.uleb128 0x3a
 4254 01df 0B       		.uleb128 0xb
 4255 01e0 3B       		.uleb128 0x3b
 4256 01e1 05       		.uleb128 0x5
 4257 01e2 49       		.uleb128 0x49
 4258 01e3 13       		.uleb128 0x13
 4259 01e4 11       		.uleb128 0x11
 4260 01e5 01       		.uleb128 0x1
 4261 01e6 12       		.uleb128 0x12
 4262 01e7 06       		.uleb128 0x6
 4263 01e8 40       		.uleb128 0x40
 4264 01e9 18       		.uleb128 0x18
 4265 01ea 9642     		.uleb128 0x2116
 4266 01ec 19       		.uleb128 0x19
 4267 01ed 01       		.uleb128 0x1
 4268 01ee 13       		.uleb128 0x13
 4269 01ef 00       		.byte	0
 4270 01f0 00       		.byte	0
 4271 01f1 1D       		.uleb128 0x1d
 4272 01f2 0B       		.uleb128 0xb
 4273 01f3 01       		.byte	0x1
 4274 01f4 11       		.uleb128 0x11
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 92


 4275 01f5 01       		.uleb128 0x1
 4276 01f6 12       		.uleb128 0x12
 4277 01f7 06       		.uleb128 0x6
 4278 01f8 00       		.byte	0
 4279 01f9 00       		.byte	0
 4280 01fa 1E       		.uleb128 0x1e
 4281 01fb 0B       		.uleb128 0xb
 4282 01fc 01       		.byte	0x1
 4283 01fd 11       		.uleb128 0x11
 4284 01fe 01       		.uleb128 0x1
 4285 01ff 12       		.uleb128 0x12
 4286 0200 06       		.uleb128 0x6
 4287 0201 01       		.uleb128 0x1
 4288 0202 13       		.uleb128 0x13
 4289 0203 00       		.byte	0
 4290 0204 00       		.byte	0
 4291 0205 1F       		.uleb128 0x1f
 4292 0206 21       		.uleb128 0x21
 4293 0207 00       		.byte	0
 4294 0208 49       		.uleb128 0x49
 4295 0209 13       		.uleb128 0x13
 4296 020a 2F       		.uleb128 0x2f
 4297 020b 05       		.uleb128 0x5
 4298 020c 00       		.byte	0
 4299 020d 00       		.byte	0
 4300 020e 20       		.uleb128 0x20
 4301 020f 2E       		.uleb128 0x2e
 4302 0210 01       		.byte	0x1
 4303 0211 3F       		.uleb128 0x3f
 4304 0212 19       		.uleb128 0x19
 4305 0213 03       		.uleb128 0x3
 4306 0214 0E       		.uleb128 0xe
 4307 0215 3A       		.uleb128 0x3a
 4308 0216 0B       		.uleb128 0xb
 4309 0217 3B       		.uleb128 0x3b
 4310 0218 05       		.uleb128 0x5
 4311 0219 27       		.uleb128 0x27
 4312 021a 19       		.uleb128 0x19
 4313 021b 49       		.uleb128 0x49
 4314 021c 13       		.uleb128 0x13
 4315 021d 11       		.uleb128 0x11
 4316 021e 01       		.uleb128 0x1
 4317 021f 12       		.uleb128 0x12
 4318 0220 06       		.uleb128 0x6
 4319 0221 40       		.uleb128 0x40
 4320 0222 18       		.uleb128 0x18
 4321 0223 9642     		.uleb128 0x2116
 4322 0225 19       		.uleb128 0x19
 4323 0226 01       		.uleb128 0x1
 4324 0227 13       		.uleb128 0x13
 4325 0228 00       		.byte	0
 4326 0229 00       		.byte	0
 4327 022a 21       		.uleb128 0x21
 4328 022b 05       		.uleb128 0x5
 4329 022c 00       		.byte	0
 4330 022d 03       		.uleb128 0x3
 4331 022e 0E       		.uleb128 0xe
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 93


 4332 022f 3A       		.uleb128 0x3a
 4333 0230 0B       		.uleb128 0xb
 4334 0231 3B       		.uleb128 0x3b
 4335 0232 05       		.uleb128 0x5
 4336 0233 49       		.uleb128 0x49
 4337 0234 13       		.uleb128 0x13
 4338 0235 02       		.uleb128 0x2
 4339 0236 18       		.uleb128 0x18
 4340 0237 00       		.byte	0
 4341 0238 00       		.byte	0
 4342 0239 22       		.uleb128 0x22
 4343 023a 34       		.uleb128 0x34
 4344 023b 00       		.byte	0
 4345 023c 03       		.uleb128 0x3
 4346 023d 08       		.uleb128 0x8
 4347 023e 3A       		.uleb128 0x3a
 4348 023f 0B       		.uleb128 0xb
 4349 0240 3B       		.uleb128 0x3b
 4350 0241 05       		.uleb128 0x5
 4351 0242 49       		.uleb128 0x49
 4352 0243 13       		.uleb128 0x13
 4353 0244 02       		.uleb128 0x2
 4354 0245 18       		.uleb128 0x18
 4355 0246 00       		.byte	0
 4356 0247 00       		.byte	0
 4357 0248 23       		.uleb128 0x23
 4358 0249 34       		.uleb128 0x34
 4359 024a 00       		.byte	0
 4360 024b 03       		.uleb128 0x3
 4361 024c 0E       		.uleb128 0xe
 4362 024d 3A       		.uleb128 0x3a
 4363 024e 0B       		.uleb128 0xb
 4364 024f 3B       		.uleb128 0x3b
 4365 0250 05       		.uleb128 0x5
 4366 0251 49       		.uleb128 0x49
 4367 0252 13       		.uleb128 0x13
 4368 0253 3F       		.uleb128 0x3f
 4369 0254 19       		.uleb128 0x19
 4370 0255 3C       		.uleb128 0x3c
 4371 0256 19       		.uleb128 0x19
 4372 0257 00       		.byte	0
 4373 0258 00       		.byte	0
 4374 0259 24       		.uleb128 0x24
 4375 025a 34       		.uleb128 0x34
 4376 025b 00       		.byte	0
 4377 025c 03       		.uleb128 0x3
 4378 025d 0E       		.uleb128 0xe
 4379 025e 3A       		.uleb128 0x3a
 4380 025f 0B       		.uleb128 0xb
 4381 0260 3B       		.uleb128 0x3b
 4382 0261 0B       		.uleb128 0xb
 4383 0262 49       		.uleb128 0x49
 4384 0263 13       		.uleb128 0x13
 4385 0264 3F       		.uleb128 0x3f
 4386 0265 19       		.uleb128 0x19
 4387 0266 02       		.uleb128 0x2
 4388 0267 18       		.uleb128 0x18
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 94


 4389 0268 00       		.byte	0
 4390 0269 00       		.byte	0
 4391 026a 25       		.uleb128 0x25
 4392 026b 34       		.uleb128 0x34
 4393 026c 00       		.byte	0
 4394 026d 03       		.uleb128 0x3
 4395 026e 08       		.uleb128 0x8
 4396 026f 3A       		.uleb128 0x3a
 4397 0270 0B       		.uleb128 0xb
 4398 0271 3B       		.uleb128 0x3b
 4399 0272 0B       		.uleb128 0xb
 4400 0273 49       		.uleb128 0x49
 4401 0274 13       		.uleb128 0x13
 4402 0275 3F       		.uleb128 0x3f
 4403 0276 19       		.uleb128 0x19
 4404 0277 02       		.uleb128 0x2
 4405 0278 18       		.uleb128 0x18
 4406 0279 00       		.byte	0
 4407 027a 00       		.byte	0
 4408 027b 00       		.byte	0
 4409              		.section	.debug_aranges,"",%progbits
 4410 0000 8C000000 		.4byte	0x8c
 4411 0004 0200     		.2byte	0x2
 4412 0006 00000000 		.4byte	.Ldebug_info0
 4413 000a 04       		.byte	0x4
 4414 000b 00       		.byte	0
 4415 000c 0000     		.2byte	0
 4416 000e 0000     		.2byte	0
 4417 0010 00000000 		.4byte	.LFB64
 4418 0014 0C000000 		.4byte	.LFE64-.LFB64
 4419 0018 00000000 		.4byte	.LFB65
 4420 001c 2C010000 		.4byte	.LFE65-.LFB65
 4421 0020 00000000 		.4byte	.LFB66
 4422 0024 64000000 		.4byte	.LFE66-.LFB66
 4423 0028 00000000 		.4byte	.LFB67
 4424 002c 2A000000 		.4byte	.LFE67-.LFB67
 4425 0030 00000000 		.4byte	.LFB68
 4426 0034 50000000 		.4byte	.LFE68-.LFB68
 4427 0038 00000000 		.4byte	.LFB69
 4428 003c 48000000 		.4byte	.LFE69-.LFB69
 4429 0040 00000000 		.4byte	.LFB70
 4430 0044 1E000000 		.4byte	.LFE70-.LFB70
 4431 0048 00000000 		.4byte	.LFB71
 4432 004c 46000000 		.4byte	.LFE71-.LFB71
 4433 0050 00000000 		.4byte	.LFB72
 4434 0054 2C010000 		.4byte	.LFE72-.LFB72
 4435 0058 00000000 		.4byte	.LFB73
 4436 005c 1E000000 		.4byte	.LFE73-.LFB73
 4437 0060 00000000 		.4byte	.LFB74
 4438 0064 60040000 		.4byte	.LFE74-.LFB74
 4439 0068 00000000 		.4byte	.LFB75
 4440 006c 44000000 		.4byte	.LFE75-.LFB75
 4441 0070 00000000 		.4byte	.LFB76
 4442 0074 80030000 		.4byte	.LFE76-.LFB76
 4443 0078 00000000 		.4byte	.LFB77
 4444 007c 74000000 		.4byte	.LFE77-.LFB77
 4445 0080 00000000 		.4byte	.LFB78
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 95


 4446 0084 38010000 		.4byte	.LFE78-.LFB78
 4447 0088 00000000 		.4byte	0
 4448 008c 00000000 		.4byte	0
 4449              		.section	.debug_ranges,"",%progbits
 4450              	.Ldebug_ranges0:
 4451 0000 00000000 		.4byte	.LFB64
 4452 0004 0C000000 		.4byte	.LFE64
 4453 0008 00000000 		.4byte	.LFB65
 4454 000c 2C010000 		.4byte	.LFE65
 4455 0010 00000000 		.4byte	.LFB66
 4456 0014 64000000 		.4byte	.LFE66
 4457 0018 00000000 		.4byte	.LFB67
 4458 001c 2A000000 		.4byte	.LFE67
 4459 0020 00000000 		.4byte	.LFB68
 4460 0024 50000000 		.4byte	.LFE68
 4461 0028 00000000 		.4byte	.LFB69
 4462 002c 48000000 		.4byte	.LFE69
 4463 0030 00000000 		.4byte	.LFB70
 4464 0034 1E000000 		.4byte	.LFE70
 4465 0038 00000000 		.4byte	.LFB71
 4466 003c 46000000 		.4byte	.LFE71
 4467 0040 00000000 		.4byte	.LFB72
 4468 0044 2C010000 		.4byte	.LFE72
 4469 0048 00000000 		.4byte	.LFB73
 4470 004c 1E000000 		.4byte	.LFE73
 4471 0050 00000000 		.4byte	.LFB74
 4472 0054 60040000 		.4byte	.LFE74
 4473 0058 00000000 		.4byte	.LFB75
 4474 005c 44000000 		.4byte	.LFE75
 4475 0060 00000000 		.4byte	.LFB76
 4476 0064 80030000 		.4byte	.LFE76
 4477 0068 00000000 		.4byte	.LFB77
 4478 006c 74000000 		.4byte	.LFE77
 4479 0070 00000000 		.4byte	.LFB78
 4480 0074 38010000 		.4byte	.LFE78
 4481 0078 00000000 		.4byte	0
 4482 007c 00000000 		.4byte	0
 4483              		.section	.debug_line,"",%progbits
 4484              	.Ldebug_line0:
 4485 0000 37040000 		.section	.debug_str,"MS",%progbits,1
 4485      02001B02 
 4485      00000201 
 4485      FB0E0D00 
 4485      01010101 
 4486              	.LASF114:
 4487 0000 745F6D6F 		.ascii	"t_modem\000"
 4487      64656D00 
 4488              	.LASF12:
 4489 0008 75696E74 		.ascii	"uint16\000"
 4489      313600
 4490              	.LASF54:
 4491 000f 746D5F68 		.ascii	"tm_hour\000"
 4491      6F757200 
 4492              	.LASF37:
 4493 0017 6E756D5F 		.ascii	"num_invalid_readings\000"
 4493      696E7661 
 4493      6C69645F 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 96


 4493      72656164 
 4493      696E6773 
 4494              	.LASF167:
 4495 002c 433A5C55 		.ascii	"C:\\Users\\dantz\\Documents\\GitHub\\notoriOS\\noto"
 4495      73657273 
 4495      5C64616E 
 4495      747A5C44 
 4495      6F63756D 
 4496 0059 72694F53 		.ascii	"riOS.cydsn\000"
 4496      2E637964 
 4496      736E00
 4497              	.LASF146:
 4498 0064 62756666 		.ascii	"buffer_overflow\000"
 4498      65725F6F 
 4498      76657266 
 4498      6C6F7700 
 4499              	.LASF144:
 4500 0074 66696C65 		.ascii	"fileName\000"
 4500      4E616D65 
 4500      00
 4501              	.LASF0:
 4502 007d 7369676E 		.ascii	"signed char\000"
 4502      65642063 
 4502      68617200 
 4503              	.LASF86:
 4504 0089 636F756E 		.ascii	"countDownResetCondition\000"
 4504      74446F77 
 4504      6E526573 
 4504      6574436F 
 4504      6E646974 
 4505              	.LASF168:
 4506 00a1 57616B65 		.ascii	"Wakeup_ISR\000"
 4506      75705F49 
 4506      535200
 4507              	.LASF165:
 4508 00ac 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 4508      43313120 
 4508      352E342E 
 4508      31203230 
 4508      31363036 
 4509 00df 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 4509      20726576 
 4509      6973696F 
 4509      6E203233 
 4509      37373135 
 4510 0112 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 4510      66756E63 
 4510      74696F6E 
 4510      2D736563 
 4510      74696F6E 
 4511              	.LASF112:
 4512 013a 745F7072 		.ascii	"t_pressure\000"
 4512      65737375 
 4512      726500
 4513              	.LASF27:
 4514 0145 4D6F6E74 		.ascii	"Month\000"
 4514      6800
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 97


 4515              	.LASF7:
 4516 014b 6C6F6E67 		.ascii	"long long unsigned int\000"
 4516      206C6F6E 
 4516      6720756E 
 4516      7369676E 
 4516      65642069 
 4517              	.LASF23:
 4518 0162 486F7572 		.ascii	"Hour\000"
 4518      00
 4519              	.LASF150:
 4520 0167 6D6F6465 		.ascii	"modem_state\000"
 4520      6D5F7374 
 4520      61746500 
 4521              	.LASF159:
 4522 0173 616C6172 		.ascii	"alarmMeasure\000"
 4522      6D4D6561 
 4522      73757265 
 4522      00
 4523              	.LASF145:
 4524 0180 49544D5F 		.ascii	"ITM_RxBuffer\000"
 4524      52784275 
 4524      66666572 
 4524      00
 4525              	.LASF109:
 4526 018d 745F6C65 		.ascii	"t_level_sensor\000"
 4526      76656C5F 
 4526      73656E73 
 4526      6F7200
 4527              	.LASF6:
 4528 019c 6C6F6E67 		.ascii	"long long int\000"
 4528      206C6F6E 
 4528      6720696E 
 4528      7400
 4529              	.LASF122:
 4530 01aa 7061636B 		.ascii	"packets\000"
 4530      65747300 
 4531              	.LASF70:
 4532 01b2 65636E6F 		.ascii	"ecno\000"
 4532      00
 4533              	.LASF160:
 4534 01b7 74696D65 		.ascii	"timeToMeasure\000"
 4534      546F4D65 
 4534      61737572 
 4534      6500
 4535              	.LASF73:
 4536 01c5 74696D65 		.ascii	"time_to_network_connect\000"
 4536      5F746F5F 
 4536      6E657477 
 4536      6F726B5F 
 4536      636F6E6E 
 4537              	.LASF162:
 4538 01dd 74696D65 		.ascii	"timeToSync\000"
 4538      546F5379 
 4538      6E6300
 4539              	.LASF40:
 4540 01e8 766F6C74 		.ascii	"voltage_solar\000"
 4540      6167655F 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 98


 4540      736F6C61 
 4540      7200
 4541              	.LASF41:
 4542 01f6 766F6C74 		.ascii	"voltage_charge_current\000"
 4542      6167655F 
 4542      63686172 
 4542      67655F63 
 4542      75727265 
 4543              	.LASF143:
 4544 020d 75706772 		.ascii	"upgrade_status\000"
 4544      6164655F 
 4544      73746174 
 4544      757300
 4545              	.LASF125:
 4546 021c 635F6461 		.ascii	"c_data_count_sent\000"
 4546      74615F63 
 4546      6F756E74 
 4546      5F73656E 
 4546      7400
 4547              	.LASF67:
 4548 022e 6D6F6465 		.ascii	"modem_info_t\000"
 4548      6D5F696E 
 4548      666F5F74 
 4548      00
 4549              	.LASF68:
 4550 023b 72786C65 		.ascii	"rxlev\000"
 4550      7600
 4551              	.LASF4:
 4552 0241 6C6F6E67 		.ascii	"long int\000"
 4552      20696E74 
 4552      00
 4553              	.LASF74:
 4554 024a 74696D65 		.ascii	"time_to_acquire_ip\000"
 4554      5F746F5F 
 4554      61637175 
 4554      6972655F 
 4554      697000
 4555              	.LASF87:
 4556 025d 616C6172 		.ascii	"alarm\000"
 4556      6D00
 4557              	.LASF48:
 4558 0263 70726573 		.ascii	"pressure_voltage_off\000"
 4558      73757265 
 4558      5F766F6C 
 4558      74616765 
 4558      5F6F6666 
 4559              	.LASF11:
 4560 0278 75696E74 		.ascii	"uint8\000"
 4560      3800
 4561              	.LASF117:
 4562 027e 635F7472 		.ascii	"c_try_counter\000"
 4562      795F636F 
 4562      756E7465 
 4562      7200
 4563              	.LASF128:
 4564 028c 73656E64 		.ascii	"send_time\000"
 4564      5F74696D 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 99


 4564      6500
 4565              	.LASF16:
 4566 0296 696E7433 		.ascii	"int32\000"
 4566      3200
 4567              	.LASF76:
 4568 029c 6E6F6465 		.ascii	"node_type\000"
 4568      5F747970 
 4568      6500
 4569              	.LASF115:
 4570 02a6 73796E63 		.ascii	"syncData\000"
 4570      44617461 
 4570      00
 4571              	.LASF123:
 4572 02af 6E657477 		.ascii	"network_time\000"
 4572      6F726B5F 
 4572      74696D65 
 4572      00
 4573              	.LASF13:
 4574 02bc 75696E74 		.ascii	"uint32\000"
 4574      333200
 4575              	.LASF65:
 4576 02c3 6D6F6465 		.ascii	"model_id\000"
 4576      6C5F6964 
 4576      00
 4577              	.LASF34:
 4578 02cc 616C6C5F 		.ascii	"all_level_readings\000"
 4578      6C657665 
 4578      6C5F7265 
 4578      6164696E 
 4578      677300
 4579              	.LASF83:
 4580 02df 636F756E 		.ascii	"countDownValue\000"
 4580      74446F77 
 4580      6E56616C 
 4580      756500
 4581              	.LASF139:
 4582 02ee 75706772 		.ascii	"upgraded\000"
 4582      61646564 
 4582      00
 4583              	.LASF56:
 4584 02f7 746D5F6D 		.ascii	"tm_mon\000"
 4584      6F6E00
 4585              	.LASF80:
 4586 02fe 64656275 		.ascii	"debug_level\000"
 4586      675F6C65 
 4586      76656C00 
 4587              	.LASF141:
 4588 030a 706F7274 		.ascii	"port\000"
 4588      00
 4589              	.LASF61:
 4590 030f 76616C75 		.ascii	"value\000"
 4590      6500
 4591              	.LASF140:
 4592 0315 686F7374 		.ascii	"host\000"
 4592      00
 4593              	.LASF57:
 4594 031a 746D5F79 		.ascii	"tm_year\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 100


 4594      65617200 
 4595              	.LASF161:
 4596 0322 616C6172 		.ascii	"alarmSync\000"
 4596      6D53796E 
 4596      6300
 4597              	.LASF47:
 4598 032c 70726573 		.ascii	"pressure_voltage_on\000"
 4598      73757265 
 4598      5F766F6C 
 4598      74616765 
 4598      5F6F6E00 
 4599              	.LASF8:
 4600 0340 756E7369 		.ascii	"unsigned int\000"
 4600      676E6564 
 4600      20696E74 
 4600      00
 4601              	.LASF137:
 4602 034d 73657454 		.ascii	"setTime\000"
 4602      696D6500 
 4603              	.LASF63:
 4604 0355 6B65795F 		.ascii	"key_value_t\000"
 4604      76616C75 
 4604      655F7400 
 4605              	.LASF99:
 4606 0361 41796F49 		.ascii	"AyoItsTime\000"
 4606      74735469 
 4606      6D6500
 4607              	.LASF36:
 4608 036c 6E756D5F 		.ascii	"num_valid_readings\000"
 4608      76616C69 
 4608      645F7265 
 4608      6164696E 
 4608      677300
 4609              	.LASF127:
 4610 037f 68747470 		.ascii	"http_chunk\000"
 4610      5F636875 
 4610      6E6B00
 4611              	.LASF133:
 4612 038a 6D5F766F 		.ascii	"m_voltage\000"
 4612      6C746167 
 4612      6500
 4613              	.LASF5:
 4614 0394 6C6F6E67 		.ascii	"long unsigned int\000"
 4614      20756E73 
 4614      69676E65 
 4614      6420696E 
 4614      7400
 4615              	.LASF96:
 4616 03a6 7472795F 		.ascii	"try_counter\000"
 4616      636F756E 
 4616      74657200 
 4617              	.LASF118:
 4618 03b2 64617461 		.ascii	"data_count_desired\000"
 4618      5F636F75 
 4618      6E745F64 
 4618      65736972 
 4618      656400
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 101


 4619              	.LASF39:
 4620 03c5 766F6C74 		.ascii	"voltage_battery\000"
 4620      6167655F 
 4620      62617474 
 4620      65727900 
 4621              	.LASF25:
 4622 03d5 4461794F 		.ascii	"DayOfMonth\000"
 4622      664D6F6E 
 4622      746800
 4623              	.LASF131:
 4624 03e0 6D616B65 		.ascii	"makeMeasurements\000"
 4624      4D656173 
 4624      7572656D 
 4624      656E7473 
 4624      00
 4625              	.LASF149:
 4626 03f1 64617461 		.ascii	"data\000"
 4626      00
 4627              	.LASF92:
 4628 03f6 65705F70 		.ascii	"ep_port\000"
 4628      6F727400 
 4629              	.LASF60:
 4630 03fe 746D5F69 		.ascii	"tm_isdst\000"
 4630      73647374 
 4630      00
 4631              	.LASF88:
 4632 0407 6D6F6465 		.ascii	"modem_info\000"
 4632      6D5F696E 
 4632      666F00
 4633              	.LASF91:
 4634 0412 65705F68 		.ascii	"ep_host\000"
 4634      6F737400 
 4635              	.LASF14:
 4636 041a 696E7438 		.ascii	"int8\000"
 4636      00
 4637              	.LASF98:
 4638 041f 576F726B 		.ascii	"WorkWorkWorkWorkWorkWork\000"
 4638      576F726B 
 4638      576F726B 
 4638      576F726B 
 4638      576F726B 
 4639              	.LASF119:
 4640 0438 635F6461 		.ascii	"c_data_count_desired\000"
 4640      74615F63 
 4640      6F756E74 
 4640      5F646573 
 4640      69726564 
 4641              	.LASF113:
 4642 044d 745F7364 		.ascii	"t_sd_card\000"
 4642      5F636172 
 4642      6400
 4643              	.LASF2:
 4644 0457 73686F72 		.ascii	"short int\000"
 4644      7420696E 
 4644      7400
 4645              	.LASF136:
 4646 0461 76616C76 		.ascii	"valve_position\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 102


 4646      655F706F 
 4646      73697469 
 4646      6F6E00
 4647              	.LASF151:
 4648 0470 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 4648      6D5F7374 
 4648      6172745F 
 4648      74696D65 
 4648      5F737461 
 4649              	.LASF90:
 4650 0487 7379735F 		.ascii	"sys_info_t\000"
 4650      696E666F 
 4650      5F7400
 4651              	.LASF82:
 4652 0492 75706461 		.ascii	"updatable_parameters_t\000"
 4652      7461626C 
 4652      655F7061 
 4652      72616D65 
 4652      74657273 
 4653              	.LASF100:
 4654 04a9 616C6172 		.ascii	"alarmType\000"
 4654      6D547970 
 4654      6500
 4655              	.LASF147:
 4656 04b3 64617461 		.ascii	"dataPointsInStack\000"
 4656      506F696E 
 4656      7473496E 
 4656      53746163 
 4656      6B00
 4657              	.LASF53:
 4658 04c5 746D5F6D 		.ascii	"tm_min\000"
 4658      696E00
 4659              	.LASF17:
 4660 04cc 666C6F61 		.ascii	"float32\000"
 4660      74333200 
 4661              	.LASF101:
 4662 04d4 616C6172 		.ascii	"alarmToBeUpdated\000"
 4662      6D546F42 
 4662      65557064 
 4662      61746564 
 4662      00
 4663              	.LASF22:
 4664 04e5 73697A65 		.ascii	"sizetype\000"
 4664      74797065 
 4664      00
 4665              	.LASF59:
 4666 04ee 746D5F79 		.ascii	"tm_yday\000"
 4666      64617900 
 4667              	.LASF93:
 4668 04f6 7379735F 		.ascii	"sys_settings_t\000"
 4668      73657474 
 4668      696E6773 
 4668      5F7400
 4669              	.LASF138:
 4670 0505 6C6F6361 		.ascii	"localTime\000"
 4670      6C54696D 
 4670      6500
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 103


 4671              	.LASF163:
 4672 050f 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 4672      546F5379 
 4672      636E5265 
 4672      6D6F7465 
 4672      50617261 
 4673              	.LASF62:
 4674 0526 74696D65 		.ascii	"timeStamp\000"
 4674      5374616D 
 4674      7000
 4675              	.LASF29:
 4676 0530 5254435F 		.ascii	"RTC_TIME_DATE\000"
 4676      54494D45 
 4676      5F444154 
 4676      4500
 4677              	.LASF153:
 4678 053e 75706461 		.ascii	"updatable_parameters\000"
 4678      7461626C 
 4678      655F7061 
 4678      72616D65 
 4678      74657273 
 4679              	.LASF105:
 4680 0553 43726561 		.ascii	"CreateAlarm\000"
 4680      7465416C 
 4680      61726D00 
 4681              	.LASF126:
 4682 055f 7061636B 		.ascii	"packet\000"
 4682      657400
 4683              	.LASF116:
 4684 0566 735F7273 		.ascii	"s_rsrp\000"
 4684      727000
 4685              	.LASF42:
 4686 056d 766F6C74 		.ascii	"voltage_pressure\000"
 4686      6167655F 
 4686      70726573 
 4686      73757265 
 4686      00
 4687              	.LASF154:
 4688 057e 68747470 		.ascii	"http_request\000"
 4688      5F726571 
 4688      75657374 
 4688      00
 4689              	.LASF18:
 4690 058b 666C6F61 		.ascii	"float\000"
 4690      7400
 4691              	.LASF38:
 4692 0591 6C657665 		.ascii	"level_sensor_t\000"
 4692      6C5F7365 
 4692      6E736F72 
 4692      5F7400
 4693              	.LASF130:
 4694 05a0 636F6E66 		.ascii	"configureRemoteParams\000"
 4694      69677572 
 4694      6552656D 
 4694      6F746550 
 4694      6172616D 
 4695              	.LASF164:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 104


 4696 05b6 44617461 		.ascii	"Data_fileName\000"
 4696      5F66696C 
 4696      654E616D 
 4696      6500
 4697              	.LASF97:
 4698 05c4 6D6F6465 		.ascii	"modem_status\000"
 4698      6D5F7374 
 4698      61747573 
 4698      00
 4699              	.LASF30:
 4700 05d1 74657374 		.ascii	"test_name\000"
 4700      5F6E616D 
 4700      6500
 4701              	.LASF28:
 4702 05db 59656172 		.ascii	"Year\000"
 4702      00
 4703              	.LASF81:
 4704 05e0 5F426F6F 		.ascii	"_Bool\000"
 4704      6C00
 4705              	.LASF10:
 4706 05e6 696E7433 		.ascii	"int32_t\000"
 4706      325F7400 
 4707              	.LASF1:
 4708 05ee 756E7369 		.ascii	"unsigned char\000"
 4708      676E6564 
 4708      20636861 
 4708      7200
 4709              	.LASF142:
 4710 05fc 726F7574 		.ascii	"route\000"
 4710      6500
 4711              	.LASF158:
 4712 0602 73797374 		.ascii	"system_settings\000"
 4712      656D5F73 
 4712      65747469 
 4712      6E677300 
 4713              	.LASF72:
 4714 0612 72737270 		.ascii	"rsrp\000"
 4714      00
 4715              	.LASF71:
 4716 0617 72737271 		.ascii	"rsrq\000"
 4716      00
 4717              	.LASF102:
 4718 061c 52657365 		.ascii	"ResetAlarm\000"
 4718      74416C61 
 4718      726D00
 4719              	.LASF129:
 4720 0627 735F7365 		.ascii	"s_send_time\000"
 4720      6E645F74 
 4720      696D6500 
 4721              	.LASF79:
 4722 0633 73796E63 		.ascii	"sync_time\000"
 4722      5F74696D 
 4722      6500
 4723              	.LASF50:
 4724 063d 70726573 		.ascii	"pressure_depth\000"
 4724      73757265 
 4724      5F646570 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 105


 4724      746800
 4725              	.LASF69:
 4726 064c 72736370 		.ascii	"rscp\000"
 4726      00
 4727              	.LASF24:
 4728 0651 4461794F 		.ascii	"DayOfWeek\000"
 4728      66576565 
 4728      6B00
 4729              	.LASF33:
 4730 065b 74657374 		.ascii	"test_t\000"
 4730      5F7400
 4731              	.LASF157:
 4732 0662 73797374 		.ascii	"system_info\000"
 4732      656D5F69 
 4732      6E666F00 
 4733              	.LASF66:
 4734 066e 696D6569 		.ascii	"imei\000"
 4734      00
 4735              	.LASF32:
 4736 0673 72656173 		.ascii	"reason\000"
 4736      6F6E00
 4737              	.LASF103:
 4738 067a 616C6172 		.ascii	"alarmToBeReset\000"
 4738      6D546F42 
 4738      65526573 
 4738      657400
 4739              	.LASF108:
 4740 0689 43686963 		.ascii	"ChickityCheckYourselfBeforeYouWreckYourself\000"
 4740      6B697479 
 4740      43686563 
 4740      6B596F75 
 4740      7273656C 
 4741              	.LASF124:
 4742 06b5 64617461 		.ascii	"data_count_sent\000"
 4742      5F636F75 
 4742      6E745F73 
 4742      656E7400 
 4743              	.LASF75:
 4744 06c5 6D6F6465 		.ascii	"modem_stats_t\000"
 4744      6D5F7374 
 4744      6174735F 
 4744      7400
 4745              	.LASF49:
 4746 06d3 70726573 		.ascii	"pressure_current\000"
 4746      73757265 
 4746      5F637572 
 4746      72656E74 
 4746      00
 4747              	.LASF45:
 4748 06e4 76616C69 		.ascii	"valid\000"
 4748      6400
 4749              	.LASF58:
 4750 06ea 746D5F77 		.ascii	"tm_wday\000"
 4750      64617900 
 4751              	.LASF21:
 4752 06f2 6C6F6E67 		.ascii	"long double\000"
 4752      20646F75 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 106


 4752      626C6500 
 4753              	.LASF121:
 4754 06fe 6368756E 		.ascii	"chunk\000"
 4754      6B00
 4755              	.LASF132:
 4756 0704 635F7469 		.ascii	"c_timeStamp\000"
 4756      6D655374 
 4756      616D7000 
 4757              	.LASF20:
 4758 0710 63686172 		.ascii	"char\000"
 4758      00
 4759              	.LASF44:
 4760 0715 766F6C74 		.ascii	"voltage_valve_pot_power\000"
 4760      6167655F 
 4760      76616C76 
 4760      655F706F 
 4760      745F706F 
 4761              	.LASF152:
 4762 072d 6D6F6465 		.ascii	"modem_stats\000"
 4762      6D5F7374 
 4762      61747300 
 4763              	.LASF156:
 4764 0739 68747470 		.ascii	"http_route\000"
 4764      5F726F75 
 4764      746500
 4765              	.LASF120:
 4766 0744 706F7274 		.ascii	"portConfig\000"
 4766      436F6E66 
 4766      696700
 4767              	.LASF9:
 4768 074f 5F5F696E 		.ascii	"__int32_t\000"
 4768      7433325F 
 4768      7400
 4769              	.LASF94:
 4770 0759 756E6971 		.ascii	"uniqueId\000"
 4770      75654964 
 4770      00
 4771              	.LASF78:
 4772 0762 6D656173 		.ascii	"measure_time\000"
 4772      7572655F 
 4772      74696D65 
 4772      00
 4773              	.LASF134:
 4774 076f 6D5F6C65 		.ascii	"m_level_sensor\000"
 4774      76656C5F 
 4774      73656E73 
 4774      6F7200
 4775              	.LASF35:
 4776 077e 6C657665 		.ascii	"level_reading\000"
 4776      6C5F7265 
 4776      6164696E 
 4776      6700
 4777              	.LASF169:
 4778 078c 4C617942 		.ascii	"LayBack\000"
 4778      61636B00 
 4779              	.LASF3:
 4780 0794 73686F72 		.ascii	"short unsigned int\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 107


 4780      7420756E 
 4780      7369676E 
 4780      65642069 
 4780      6E7400
 4781              	.LASF64:
 4782 07a7 73696D5F 		.ascii	"sim_id\000"
 4782      696400
 4783              	.LASF55:
 4784 07ae 746D5F6D 		.ascii	"tm_mday\000"
 4784      64617900 
 4785              	.LASF106:
 4786 07b6 6E657741 		.ascii	"newAlarm\000"
 4786      6C61726D 
 4786      00
 4787              	.LASF52:
 4788 07bf 746D5F73 		.ascii	"tm_sec\000"
 4788      656300
 4789              	.LASF135:
 4790 07c6 6D5F7072 		.ascii	"m_pressure\000"
 4790      65737375 
 4790      726500
 4791              	.LASF31:
 4792 07d1 73746174 		.ascii	"status\000"
 4792      757300
 4793              	.LASF148:
 4794 07d8 64617461 		.ascii	"dataPointsInStackDesired\000"
 4794      506F696E 
 4794      7473496E 
 4794      53746163 
 4794      6B446573 
 4795              	.LASF111:
 4796 07f1 745F766F 		.ascii	"t_voltages\000"
 4796      6C746167 
 4796      657300
 4797              	.LASF166:
 4798 07fc 6E6F746F 		.ascii	"notoriOS.c\000"
 4798      72694F53 
 4798      2E6300
 4799              	.LASF155:
 4800 0807 68747470 		.ascii	"http_body\000"
 4800      5F626F64 
 4800      7900
 4801              	.LASF15:
 4802 0811 696E7431 		.ascii	"int16\000"
 4802      3600
 4803              	.LASF85:
 4804 0817 636F756E 		.ascii	"countDownType\000"
 4804      74446F77 
 4804      6E547970 
 4804      6500
 4805              	.LASF84:
 4806 0825 63757272 		.ascii	"currentCountDownValue\000"
 4806      656E7443 
 4806      6F756E74 
 4806      446F776E 
 4806      56616C75 
 4807              	.LASF77:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccdq5UlL.s 			page 108


 4808 083b 73696D5F 		.ascii	"sim_type\000"
 4808      74797065 
 4808      00
 4809              	.LASF95:
 4810 0844 635F6865 		.ascii	"c_hey\000"
 4810      7900
 4811              	.LASF43:
 4812 084a 766F6C74 		.ascii	"voltage_valve_pos\000"
 4812      6167655F 
 4812      76616C76 
 4812      655F706F 
 4812      7300
 4813              	.LASF26:
 4814 085c 4461794F 		.ascii	"DayOfYear\000"
 4814      66596561 
 4814      7200
 4815              	.LASF51:
 4816 0866 70726573 		.ascii	"pressure_t\000"
 4816      73757265 
 4816      5F7400
 4817              	.LASF104:
 4818 0871 416C6172 		.ascii	"AlarmReady\000"
 4818      6D526561 
 4818      647900
 4819              	.LASF107:
 4820 087c 52656164 		.ascii	"ReadyOrNot\000"
 4820      794F724E 
 4820      6F7400
 4821              	.LASF170:
 4822 0887 6D61696E 		.ascii	"main\000"
 4822      00
 4823              	.LASF89:
 4824 088c 63686970 		.ascii	"chip_uniqueId\000"
 4824      5F756E69 
 4824      71756549 
 4824      6400
 4825              	.LASF110:
 4826 089a 745F7661 		.ascii	"t_valve\000"
 4826      6C766500 
 4827              	.LASF19:
 4828 08a2 646F7562 		.ascii	"double\000"
 4828      6C6500
 4829              	.LASF46:
 4830 08a9 766F6C74 		.ascii	"voltage_t\000"
 4830      6167655F 
 4830      7400
 4831              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
