ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"notoriOS.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	level_sensor_inbox,100,4
  20              		.comm	level_sensor_enabled,1,1
  21              		.comm	downstream_level_sensor_inbox,100,4
  22              		.comm	downstream_level_sensor_enabled,1,1
  23              		.comm	buffer_overflow,1,1
  24              		.comm	dataPointsInStack,2,2
  25              		.comm	dataPointsInStackDesired,2,2
  26              		.comm	data,6600,4
  27              		.comm	modem_state,1,1
  28              		.comm	modem_start_time_stamp,4,4
  29              		.comm	modem_info,60,4
  30              		.comm	modem_stats,32,4
  31              		.comm	updatable_parameters,8,4
  32              		.syntax unified
  33              		.global _printf_float
  34              		.thumb
  35              		.syntax unified
  36              		.comm	App_LED_enabled,1,1
  37              		.comm	app_led_inbox,100,4
  38              		.comm	http_request,10000,4
  39              		.comm	http_body,10000,4
  40              		.comm	http_route,200,4
  41              		.comm	system_info,28,4
  42              		.comm	system_settings,104,4
  43              		.comm	alarmMeasure,6,4
  44              		.comm	timeToMeasure,1,1
  45              		.comm	alarmSync,6,4
  46              		.comm	timeToSync,1,1
  47              		.comm	timeToSycnRemoteParams,1,1
  48              		.comm	hey,1,1
  49              		.comm	alarmAppLED,6,4
  50              		.comm	timeToAppLED,1,1
  51              		.comm	alarmLevelSensor,6,4
  52              		.comm	timetoLevelSensor,1,1
  53              		.comm	alarmDownstreamLevelSensor,6,4
  54              		.comm	timetoDownstreamLevelSensor,1,1
  55              		.section	.text.Wakeup_ISR,"ax",%progbits
  56              		.align	2
  57              		.global	Wakeup_ISR
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 2


  58              		.thumb
  59              		.thumb_func
  60              		.type	Wakeup_ISR, %function
  61              	Wakeup_ISR:
  62              	.LFB64:
  63              		.file 1 "notoriOS.c"
   1:notoriOS.c    **** /* ========================================
   2:notoriOS.c    ****  *
   3:notoriOS.c    ****  * OPEN-STORM.ORG
   4:notoriOS.c    ****  * notoriOS
   5:notoriOS.c    ****  * A non-premptive operating system for node.
   6:notoriOS.c    ****  *
   7:notoriOS.c    ****  * "To all the teachers that told me I'd never amount to nothin"
   8:notoriOS.c    ****  *      -Notorious BIG (1994)
   9:notoriOS.c    ****  *
  10:notoriOS.c    ****  * ========================================
  11:notoriOS.c    **** */
  12:notoriOS.c    **** 
  13:notoriOS.c    **** #include "notoriOS.h"
  14:notoriOS.c    **** 
  15:notoriOS.c    **** 
  16:notoriOS.c    **** // This function must always be called (when the Sleep Timer's interrupt
  17:notoriOS.c    **** // is disabled or enabled) after wake up to clear the ctw_int status bit.
  18:notoriOS.c    **** // It is required to call SleepTimer_GetStatus() within 1 ms (1 clock cycle
  19:notoriOS.c    **** // of the ILO) after CTW event occurred.
  20:notoriOS.c    **** CY_ISR(Wakeup_ISR) {
  64              		.loc 1 20 0
  65              		.cfi_startproc
  66              		@ args = 0, pretend = 0, frame = 0
  67              		@ frame_needed = 1, uses_anonymous_args = 0
  68 0000 80B5     		push	{r7, lr}
  69              		.cfi_def_cfa_offset 8
  70              		.cfi_offset 7, -8
  71              		.cfi_offset 14, -4
  72 0002 00AF     		add	r7, sp, #0
  73              		.cfi_def_cfa_register 7
  21:notoriOS.c    ****     // Returns the state of the Sleep Timer's status register, and clears the pending interrupt sta
  22:notoriOS.c    ****     SleepTimer_GetStatus();
  74              		.loc 1 22 0
  75 0004 FFF7FEFF 		bl	SleepTimer_GetStatus
  23:notoriOS.c    **** }
  76              		.loc 1 23 0
  77 0008 00BF     		nop
  78 000a 80BD     		pop	{r7, pc}
  79              		.cfi_endproc
  80              	.LFE64:
  81              		.size	Wakeup_ISR, .-Wakeup_ISR
  82              		.global	Data_fileName
  83              		.data
  84              		.align	2
  85              		.type	Data_fileName, %object
  86              		.size	Data_fileName, 30
  87              	Data_fileName:
  88 0000 64617461 		.ascii	"data.txt\000"
  88      2E747874 
  88      00
  89 0009 00000000 		.space	21
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 3


  89      00000000 
  89      00000000 
  89      00000000 
  89      00000000 
  90              		.comm	try_counter,1,1
  91              		.section	.rodata
  92              		.align	2
  93              	.LC0:
  94 0000 25582D25 		.ascii	"%X-%X\000"
  94      5800
  95 0006 0000     		.align	2
  96              	.LC1:
  97 0008 6563322D 		.ascii	"ec2-18-222-229-124.us-east-2.compute.amazonaws.com\000"
  97      31382D32 
  97      32322D32 
  97      32392D31 
  97      32342E75 
  98              		.section	.text.ReadyOrNot,"ax",%progbits
  99              		.align	2
 100              		.global	ReadyOrNot
 101              		.thumb
 102              		.thumb_func
 103              		.type	ReadyOrNot, %function
 104              	ReadyOrNot:
 105              	.LFB65:
  24:notoriOS.c    **** 
  25:notoriOS.c    **** 
  26:notoriOS.c    **** uint8 syncData();               // Syncs data with server 
  27:notoriOS.c    **** uint8 configureRemoteParams();  // Syncs RTC with cell network and obtains meta-DB params
  28:notoriOS.c    **** uint8 makeMeasurements();       // Takes sensor measurements
  29:notoriOS.c    **** char  Data_fileName[30] = "data.txt";
  30:notoriOS.c    **** uint8 try_counter;
  31:notoriOS.c    **** 
  32:notoriOS.c    **** 
  33:notoriOS.c    **** // ==============================================
  34:notoriOS.c    **** // Ready or not, here I come, you can't hide
  35:notoriOS.c    **** // Gonna find you and take it slowly
  36:notoriOS.c    **** //      - The Fugees (1996)
  37:notoriOS.c    **** //
  38:notoriOS.c    **** // Initialize and critical hardware or routines 
  39:notoriOS.c    **** // ==============================================
  40:notoriOS.c    **** void ReadyOrNot()
  41:notoriOS.c    **** {
 106              		.loc 1 41 0
 107              		.cfi_startproc
 108              		@ args = 0, pretend = 0, frame = 24
 109              		@ frame_needed = 1, uses_anonymous_args = 0
 110 0000 B0B5     		push	{r4, r5, r7, lr}
 111              		.cfi_def_cfa_offset 16
 112              		.cfi_offset 4, -16
 113              		.cfi_offset 5, -12
 114              		.cfi_offset 7, -8
 115              		.cfi_offset 14, -4
 116 0002 88B0     		sub	sp, sp, #32
 117              		.cfi_def_cfa_offset 48
 118 0004 02AF     		add	r7, sp, #8
 119              		.cfi_def_cfa 7, 40
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 4


  42:notoriOS.c    ****     
  43:notoriOS.c    ****     isr_SleepTimer_StartEx(Wakeup_ISR); // Start Sleep ISR
 120              		.loc 1 43 0
 121 0006 4C48     		ldr	r0, .L3
 122 0008 FFF7FEFF 		bl	isr_SleepTimer_StartEx
  44:notoriOS.c    ****     SleepTimer_Start();                 // Start SleepTimer Component
 123              		.loc 1 44 0
 124 000c FFF7FEFF 		bl	SleepTimer_Start
  45:notoriOS.c    ****     
  46:notoriOS.c    ****     RTC_WriteIntervalMask(0b11111111);  // Configures what interval handlers will be called from th
 125              		.loc 1 46 0
 126 0010 FF20     		movs	r0, #255
 127 0012 FFF7FEFF 		bl	RTC_WriteIntervalMask
  47:notoriOS.c    ****     RTC_Start();                        // Enables the RTC component
 128              		.loc 1 47 0
 129 0016 FFF7FEFF 		bl	RTC_Start
  48:notoriOS.c    ****     debug_start();                      // Start UART debug
 130              		.loc 1 48 0
 131 001a FFF7FEFF 		bl	debug_start
  49:notoriOS.c    ****     
  50:notoriOS.c    ****     modem_initialize();                 // Initialize the modem
 132              		.loc 1 50 0
 133 001e FFF7FEFF 		bl	modem_initialize
  51:notoriOS.c    ****     
  52:notoriOS.c    ****     updatable_parameters_initialize();  // Initialize sampling, measurement, and debug frequencies 
 134              		.loc 1 52 0
 135 0022 FFF7FEFF 		bl	updatable_parameters_initialize
  53:notoriOS.c    ****    
  54:notoriOS.c    ****     
  55:notoriOS.c    ****     // Collect system info and store in struct (modem ID, silicon ID, etc)
  56:notoriOS.c    ****       /* An array of char elements for the resulting string to be stored */
  57:notoriOS.c    ****     
  58:notoriOS.c    ****     
  59:notoriOS.c    ****     // Get unique ID of PSOC chip, this can be concatenated with the MODEM IDs to generate a unique
  60:notoriOS.c    ****     uint32 uniqueId[2];
  61:notoriOS.c    ****     // Returns the 64-bit unique ID of the device.
  62:notoriOS.c    ****     CyGetUniqueId(uniqueId); 
 136              		.loc 1 62 0
 137 0026 07F10C03 		add	r3, r7, #12
 138 002a 1846     		mov	r0, r3
 139 002c FFF7FEFF 		bl	CyGetUniqueId
  63:notoriOS.c    ****     snprintf(system_info.chip_uniqueId,sizeof(system_info.chip_uniqueId),"%X-%X",(unsigned int)uniq
 140              		.loc 1 63 0
 141 0030 FA68     		ldr	r2, [r7, #12]
 142 0032 3B69     		ldr	r3, [r7, #16]
 143 0034 0093     		str	r3, [sp]
 144 0036 1346     		mov	r3, r2
 145 0038 404A     		ldr	r2, .L3+4
 146 003a 1821     		movs	r1, #24
 147 003c 4048     		ldr	r0, .L3+8
 148 003e FFF7FEFF 		bl	snprintf
  64:notoriOS.c    ****     // The modem will track/popualte it's own IDs, so just point to them for now
  65:notoriOS.c    ****     system_info.modem_info = &modem_info;
 149              		.loc 1 65 0
 150 0042 404B     		ldr	r3, .L3+12
 151 0044 404A     		ldr	r2, .L3+16
 152 0046 1A60     		str	r2, [r3]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 5


  66:notoriOS.c    ****     
  67:notoriOS.c    ****     // Configure server endpoints -- these should obviosuly be provided  remotely by the meta data-
  68:notoriOS.c    ****     // testing server - travis and meagan june of 2022
  69:notoriOS.c    ****     snprintf(system_settings.ep_host,sizeof(system_settings.ep_host),"%s","ec2-18-222-229-124.us-ea
 153              		.loc 1 69 0
 154 0048 404A     		ldr	r2, .L3+20
 155 004a 414B     		ldr	r3, .L3+24
 156 004c 1446     		mov	r4, r2
 157 004e 1D46     		mov	r5, r3
 158 0050 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 159 0052 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 160 0054 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 161 0056 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 162 0058 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 163 005a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 164 005c 2B68     		ldr	r3, [r5]
 165 005e 1A46     		mov	r2, r3	@ movhi
 166 0060 2280     		strh	r2, [r4]	@ movhi
 167 0062 0234     		adds	r4, r4, #2
 168 0064 1B0C     		lsrs	r3, r3, #16
 169 0066 2370     		strb	r3, [r4]
  70:notoriOS.c    ****     
  71:notoriOS.c    ****     // production server
  72:notoriOS.c    ****     //snprintf(system_settings.ep_host,sizeof(system_settings.ep_host),"%s","malcom.open-storm.org"
  73:notoriOS.c    ****     
  74:notoriOS.c    **** 
  75:notoriOS.c    ****     system_settings.ep_port = 5000;
 170              		.loc 1 75 0
 171 0068 384B     		ldr	r3, .L3+20
 172 006a 41F28832 		movw	r2, #5000
 173 006e 5A66     		str	r2, [r3, #100]
  76:notoriOS.c    ****     // Don't need the following for new nodes
  77:notoriOS.c    ****     //snprintf(system_settings.ep_user,sizeof(system_settings.ep_user),"%s","generic_node");
  78:notoriOS.c    ****     //snprintf(system_settings.ep_pswd,sizeof(system_settings.ep_pswd),"%s","MakeFloodsCurrents");
  79:notoriOS.c    ****     //snprintf(system_settings.ep_database,sizeof(system_settings.ep_database),"%s","ARB");
  80:notoriOS.c    ****     //snprintf(system_settings.node_id,sizeof(system_settings.node_id),"%s","GGB000");
  81:notoriOS.c    ****         
  82:notoriOS.c    ****     
  83:notoriOS.c    ****     // Create a continuous alarm called alarmMeasure that triggers every 10 min (default) to take m
  84:notoriOS.c    ****     alarmMeasure = CreateAlarm(updatable_parameters.measure_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTI
 174              		.loc 1 84 0
 175 0070 384B     		ldr	r3, .L3+28
 176 0072 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 177 0074 99B2     		uxth	r1, r3
 178 0076 384C     		ldr	r4, .L3+32
 179 0078 3846     		mov	r0, r7
 180 007a 0723     		movs	r3, #7
 181 007c 0122     		movs	r2, #1
 182 007e FFF7FEFF 		bl	CreateAlarm
 183 0082 2246     		mov	r2, r4
 184 0084 3B46     		mov	r3, r7
 185 0086 1968     		ldr	r1, [r3]	@ unaligned
 186 0088 1160     		str	r1, [r2]	@ unaligned
 187 008a 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 188 008c 9380     		strh	r3, [r2, #4]	@ unaligned
  85:notoriOS.c    ****     timeToMeasure = 1u;
 189              		.loc 1 85 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 6


 190 008e 334B     		ldr	r3, .L3+36
 191 0090 0122     		movs	r2, #1
 192 0092 1A70     		strb	r2, [r3]
  86:notoriOS.c    ****     // Create a continuous alarm called alarmSync that triggers every 60 min (default) to sync the 
  87:notoriOS.c    ****     alarmSync = CreateAlarm(updatable_parameters.sync_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTINUOUS)
 193              		.loc 1 87 0
 194 0094 2F4B     		ldr	r3, .L3+28
 195 0096 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 196 0098 99B2     		uxth	r1, r3
 197 009a 314C     		ldr	r4, .L3+40
 198 009c 3846     		mov	r0, r7
 199 009e 0723     		movs	r3, #7
 200 00a0 0122     		movs	r2, #1
 201 00a2 FFF7FEFF 		bl	CreateAlarm
 202 00a6 2246     		mov	r2, r4
 203 00a8 3B46     		mov	r3, r7
 204 00aa 1968     		ldr	r1, [r3]	@ unaligned
 205 00ac 1160     		str	r1, [r2]	@ unaligned
 206 00ae 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 207 00b0 9380     		strh	r3, [r2, #4]	@ unaligned
  88:notoriOS.c    ****     timeToSync = 1u;
 208              		.loc 1 88 0
 209 00b2 2C4B     		ldr	r3, .L3+44
 210 00b4 0122     		movs	r2, #1
 211 00b6 1A70     		strb	r2, [r3]
  89:notoriOS.c    ****     
  90:notoriOS.c    ****     timeToSycnRemoteParams = 0u;//set to 1 if you want to get modem IDs and time -- no need to do t
 212              		.loc 1 90 0
 213 00b8 2B4B     		ldr	r3, .L3+48
 214 00ba 0022     		movs	r2, #0
 215 00bc 1A70     		strb	r2, [r3]
  91:notoriOS.c    ****     
  92:notoriOS.c    ****     // App Initializations
  93:notoriOS.c    ****     // APP_INTERFACE
  94:notoriOS.c    ****     alarmAppLED = CreateAlarm(updatable_parameters.App_LED_freq,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTIN
 216              		.loc 1 94 0
 217 00be 254B     		ldr	r3, .L3+28
 218 00c0 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 219 00c2 99B2     		uxth	r1, r3
 220 00c4 294C     		ldr	r4, .L3+52
 221 00c6 3846     		mov	r0, r7
 222 00c8 0723     		movs	r3, #7
 223 00ca 0122     		movs	r2, #1
 224 00cc FFF7FEFF 		bl	CreateAlarm
 225 00d0 2246     		mov	r2, r4
 226 00d2 3B46     		mov	r3, r7
 227 00d4 1968     		ldr	r1, [r3]	@ unaligned
 228 00d6 1160     		str	r1, [r2]	@ unaligned
 229 00d8 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 230 00da 9380     		strh	r3, [r2, #4]	@ unaligned
  95:notoriOS.c    ****     timeToAppLED = 1u;
 231              		.loc 1 95 0
 232 00dc 244B     		ldr	r3, .L3+56
 233 00de 0122     		movs	r2, #1
 234 00e0 1A70     		strb	r2, [r3]
  96:notoriOS.c    ****     
  97:notoriOS.c    ****     alarmLevelSensor = CreateAlarm(updatable_parameters.Level_Sensor_freq,ALARM_TYPE_MINUTE, ALARM_
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 7


 235              		.loc 1 97 0
 236 00e2 1C4B     		ldr	r3, .L3+28
 237 00e4 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 238 00e6 99B2     		uxth	r1, r3
 239 00e8 224C     		ldr	r4, .L3+60
 240 00ea 3846     		mov	r0, r7
 241 00ec 0723     		movs	r3, #7
 242 00ee 0122     		movs	r2, #1
 243 00f0 FFF7FEFF 		bl	CreateAlarm
 244 00f4 2246     		mov	r2, r4
 245 00f6 3B46     		mov	r3, r7
 246 00f8 1968     		ldr	r1, [r3]	@ unaligned
 247 00fa 1160     		str	r1, [r2]	@ unaligned
 248 00fc 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 249 00fe 9380     		strh	r3, [r2, #4]	@ unaligned
  98:notoriOS.c    ****     timetoLevelSensor = 1u;
 250              		.loc 1 98 0
 251 0100 1D4B     		ldr	r3, .L3+64
 252 0102 0122     		movs	r2, #1
 253 0104 1A70     		strb	r2, [r3]
  99:notoriOS.c    ****     
 100:notoriOS.c    ****     alarmDownstreamLevelSensor = CreateAlarm(updatable_parameters.Downstream_Level_Sensor_freq,ALAR
 254              		.loc 1 100 0
 255 0106 134B     		ldr	r3, .L3+28
 256 0108 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 257 010a 99B2     		uxth	r1, r3
 258 010c 1B4C     		ldr	r4, .L3+68
 259 010e 3846     		mov	r0, r7
 260 0110 0723     		movs	r3, #7
 261 0112 0122     		movs	r2, #1
 262 0114 FFF7FEFF 		bl	CreateAlarm
 263 0118 2246     		mov	r2, r4
 264 011a 3B46     		mov	r3, r7
 265 011c 1968     		ldr	r1, [r3]	@ unaligned
 266 011e 1160     		str	r1, [r2]	@ unaligned
 267 0120 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 268 0122 9380     		strh	r3, [r2, #4]	@ unaligned
 101:notoriOS.c    ****     timetoDownstreamLevelSensor = 1u;
 269              		.loc 1 101 0
 270 0124 164B     		ldr	r3, .L3+72
 271 0126 0122     		movs	r2, #1
 272 0128 1A70     		strb	r2, [r3]
 102:notoriOS.c    ****     
 103:notoriOS.c    ****     // Initialize the try counter to 0
 104:notoriOS.c    ****     uint8 try_counter = 0;
 273              		.loc 1 104 0
 274 012a 0023     		movs	r3, #0
 275 012c FB75     		strb	r3, [r7, #23]
 105:notoriOS.c    **** }
 276              		.loc 1 105 0
 277 012e 00BF     		nop
 278 0130 1837     		adds	r7, r7, #24
 279              		.cfi_def_cfa_offset 16
 280 0132 BD46     		mov	sp, r7
 281              		.cfi_def_cfa_register 13
 282              		@ sp needed
 283 0134 B0BD     		pop	{r4, r5, r7, pc}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 8


 284              	.L4:
 285 0136 00BF     		.align	2
 286              	.L3:
 287 0138 00000000 		.word	Wakeup_ISR
 288 013c 00000000 		.word	.LC0
 289 0140 04000000 		.word	system_info+4
 290 0144 00000000 		.word	system_info
 291 0148 00000000 		.word	modem_info
 292 014c 00000000 		.word	system_settings
 293 0150 08000000 		.word	.LC1
 294 0154 00000000 		.word	updatable_parameters
 295 0158 00000000 		.word	alarmMeasure
 296 015c 00000000 		.word	timeToMeasure
 297 0160 00000000 		.word	alarmSync
 298 0164 00000000 		.word	timeToSync
 299 0168 00000000 		.word	timeToSycnRemoteParams
 300 016c 00000000 		.word	alarmAppLED
 301 0170 00000000 		.word	timeToAppLED
 302 0174 00000000 		.word	alarmLevelSensor
 303 0178 00000000 		.word	timetoLevelSensor
 304 017c 00000000 		.word	alarmDownstreamLevelSensor
 305 0180 00000000 		.word	timetoDownstreamLevelSensor
 306              		.cfi_endproc
 307              	.LFE65:
 308              		.size	ReadyOrNot, .-ReadyOrNot
 309              		.section	.text.WorkWorkWorkWorkWorkWork,"ax",%progbits
 310              		.align	2
 311              		.global	WorkWorkWorkWorkWorkWork
 312              		.thumb
 313              		.thumb_func
 314              		.type	WorkWorkWorkWorkWorkWork, %function
 315              	WorkWorkWorkWorkWorkWork:
 316              	.LFB66:
 106:notoriOS.c    **** 
 107:notoriOS.c    **** 
 108:notoriOS.c    **** // ==============================================
 109:notoriOS.c    **** // You see me I be work, work, work, work, work, work 
 110:notoriOS.c    **** //      - Rihanna, feat Drake (2016)
 111:notoriOS.c    **** //
 112:notoriOS.c    **** // Prorcesses core tasks
 113:notoriOS.c    **** // ==============================================
 114:notoriOS.c    **** int WorkWorkWorkWorkWorkWork()
 115:notoriOS.c    **** {
 317              		.loc 1 115 0
 318              		.cfi_startproc
 319              		@ args = 0, pretend = 0, frame = 8
 320              		@ frame_needed = 1, uses_anonymous_args = 0
 321 0000 80B5     		push	{r7, lr}
 322              		.cfi_def_cfa_offset 8
 323              		.cfi_offset 7, -8
 324              		.cfi_offset 14, -4
 325 0002 82B0     		sub	sp, sp, #8
 326              		.cfi_def_cfa_offset 16
 327 0004 00AF     		add	r7, sp, #0
 328              		.cfi_def_cfa_register 7
 116:notoriOS.c    ****     
 117:notoriOS.c    ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 9


 118:notoriOS.c    ****     
 119:notoriOS.c    ****     // The priority of these tasks is determined by the if statements
 120:notoriOS.c    ****     // For example, taking measurements should always precede data transmisison, even if both fire
 121:notoriOS.c    ****     // Getting meta-DB info and system configs precedes all
 122:notoriOS.c    ****     // That said, the modem is always qeried to check if it needs anything
 123:notoriOS.c    ****     
 124:notoriOS.c    ****     // Checks to see if the timetoSyncRemoteParms flag is set
 125:notoriOS.c    ****     if(timeToSycnRemoteParams){
 329              		.loc 1 125 0
 330 0006 2B4B     		ldr	r3, .L13
 331 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 332 000a 002B     		cmp	r3, #0
 333 000c 06D0     		beq	.L6
 126:notoriOS.c    ****         timeToSycnRemoteParams = configureRemoteParams(); // Will return 0 when done sending data
 334              		.loc 1 126 0
 335 000e FFF7FEFF 		bl	configureRemoteParams
 336 0012 0346     		mov	r3, r0
 337 0014 1A46     		mov	r2, r3
 338 0016 274B     		ldr	r3, .L13
 339 0018 1A70     		strb	r2, [r3]
 340 001a 38E0     		b	.L7
 341              	.L6:
 127:notoriOS.c    ****     }
 128:notoriOS.c    ****     // Checks to see if the timetoMeasure flag is set
 129:notoriOS.c    ****     else if(timeToMeasure){
 342              		.loc 1 129 0
 343 001c 264B     		ldr	r3, .L13+4
 344 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 345 0020 002B     		cmp	r3, #0
 346 0022 06D0     		beq	.L8
 130:notoriOS.c    ****         // on custom nodes makeMeasurements will just be battery voltages
 131:notoriOS.c    ****         timeToMeasure = makeMeasurements(); // Will return 0 when done sending data
 347              		.loc 1 131 0
 348 0024 FFF7FEFF 		bl	makeMeasurements
 349 0028 0346     		mov	r3, r0
 350 002a 1A46     		mov	r2, r3
 351 002c 224B     		ldr	r3, .L13+4
 352 002e 1A70     		strb	r2, [r3]
 353 0030 2DE0     		b	.L7
 354              	.L8:
 132:notoriOS.c    ****     }  
 133:notoriOS.c    ****     // custom nodes
 134:notoriOS.c    ****     // APP_INTERFACE
 135:notoriOS.c    ****     else if(updatable_parameters.node_type == NODE_TYPE_CUSTOM){
 355              		.loc 1 135 0
 356 0032 224B     		ldr	r3, .L13+8
 357 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 358 0036 042B     		cmp	r3, #4
 359 0038 29D1     		bne	.L7
 136:notoriOS.c    ****         if(App_LED_enabled && timeToAppLED){
 360              		.loc 1 136 0
 361 003a 214B     		ldr	r3, .L13+12
 362 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 363 003e 002B     		cmp	r3, #0
 364 0040 09D0     		beq	.L9
 365              		.loc 1 136 0 is_stmt 0 discriminator 1
 366 0042 204B     		ldr	r3, .L13+16
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 10


 367 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 368 0046 002B     		cmp	r3, #0
 369 0048 05D0     		beq	.L9
 137:notoriOS.c    ****             timeToAppLED = App_LED();
 370              		.loc 1 137 0 is_stmt 1
 371 004a FFF7FEFF 		bl	App_LED
 372 004e 0346     		mov	r3, r0
 373 0050 1A46     		mov	r2, r3
 374 0052 1C4B     		ldr	r3, .L13+16
 375 0054 1A70     		strb	r2, [r3]
 376              	.L9:
 138:notoriOS.c    ****         }
 139:notoriOS.c    ****         if(level_sensor_enabled && timetoLevelSensor){
 377              		.loc 1 139 0
 378 0056 1C4B     		ldr	r3, .L13+20
 379 0058 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 380 005a 002B     		cmp	r3, #0
 381 005c 09D0     		beq	.L10
 382              		.loc 1 139 0 is_stmt 0 discriminator 1
 383 005e 1B4B     		ldr	r3, .L13+24
 384 0060 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 385 0062 002B     		cmp	r3, #0
 386 0064 05D0     		beq	.L10
 140:notoriOS.c    ****             timetoLevelSensor = level_sensor();
 387              		.loc 1 140 0 is_stmt 1
 388 0066 FFF7FEFF 		bl	level_sensor
 389 006a 0346     		mov	r3, r0
 390 006c 1A46     		mov	r2, r3
 391 006e 174B     		ldr	r3, .L13+24
 392 0070 1A70     		strb	r2, [r3]
 393              	.L10:
 141:notoriOS.c    ****         }
 142:notoriOS.c    ****         if(downstream_level_sensor_enabled && timetoDownstreamLevelSensor){
 394              		.loc 1 142 0
 395 0072 174B     		ldr	r3, .L13+28
 396 0074 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 397 0076 002B     		cmp	r3, #0
 398 0078 09D0     		beq	.L7
 399              		.loc 1 142 0 is_stmt 0 discriminator 1
 400 007a 164B     		ldr	r3, .L13+32
 401 007c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 402 007e 002B     		cmp	r3, #0
 403 0080 05D0     		beq	.L7
 143:notoriOS.c    ****             timetoDownstreamLevelSensor = downstream_level_sensor();
 404              		.loc 1 143 0 is_stmt 1
 405 0082 FFF7FEFF 		bl	downstream_level_sensor
 406 0086 0346     		mov	r3, r0
 407 0088 1A46     		mov	r2, r3
 408 008a 124B     		ldr	r3, .L13+32
 409 008c 1A70     		strb	r2, [r3]
 410              	.L7:
 144:notoriOS.c    ****         }
 145:notoriOS.c    ****         // add other custom apps below
 146:notoriOS.c    ****     }
 147:notoriOS.c    ****     if(timeToSync){
 411              		.loc 1 147 0
 412 008e 124B     		ldr	r3, .L13+36
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 11


 413 0090 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 414 0092 002B     		cmp	r3, #0
 415 0094 05D0     		beq	.L11
 148:notoriOS.c    ****         timeToSync = syncData();
 416              		.loc 1 148 0
 417 0096 FFF7FEFF 		bl	syncData
 418 009a 0346     		mov	r3, r0
 419 009c 1A46     		mov	r2, r3
 420 009e 0E4B     		ldr	r3, .L13+36
 421 00a0 1A70     		strb	r2, [r3]
 422              	.L11:
 149:notoriOS.c    ****     } 
 150:notoriOS.c    ****     
 151:notoriOS.c    **** 
 152:notoriOS.c    ****     
 153:notoriOS.c    ****     // Print the countdown to the next alarm
 154:notoriOS.c    ****     //printNotif(NOTIF_TYPE_EVENT,"Measure CNT %d, Sync CNT %d, Data Wheel CNT %d",alarmMeasure.cur
 155:notoriOS.c    ****     
 156:notoriOS.c    ****     
 157:notoriOS.c    ****     // Check modem state machine on every loop
 158:notoriOS.c    ****     uint8 modem_status = modem_process_tasks();
 423              		.loc 1 158 0
 424 00a2 FFF7FEFF 		bl	modem_process_tasks
 425 00a6 0346     		mov	r3, r0
 426 00a8 FB71     		strb	r3, [r7, #7]
 159:notoriOS.c    **** 
 160:notoriOS.c    ****     return 0u +  modem_status;  
 427              		.loc 1 160 0
 428 00aa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 161:notoriOS.c    **** }
 429              		.loc 1 161 0
 430 00ac 1846     		mov	r0, r3
 431 00ae 0837     		adds	r7, r7, #8
 432              		.cfi_def_cfa_offset 8
 433 00b0 BD46     		mov	sp, r7
 434              		.cfi_def_cfa_register 13
 435              		@ sp needed
 436 00b2 80BD     		pop	{r7, pc}
 437              	.L14:
 438              		.align	2
 439              	.L13:
 440 00b4 00000000 		.word	timeToSycnRemoteParams
 441 00b8 00000000 		.word	timeToMeasure
 442 00bc 00000000 		.word	updatable_parameters
 443 00c0 00000000 		.word	App_LED_enabled
 444 00c4 00000000 		.word	timeToAppLED
 445 00c8 00000000 		.word	level_sensor_enabled
 446 00cc 00000000 		.word	timetoLevelSensor
 447 00d0 00000000 		.word	downstream_level_sensor_enabled
 448 00d4 00000000 		.word	timetoDownstreamLevelSensor
 449 00d8 00000000 		.word	timeToSync
 450              		.cfi_endproc
 451              	.LFE66:
 452              		.size	WorkWorkWorkWorkWorkWork, .-WorkWorkWorkWorkWorkWork
 453              		.section	.text.LayBack,"ax",%progbits
 454              		.align	2
 455              		.global	LayBack
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 12


 456              		.thumb
 457              		.thumb_func
 458              		.type	LayBack, %function
 459              	LayBack:
 460              	.LFB67:
 162:notoriOS.c    **** 
 163:notoriOS.c    **** 
 164:notoriOS.c    **** 
 165:notoriOS.c    **** 
 166:notoriOS.c    **** 
 167:notoriOS.c    **** 
 168:notoriOS.c    **** // ==============================================
 169:notoriOS.c    **** // sippin on gin and juice, Laid back (with my mind on my money and my money on my mind)
 170:notoriOS.c    **** //      - Snoop Dogg (1993)
 171:notoriOS.c    **** //
 172:notoriOS.c    **** // Put all hardware to sleep and go into low power mode to conserve Amps
 173:notoriOS.c    **** // ==============================================
 174:notoriOS.c    **** void LayBack()
 175:notoriOS.c    **** {
 461              		.loc 1 175 0
 462              		.cfi_startproc
 463              		@ args = 0, pretend = 0, frame = 0
 464              		@ frame_needed = 1, uses_anonymous_args = 0
 465 0000 80B5     		push	{r7, lr}
 466              		.cfi_def_cfa_offset 8
 467              		.cfi_offset 7, -8
 468              		.cfi_offset 14, -4
 469 0002 00AF     		add	r7, sp, #0
 470              		.cfi_def_cfa_register 7
 176:notoriOS.c    ****   
 177:notoriOS.c    ****     modem_sleep();  // Prepares system clocks for the Sleep mode
 471              		.loc 1 177 0
 472 0004 FFF7FEFF 		bl	modem_sleep
 178:notoriOS.c    ****     
 179:notoriOS.c    ****     // Important, call this last because we want to sleep uart before shutting down
 180:notoriOS.c    ****     debug_sleep();  // Function to sleep UART debug
 473              		.loc 1 180 0
 474 0008 FFF7FEFF 		bl	debug_sleep
 181:notoriOS.c    ****     
 182:notoriOS.c    ****     CyPmSaveClocks(); // Called to prep system to sleep/hiberanate. Saves all states of clocking sy
 475              		.loc 1 182 0
 476 000c FFF7FEFF 		bl	CyPmSaveClocks
 183:notoriOS.c    ****     
 184:notoriOS.c    ****     // Switch to the Sleep Mode for the other devices:
 185:notoriOS.c    ****     //  - PM_SLEEP_TIME_NONE: wakeup time is defined by Sleep Timer
 186:notoriOS.c    ****     //  - PM_SLEEP_SRC_CTW :  wakeup on CTW sources is allowed
 187:notoriOS.c    ****     //  - If real-time clock is used, it will also wake the device
 188:notoriOS.c    ****     //can also wake up from a pin intterup (PICU). This is useful with the moderm UART
 189:notoriOS.c    ****     //CyPmHibernate();
 190:notoriOS.c    ****     //CyPmSleep(PM_SLEEP_TIME_NONE, PM_SLEEP_SRC_CTW & PM_SLEEP_SRC_PICU);
 191:notoriOS.c    **** 
 192:notoriOS.c    ****     CyPmSleep(PM_SLEEP_TIME_NONE, PM_SLEEP_SRC_CTW & PM_SLEEP_SRC_ONE_PPS); // Puts the part into t
 477              		.loc 1 192 0
 478 0010 4FF40061 		mov	r1, #2048
 479 0014 0020     		movs	r0, #0
 480 0016 FFF7FEFF 		bl	CyPmSleep
 193:notoriOS.c    **** 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 13


 194:notoriOS.c    ****     CyPmRestoreClocks();    // Restore clock configuration.
 481              		.loc 1 194 0
 482 001a FFF7FEFF 		bl	CyPmRestoreClocks
 195:notoriOS.c    **** 
 196:notoriOS.c    ****     debug_wakeup();         // Function to wakeup UART debug.
 483              		.loc 1 196 0
 484 001e FFF7FEFF 		bl	debug_wakeup
 197:notoriOS.c    ****     modem_wakeup();         // Function to wakeup modem.
 485              		.loc 1 197 0
 486 0022 FFF7FEFF 		bl	modem_wakeup
 198:notoriOS.c    **** 
 199:notoriOS.c    **** }
 487              		.loc 1 199 0
 488 0026 00BF     		nop
 489 0028 80BD     		pop	{r7, pc}
 490              		.cfi_endproc
 491              	.LFE67:
 492              		.size	LayBack, .-LayBack
 493 002a 00BF     		.section	.text.AyoItsTime,"ax",%progbits
 494              		.align	2
 495              		.global	AyoItsTime
 496              		.thumb
 497              		.thumb_func
 498              		.type	AyoItsTime, %function
 499              	AyoItsTime:
 500              	.LFB68:
 200:notoriOS.c    **** 
 201:notoriOS.c    **** 
 202:notoriOS.c    **** // ==============================================
 203:notoriOS.c    **** // I never sleep, 'cause sleep is the cousin of death
 204:notoriOS.c    **** //      - NAS (1994)
 205:notoriOS.c    **** //
 206:notoriOS.c    **** // This is the scheduler. It's called from various interrupts and timers,
 207:notoriOS.c    **** // ...in particular from fuctions with in the real-tiem clock interrupts (RTC_INT.c)
 208:notoriOS.c    **** // It will add tasks to the work queue,
 209:notoriOS.c    **** // which will be executed eventually by WorkWorkWorkWorkWorkWork()
 210:notoriOS.c    **** // ==============================================
 211:notoriOS.c    **** void AyoItsTime(uint8 alarmType)
 212:notoriOS.c    **** {
 501              		.loc 1 212 0
 502              		.cfi_startproc
 503              		@ args = 0, pretend = 0, frame = 8
 504              		@ frame_needed = 1, uses_anonymous_args = 0
 505 0000 80B5     		push	{r7, lr}
 506              		.cfi_def_cfa_offset 8
 507              		.cfi_offset 7, -8
 508              		.cfi_offset 14, -4
 509 0002 82B0     		sub	sp, sp, #8
 510              		.cfi_def_cfa_offset 16
 511 0004 00AF     		add	r7, sp, #0
 512              		.cfi_def_cfa_register 7
 513 0006 0346     		mov	r3, r0
 514 0008 FB71     		strb	r3, [r7, #7]
 213:notoriOS.c    ****     // Checks if the alarm is up and if so, sets the flag.
 214:notoriOS.c    ****     if(AlarmReady(&alarmMeasure,alarmType))
 515              		.loc 1 214 0
 516 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 14


 517 000c 1946     		mov	r1, r3
 518 000e 1C48     		ldr	r0, .L23
 519 0010 FFF7FEFF 		bl	AlarmReady
 520 0014 0346     		mov	r3, r0
 521 0016 002B     		cmp	r3, #0
 522 0018 02D0     		beq	.L17
 215:notoriOS.c    ****     {
 216:notoriOS.c    ****          // Flag new task as "ready" and pass off to workworkworkworkwork()
 217:notoriOS.c    ****         timeToMeasure = 1u;
 523              		.loc 1 217 0
 524 001a 1A4B     		ldr	r3, .L23+4
 525 001c 0122     		movs	r2, #1
 526 001e 1A70     		strb	r2, [r3]
 527              	.L17:
 218:notoriOS.c    ****         //printNotif(NOTIF_TYPE_EVENT,"Measure Alarm");
 219:notoriOS.c    ****         
 220:notoriOS.c    ****     }
 221:notoriOS.c    ****     if(AlarmReady(&alarmSync,alarmType))
 528              		.loc 1 221 0
 529 0020 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 530 0022 1946     		mov	r1, r3
 531 0024 1848     		ldr	r0, .L23+8
 532 0026 FFF7FEFF 		bl	AlarmReady
 533 002a 0346     		mov	r3, r0
 534 002c 002B     		cmp	r3, #0
 535 002e 02D0     		beq	.L18
 222:notoriOS.c    ****     {
 223:notoriOS.c    ****         // Create new task and pass off to workworkworkworkwork()
 224:notoriOS.c    ****         timeToSync = 1u;
 536              		.loc 1 224 0
 537 0030 164B     		ldr	r3, .L23+12
 538 0032 0122     		movs	r2, #1
 539 0034 1A70     		strb	r2, [r3]
 540              	.L18:
 225:notoriOS.c    ****          //printNotif(NOTIF_TYPE_EVENT,"Sync Alarm");
 226:notoriOS.c    ****     }
 227:notoriOS.c    ****     
 228:notoriOS.c    ****     // APP_INTERFACE
 229:notoriOS.c    ****     if(AlarmReady(&alarmAppLED,alarmType))
 541              		.loc 1 229 0
 542 0036 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 543 0038 1946     		mov	r1, r3
 544 003a 1548     		ldr	r0, .L23+16
 545 003c FFF7FEFF 		bl	AlarmReady
 546 0040 0346     		mov	r3, r0
 547 0042 002B     		cmp	r3, #0
 548 0044 02D0     		beq	.L19
 230:notoriOS.c    ****     {
 231:notoriOS.c    ****         // Create new task and pass off to workworkworkworkwork()
 232:notoriOS.c    ****         timeToAppLED = 1u;
 549              		.loc 1 232 0
 550 0046 134B     		ldr	r3, .L23+20
 551 0048 0122     		movs	r2, #1
 552 004a 1A70     		strb	r2, [r3]
 553              	.L19:
 233:notoriOS.c    ****          //printNotif(NOTIF_TYPE_EVENT,"Sync Alarm");
 234:notoriOS.c    ****     }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 15


 235:notoriOS.c    ****     if(AlarmReady(&alarmLevelSensor, alarmType)){
 554              		.loc 1 235 0
 555 004c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 556 004e 1946     		mov	r1, r3
 557 0050 1148     		ldr	r0, .L23+24
 558 0052 FFF7FEFF 		bl	AlarmReady
 559 0056 0346     		mov	r3, r0
 560 0058 002B     		cmp	r3, #0
 561 005a 02D0     		beq	.L20
 236:notoriOS.c    ****         timetoLevelSensor = 1u;
 562              		.loc 1 236 0
 563 005c 0F4B     		ldr	r3, .L23+28
 564 005e 0122     		movs	r2, #1
 565 0060 1A70     		strb	r2, [r3]
 566              	.L20:
 237:notoriOS.c    ****     }
 238:notoriOS.c    ****     if(AlarmReady(&alarmDownstreamLevelSensor, alarmType)){
 567              		.loc 1 238 0
 568 0062 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 569 0064 1946     		mov	r1, r3
 570 0066 0E48     		ldr	r0, .L23+32
 571 0068 FFF7FEFF 		bl	AlarmReady
 572 006c 0346     		mov	r3, r0
 573 006e 002B     		cmp	r3, #0
 574 0070 02D0     		beq	.L22
 239:notoriOS.c    ****         timetoDownstreamLevelSensor = 1u;
 575              		.loc 1 239 0
 576 0072 0C4B     		ldr	r3, .L23+36
 577 0074 0122     		movs	r2, #1
 578 0076 1A70     		strb	r2, [r3]
 579              	.L22:
 240:notoriOS.c    ****     }
 241:notoriOS.c    ****     
 242:notoriOS.c    **** }
 580              		.loc 1 242 0
 581 0078 00BF     		nop
 582 007a 0837     		adds	r7, r7, #8
 583              		.cfi_def_cfa_offset 8
 584 007c BD46     		mov	sp, r7
 585              		.cfi_def_cfa_register 13
 586              		@ sp needed
 587 007e 80BD     		pop	{r7, pc}
 588              	.L24:
 589              		.align	2
 590              	.L23:
 591 0080 00000000 		.word	alarmMeasure
 592 0084 00000000 		.word	timeToMeasure
 593 0088 00000000 		.word	alarmSync
 594 008c 00000000 		.word	timeToSync
 595 0090 00000000 		.word	alarmAppLED
 596 0094 00000000 		.word	timeToAppLED
 597 0098 00000000 		.word	alarmLevelSensor
 598 009c 00000000 		.word	timetoLevelSensor
 599 00a0 00000000 		.word	alarmDownstreamLevelSensor
 600 00a4 00000000 		.word	timetoDownstreamLevelSensor
 601              		.cfi_endproc
 602              	.LFE68:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 16


 603              		.size	AyoItsTime, .-AyoItsTime
 604              		.section	.text.AlarmReady,"ax",%progbits
 605              		.align	2
 606              		.global	AlarmReady
 607              		.thumb
 608              		.thumb_func
 609              		.type	AlarmReady, %function
 610              	AlarmReady:
 611              	.LFB69:
 243:notoriOS.c    **** 
 244:notoriOS.c    **** 
 245:notoriOS.c    **** // ==============================================
 246:notoriOS.c    **** // Determines when an alarm is ready to trigger, which will be handeled by another cutions
 247:notoriOS.c    **** // ==============================================
 248:notoriOS.c    **** uint8 AlarmReady(alarm * alarmToBeUpdated, uint8 alarmType)
 249:notoriOS.c    **** {
 612              		.loc 1 249 0
 613              		.cfi_startproc
 614              		@ args = 0, pretend = 0, frame = 8
 615              		@ frame_needed = 1, uses_anonymous_args = 0
 616 0000 80B5     		push	{r7, lr}
 617              		.cfi_def_cfa_offset 8
 618              		.cfi_offset 7, -8
 619              		.cfi_offset 14, -4
 620 0002 82B0     		sub	sp, sp, #8
 621              		.cfi_def_cfa_offset 16
 622 0004 00AF     		add	r7, sp, #0
 623              		.cfi_def_cfa_register 7
 624 0006 7860     		str	r0, [r7, #4]
 625 0008 0B46     		mov	r3, r1
 626 000a FB70     		strb	r3, [r7, #3]
 250:notoriOS.c    ****     // if the countDownType matches the alarmType
 251:notoriOS.c    ****     if(alarmToBeUpdated->countDownType == alarmType){
 627              		.loc 1 251 0
 628 000c 7B68     		ldr	r3, [r7, #4]
 629 000e 1B79     		ldrb	r3, [r3, #4]
 630 0010 DBB2     		uxtb	r3, r3
 631 0012 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 632 0014 9A42     		cmp	r2, r3
 633 0016 12D1     		bne	.L26
 252:notoriOS.c    ****        
 253:notoriOS.c    ****         // In the Post-decrement old value is first used in a expression and then old value will be
 254:notoriOS.c    ****         // Decrement the count down value by 1
 255:notoriOS.c    ****         alarmToBeUpdated->currentCountDownValue--;
 634              		.loc 1 255 0
 635 0018 7B68     		ldr	r3, [r7, #4]
 636 001a 5B88     		ldrh	r3, [r3, #2]	@ movhi
 637 001c 1BB2     		sxth	r3, r3
 638 001e 9BB2     		uxth	r3, r3
 639 0020 013B     		subs	r3, r3, #1
 640 0022 9BB2     		uxth	r3, r3
 641 0024 1AB2     		sxth	r2, r3
 642 0026 7B68     		ldr	r3, [r7, #4]
 643 0028 5A80     		strh	r2, [r3, #2]	@ movhi
 256:notoriOS.c    ****         // If the current count is 0, then reset the alarm
 257:notoriOS.c    ****         if(alarmToBeUpdated->currentCountDownValue <= 0){
 644              		.loc 1 257 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 17


 645 002a 7B68     		ldr	r3, [r7, #4]
 646 002c 5B88     		ldrh	r3, [r3, #2]	@ movhi
 647 002e 1BB2     		sxth	r3, r3
 648 0030 002B     		cmp	r3, #0
 649 0032 04DC     		bgt	.L26
 258:notoriOS.c    ****             ResetAlarm(alarmToBeUpdated);
 650              		.loc 1 258 0
 651 0034 7868     		ldr	r0, [r7, #4]
 652 0036 FFF7FEFF 		bl	ResetAlarm
 259:notoriOS.c    ****             return 1u;
 653              		.loc 1 259 0
 654 003a 0123     		movs	r3, #1
 655 003c 00E0     		b	.L27
 656              	.L26:
 260:notoriOS.c    ****         } 
 261:notoriOS.c    ****     }
 262:notoriOS.c    ****     
 263:notoriOS.c    ****     return 0u; // Otherwise return 0
 657              		.loc 1 263 0
 658 003e 0023     		movs	r3, #0
 659              	.L27:
 264:notoriOS.c    **** }
 660              		.loc 1 264 0
 661 0040 1846     		mov	r0, r3
 662 0042 0837     		adds	r7, r7, #8
 663              		.cfi_def_cfa_offset 8
 664 0044 BD46     		mov	sp, r7
 665              		.cfi_def_cfa_register 13
 666              		@ sp needed
 667 0046 80BD     		pop	{r7, pc}
 668              		.cfi_endproc
 669              	.LFE69:
 670              		.size	AlarmReady, .-AlarmReady
 671              		.section	.text.ResetAlarm,"ax",%progbits
 672              		.align	2
 673              		.global	ResetAlarm
 674              		.thumb
 675              		.thumb_func
 676              		.type	ResetAlarm, %function
 677              	ResetAlarm:
 678              	.LFB70:
 265:notoriOS.c    **** 
 266:notoriOS.c    **** // ==============================================
 267:notoriOS.c    **** // Resets an alarm, which will be handeled by other executions
 268:notoriOS.c    **** // ==============================================
 269:notoriOS.c    **** void ResetAlarm(alarm * alarmToBeReset)
 270:notoriOS.c    **** {
 679              		.loc 1 270 0
 680              		.cfi_startproc
 681              		@ args = 0, pretend = 0, frame = 8
 682              		@ frame_needed = 1, uses_anonymous_args = 0
 683              		@ link register save eliminated.
 684 0000 80B4     		push	{r7}
 685              		.cfi_def_cfa_offset 4
 686              		.cfi_offset 7, -4
 687 0002 83B0     		sub	sp, sp, #12
 688              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 18


 689 0004 00AF     		add	r7, sp, #0
 690              		.cfi_def_cfa_register 7
 691 0006 7860     		str	r0, [r7, #4]
 271:notoriOS.c    ****     // resets the alarm when the current count down value equals the set alarm count down value
 272:notoriOS.c    ****     alarmToBeReset->currentCountDownValue = alarmToBeReset->countDownValue;
 692              		.loc 1 272 0
 693 0008 7B68     		ldr	r3, [r7, #4]
 694 000a 1B88     		ldrh	r3, [r3]	@ movhi
 695 000c 9BB2     		uxth	r3, r3
 696 000e 1AB2     		sxth	r2, r3
 697 0010 7B68     		ldr	r3, [r7, #4]
 698 0012 5A80     		strh	r2, [r3, #2]	@ movhi
 273:notoriOS.c    **** }
 699              		.loc 1 273 0
 700 0014 00BF     		nop
 701 0016 0C37     		adds	r7, r7, #12
 702              		.cfi_def_cfa_offset 4
 703 0018 BD46     		mov	sp, r7
 704              		.cfi_def_cfa_register 13
 705              		@ sp needed
 706 001a 80BC     		pop	{r7}
 707              		.cfi_restore 7
 708              		.cfi_def_cfa_offset 0
 709 001c 7047     		bx	lr
 710              		.cfi_endproc
 711              	.LFE70:
 712              		.size	ResetAlarm, .-ResetAlarm
 713 001e 00BF     		.section	.text.CreateAlarm,"ax",%progbits
 714              		.align	2
 715              		.global	CreateAlarm
 716              		.thumb
 717              		.thumb_func
 718              		.type	CreateAlarm, %function
 719              	CreateAlarm:
 720              	.LFB71:
 274:notoriOS.c    **** 
 275:notoriOS.c    **** // ==============================================
 276:notoriOS.c    **** // Creates a new alarm, which will be handeled by another cutions
 277:notoriOS.c    **** // ==============================================
 278:notoriOS.c    **** alarm CreateAlarm(uint16 countDownValue, uint8 countDownType,uint8 countDownResetCondition)
 279:notoriOS.c    **** {
 721              		.loc 1 279 0
 722              		.cfi_startproc
 723              		@ args = 0, pretend = 0, frame = 16
 724              		@ frame_needed = 1, uses_anonymous_args = 0
 725              		@ link register save eliminated.
 726 0000 80B4     		push	{r7}
 727              		.cfi_def_cfa_offset 4
 728              		.cfi_offset 7, -4
 729 0002 85B0     		sub	sp, sp, #20
 730              		.cfi_def_cfa_offset 24
 731 0004 00AF     		add	r7, sp, #0
 732              		.cfi_def_cfa_register 7
 733 0006 7860     		str	r0, [r7, #4]
 734 0008 0846     		mov	r0, r1
 735 000a 1146     		mov	r1, r2
 736 000c 1A46     		mov	r2, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 19


 737 000e 0346     		mov	r3, r0	@ movhi
 738 0010 7B80     		strh	r3, [r7, #2]	@ movhi
 739 0012 0B46     		mov	r3, r1
 740 0014 7B70     		strb	r3, [r7, #1]
 741 0016 1346     		mov	r3, r2
 742 0018 3B70     		strb	r3, [r7]
 280:notoriOS.c    ****     // Creates variable newAlarm of the data structure type alarm
 281:notoriOS.c    ****     alarm newAlarm;
 282:notoriOS.c    ****     
 283:notoriOS.c    ****     // Defines the different params of an alarm: # of ticks, alarm type (sec, min, etc.), & continu
 284:notoriOS.c    ****     newAlarm.countDownValue = countDownValue;
 743              		.loc 1 284 0
 744 001a 7B88     		ldrh	r3, [r7, #2]	@ movhi
 745 001c 3B81     		strh	r3, [r7, #8]	@ movhi
 285:notoriOS.c    ****     newAlarm.countDownType = countDownType;
 746              		.loc 1 285 0
 747 001e 7B78     		ldrb	r3, [r7, #1]
 748 0020 3B73     		strb	r3, [r7, #12]
 286:notoriOS.c    ****     newAlarm.countDownResetCondition = countDownResetCondition;
 749              		.loc 1 286 0
 750 0022 3B78     		ldrb	r3, [r7]
 751 0024 7B73     		strb	r3, [r7, #13]
 287:notoriOS.c    ****     
 288:notoriOS.c    ****     // If you want a reccuring alarm (e.g. resets freshly each hour), then add
 289:notoriOS.c    ****     // Account for already exprired time using the RTC. Otherwise, set to the countDownValue
 290:notoriOS.c    ****     newAlarm.currentCountDownValue = countDownValue;
 752              		.loc 1 290 0
 753 0026 B7F90230 		ldrsh	r3, [r7, #2]
 754 002a 7B81     		strh	r3, [r7, #10]	@ movhi
 291:notoriOS.c    ****     
 292:notoriOS.c    ****     return newAlarm;
 755              		.loc 1 292 0
 756 002c 7B68     		ldr	r3, [r7, #4]
 757 002e 1A46     		mov	r2, r3
 758 0030 07F10803 		add	r3, r7, #8
 759 0034 1868     		ldr	r0, [r3]	@ unaligned
 760 0036 1060     		str	r0, [r2]	@ unaligned
 761 0038 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 762 003a 9380     		strh	r3, [r2, #4]	@ unaligned
 293:notoriOS.c    ****     
 294:notoriOS.c    **** }
 763              		.loc 1 294 0
 764 003c 7868     		ldr	r0, [r7, #4]
 765 003e 1437     		adds	r7, r7, #20
 766              		.cfi_def_cfa_offset 4
 767 0040 BD46     		mov	sp, r7
 768              		.cfi_def_cfa_register 13
 769              		@ sp needed
 770 0042 80BC     		pop	{r7}
 771              		.cfi_restore 7
 772              		.cfi_def_cfa_offset 0
 773 0044 7047     		bx	lr
 774              		.cfi_endproc
 775              	.LFE71:
 776              		.size	CreateAlarm, .-CreateAlarm
 777 0046 00BF     		.section	.rodata
 778 003b 00       		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 20


 779              	.LC2:
 780 003c 2D2D2D2D 		.ascii	"-------------BEGIN TESTS---------------\012\012\000"
 780      2D2D2D2D 
 780      2D2D2D2D 
 780      2D424547 
 780      494E2054 
 781 0066 0000     		.align	2
 782              	.LC3:
 783 0068 4D454944 		.ascii	"MEID=%s, SIMID=%s, DEVICEID=%s\000"
 783      3D25732C 
 783      2053494D 
 783      49443D25 
 783      732C2044 
 784 0087 00       		.align	2
 785              	.LC4:
 786 0088 0A0A2D2D 		.ascii	"\012\012-------------END TESTS---------------\012\012"
 786      2D2D2D2D 
 786      2D2D2D2D 
 786      2D2D2D45 
 786      4E442054 
 787 00b1 00       		.ascii	"\000"
 788              		.section	.text.ChickityCheckYourselfBeforeYouWreckYourself,"ax",%progbits
 789              		.align	2
 790              		.global	ChickityCheckYourselfBeforeYouWreckYourself
 791              		.thumb
 792              		.thumb_func
 793              		.type	ChickityCheckYourselfBeforeYouWreckYourself, %function
 794              	ChickityCheckYourselfBeforeYouWreckYourself:
 795              	.LFB72:
 295:notoriOS.c    **** 
 296:notoriOS.c    **** // ==============================================
 297:notoriOS.c    **** // Dropping bombs on your moms
 298:notoriOS.c    **** //      - Ice Cube (1992)
 299:notoriOS.c    **** //
 300:notoriOS.c    **** // This is the global testing function, which runs all relevant tests
 301:notoriOS.c    **** // If you make a new components, it could be good to call its tester function here 
 302:notoriOS.c    **** // ==============================================
 303:notoriOS.c    **** void ChickityCheckYourselfBeforeYouWreckYourself(){
 796              		.loc 1 303 0
 797              		.cfi_startproc
 798              		@ args = 0, pretend = 0, frame = 2328
 799              		@ frame_needed = 1, uses_anonymous_args = 0
 800 0000 90B5     		push	{r4, r7, lr}
 801              		.cfi_def_cfa_offset 12
 802              		.cfi_offset 4, -12
 803              		.cfi_offset 7, -8
 804              		.cfi_offset 14, -4
 805 0002 ADF6942D 		subw	sp, sp, #2708
 806              		.cfi_def_cfa_offset 2720
 807 0006 5EAF     		add	r7, sp, #376
 808              		.cfi_def_cfa 7, 2344
 304:notoriOS.c    **** 
 305:notoriOS.c    ****     //test_t t_influx = influx_test();
 306:notoriOS.c    ****     //printTestStatus(t_influx);
 307:notoriOS.c    ****     
 308:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"-------------BEGIN TESTS---------------\n\n");
 809              		.loc 1 308 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 21


 810 0008 4249     		ldr	r1, .L32
 811 000a 0320     		movs	r0, #3
 812 000c FFF7FEFF 		bl	printNotif
 309:notoriOS.c    ****     
 310:notoriOS.c    ****     // Test level sensor
 311:notoriOS.c    ****     test_t t_level_sensor = level_sensor_test();  
 813              		.loc 1 311 0
 814 0010 07F29473 		addw	r3, r7, #1940
 815 0014 1846     		mov	r0, r3
 816 0016 FFF7FEFF 		bl	level_sensor_test
 312:notoriOS.c    ****     printTestStatus(t_level_sensor);
 817              		.loc 1 312 0
 818 001a 07F29474 		addw	r4, r7, #1940
 819 001e 6846     		mov	r0, sp
 820 0020 04F11003 		add	r3, r4, #16
 821 0024 40F27112 		movw	r2, #369
 822 0028 1946     		mov	r1, r3
 823 002a FFF7FEFF 		bl	memcpy
 824 002e 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 825 0032 FFF7FEFF 		bl	printTestStatus
 313:notoriOS.c    ****     
 314:notoriOS.c    ****     // Test downstream level sensor
 315:notoriOS.c    ****     test_t t_down_level = downstream_level_sensor_test();
 826              		.loc 1 315 0
 827 0036 07F5C263 		add	r3, r7, #1552
 828 003a 1846     		mov	r0, r3
 829 003c FFF7FEFF 		bl	downstream_level_sensor_test
 316:notoriOS.c    ****     printTestStatus(t_down_level);
 830              		.loc 1 316 0
 831 0040 07F5C264 		add	r4, r7, #1552
 832 0044 6846     		mov	r0, sp
 833 0046 04F11003 		add	r3, r4, #16
 834 004a 40F27112 		movw	r2, #369
 835 004e 1946     		mov	r1, r3
 836 0050 FFF7FEFF 		bl	memcpy
 837 0054 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 838 0058 FFF7FEFF 		bl	printTestStatus
 317:notoriOS.c    ****     
 318:notoriOS.c    ****     // Test voltages
 319:notoriOS.c    ****     test_t t_voltages = voltages_test();
 839              		.loc 1 319 0
 840 005c 07F28C43 		addw	r3, r7, #1164
 841 0060 1846     		mov	r0, r3
 842 0062 FFF7FEFF 		bl	voltages_test
 320:notoriOS.c    ****     printTestStatus(t_voltages);
 843              		.loc 1 320 0
 844 0066 07F28C44 		addw	r4, r7, #1164
 845 006a 6846     		mov	r0, sp
 846 006c 04F11003 		add	r3, r4, #16
 847 0070 40F27112 		movw	r2, #369
 848 0074 1946     		mov	r1, r3
 849 0076 FFF7FEFF 		bl	memcpy
 850 007a 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 851 007e FFF7FEFF 		bl	printTestStatus
 321:notoriOS.c    ****  
 322:notoriOS.c    ****     // Test voltages
 323:notoriOS.c    ****     test_t t_pressure = pressure_sensor_test();
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 22


 852              		.loc 1 323 0
 853 0082 07F54273 		add	r3, r7, #776
 854 0086 1846     		mov	r0, r3
 855 0088 FFF7FEFF 		bl	pressure_sensor_test
 324:notoriOS.c    ****     printTestStatus(t_pressure);
 856              		.loc 1 324 0
 857 008c 07F54274 		add	r4, r7, #776
 858 0090 6846     		mov	r0, sp
 859 0092 04F11003 		add	r3, r4, #16
 860 0096 40F27112 		movw	r2, #369
 861 009a 1946     		mov	r1, r3
 862 009c FFF7FEFF 		bl	memcpy
 863 00a0 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 864 00a4 FFF7FEFF 		bl	printTestStatus
 325:notoriOS.c    ****     
 326:notoriOS.c    ****     // Test SD card
 327:notoriOS.c    ****     test_t t_sd_card = SD_card_test();
 865              		.loc 1 327 0
 866 00a8 07F5C273 		add	r3, r7, #388
 867 00ac 1846     		mov	r0, r3
 868 00ae FFF7FEFF 		bl	SD_card_test
 328:notoriOS.c    ****     printTestStatus(t_sd_card);
 869              		.loc 1 328 0
 870 00b2 07F5C274 		add	r4, r7, #388
 871 00b6 6846     		mov	r0, sp
 872 00b8 04F11003 		add	r3, r4, #16
 873 00bc 40F27112 		movw	r2, #369
 874 00c0 1946     		mov	r1, r3
 875 00c2 FFF7FEFF 		bl	memcpy
 876 00c6 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 877 00ca FFF7FEFF 		bl	printTestStatus
 329:notoriOS.c    ****     
 330:notoriOS.c    ****     // Test modem
 331:notoriOS.c    ****     test_t t_modem = modem_test();
 878              		.loc 1 331 0
 879 00ce 3B46     		mov	r3, r7
 880 00d0 1846     		mov	r0, r3
 881 00d2 FFF7FEFF 		bl	modem_test
 332:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"MEID=%s, SIMID=%s, DEVICEID=%s",modem_info.imei,modem_info.sim_i
 882              		.loc 1 332 0
 883 00d6 104B     		ldr	r3, .L32+4
 884 00d8 0093     		str	r3, [sp]
 885 00da 104B     		ldr	r3, .L32+8
 886 00dc 104A     		ldr	r2, .L32+12
 887 00de 1149     		ldr	r1, .L32+16
 888 00e0 0320     		movs	r0, #3
 889 00e2 FFF7FEFF 		bl	printNotif
 333:notoriOS.c    ****     printTestStatus(t_modem);
 890              		.loc 1 333 0
 891 00e6 3C46     		mov	r4, r7
 892 00e8 6846     		mov	r0, sp
 893 00ea 04F11003 		add	r3, r4, #16
 894 00ee 40F27112 		movw	r2, #369
 895 00f2 1946     		mov	r1, r3
 896 00f4 FFF7FEFF 		bl	memcpy
 897 00f8 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 898 00fc FFF7FEFF 		bl	printTestStatus
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 23


 334:notoriOS.c    ****     
 335:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"\n\n-------------END TESTS---------------\n\n");
 899              		.loc 1 335 0
 900 0100 0949     		ldr	r1, .L32+20
 901 0102 0320     		movs	r0, #3
 902 0104 FFF7FEFF 		bl	printNotif
 336:notoriOS.c    **** 
 337:notoriOS.c    **** }
 903              		.loc 1 337 0
 904 0108 00BF     		nop
 905 010a 07F61C17 		addw	r7, r7, #2332
 906              		.cfi_def_cfa_offset 12
 907 010e BD46     		mov	sp, r7
 908              		.cfi_def_cfa_register 13
 909              		@ sp needed
 910 0110 90BD     		pop	{r4, r7, pc}
 911              	.L33:
 912 0112 00BF     		.align	2
 913              	.L32:
 914 0114 3C000000 		.word	.LC2
 915 0118 04000000 		.word	system_info+4
 916 011c 00000000 		.word	modem_info
 917 0120 28000000 		.word	modem_info+40
 918 0124 68000000 		.word	.LC3
 919 0128 88000000 		.word	.LC4
 920              		.cfi_endproc
 921              	.LFE72:
 922              		.size	ChickityCheckYourselfBeforeYouWreckYourself, .-ChickityCheckYourselfBeforeYouWreckYourself
 923              		.section	.text.main,"ax",%progbits
 924              		.align	2
 925              		.global	main
 926              		.thumb
 927              		.thumb_func
 928              		.type	main, %function
 929              	main:
 930              	.LFB73:
 338:notoriOS.c    **** 
 339:notoriOS.c    **** // ==============================================
 340:notoriOS.c    **** // Processes Core Tasks
 341:notoriOS.c    **** // ==============================================
 342:notoriOS.c    **** int main(void)
 343:notoriOS.c    **** {
 931              		.loc 1 343 0
 932              		.cfi_startproc
 933              		@ args = 0, pretend = 0, frame = 0
 934              		@ frame_needed = 1, uses_anonymous_args = 0
 935 0000 80B5     		push	{r7, lr}
 936              		.cfi_def_cfa_offset 8
 937              		.cfi_offset 7, -8
 938              		.cfi_offset 14, -4
 939 0002 00AF     		add	r7, sp, #0
 940              		.cfi_def_cfa_register 7
 344:notoriOS.c    ****     CyGlobalIntEnable; /* Enable global interrupts. */
 941              		.loc 1 344 0
 942              		.syntax unified
 943              	@ 344 "notoriOS.c" 1
 944 0004 62B6     		CPSIE   i
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 24


 945              	@ 0 "" 2
 345:notoriOS.c    **** 
 346:notoriOS.c    ****     ReadyOrNot(); // Initialize 
 946              		.loc 1 346 0
 947              		.thumb
 948              		.syntax unified
 949 0006 FFF7FEFF 		bl	ReadyOrNot
 347:notoriOS.c    ****     
 348:notoriOS.c    ****     ChickityCheckYourselfBeforeYouWreckYourself(); // Run tests for all components on bootup
 950              		.loc 1 348 0
 951 000a FFF7FEFF 		bl	ChickityCheckYourselfBeforeYouWreckYourself
 952              	.L36:
 349:notoriOS.c    ****    
 350:notoriOS.c    ****     for(;;) // (;;) means an infinite loop
 351:notoriOS.c    ****     {
 352:notoriOS.c    ****         
 353:notoriOS.c    ****         if( ! WorkWorkWorkWorkWorkWork() ) // Complete the work
 953              		.loc 1 353 0
 954 000e FFF7FEFF 		bl	WorkWorkWorkWorkWorkWork
 955 0012 0346     		mov	r3, r0
 956 0014 002B     		cmp	r3, #0
 957 0016 FAD1     		bne	.L36
 354:notoriOS.c    ****         {
 355:notoriOS.c    ****            LayBack(); // Lay back (sleep) when there isn't work
 958              		.loc 1 355 0
 959 0018 FFF7FEFF 		bl	LayBack
 356:notoriOS.c    ****         }
 357:notoriOS.c    ****     }
 960              		.loc 1 357 0
 961 001c F7E7     		b	.L36
 962              		.cfi_endproc
 963              	.LFE73:
 964              		.size	main, .-main
 965 001e 00BF     		.section	.rodata
 966 00b2 0000     		.align	2
 967              	.LC5:
 968 00b4 4D6F6465 		.ascii	"Modem is ready.\000"
 968      6D206973 
 968      20726561 
 968      64792E00 
 969              		.align	2
 970              	.LC6:
 971 00c4 256400   		.ascii	"%d\000"
 972 00c7 00       		.align	2
 973              	.LC7:
 974 00c8 72737270 		.ascii	"rsrp\000"
 974      00
 975 00cd 000000   		.align	2
 976              	.LC8:
 977 00d0 72736370 		.ascii	"rscp\000"
 977      00
 978 00d5 000000   		.align	2
 979              	.LC9:
 980 00d8 7472795F 		.ascii	"try_counter\000"
 980      636F756E 
 980      74657200 
 981              		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 25


 982              	.LC10:
 983 00e4 64617461 		.ascii	"data_count_sent\000"
 983      5F636F75 
 983      6E745F73 
 983      656E7400 
 984              		.align	2
 985              	.LC11:
 986 00f4 64617461 		.ascii	"data_count_desired\000"
 986      5F636F75 
 986      6E745F64 
 986      65736972 
 986      656400
 987 0107 00       		.align	2
 988              	.LC12:
 989 0108 42656769 		.ascii	"Begin HTTP post.\000"
 989      6E204854 
 989      54502070 
 989      6F73742E 
 989      00
 990 0119 000000   		.align	2
 991              	.LC13:
 992 011c 30653764 		.ascii	"0e7df3f9bf67d2b0c71edf207b1a083d428e491e\000"
 992      66336639 
 992      62663637 
 992      64326230 
 992      63373165 
 993 0145 000000   		.align	2
 994              	.LC14:
 995 0148 6170692F 		.ascii	"api/v1/write\000"
 995      76312F77 
 995      72697465 
 995      00
 996 0155 000000   		.align	2
 997              	.LC15:
 998 0158 48545450 		.ascii	"HTTP route: %s\000"
 998      20726F75 
 998      74653A20 
 998      257300
 999 0167 00       		.align	2
 1000              	.LC16:
 1001 0168 312E3100 		.ascii	"1.1\000"
 1002              		.align	2
 1003              	.LC17:
 1004 016c 00       		.ascii	"\000"
 1005 016d 000000   		.align	2
 1006              	.LC18:
 1007 0170 436C6F73 		.ascii	"Close\000"
 1007      6500
 1008 0176 0000     		.align	2
 1009              	.LC19:
 1010 0178 504F5354 		.ascii	"POST\000"
 1010      00
 1011 017d 000000   		.align	2
 1012              	.LC20:
 1013 0180 46756C6C 		.ascii	"Full HTTP Request: %s\000"
 1013      20485454 
 1013      50205265 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 26


 1013      71756573 
 1013      743A2025 
 1014 0196 0000     		.align	2
 1015              	.LC21:
 1016 0198 41542353 		.ascii	"AT#SD=1,0,%d,\"%s\",0,0,1\015\000"
 1016      443D312C 
 1016      302C2564 
 1016      2C222573 
 1016      222C302C 
 1017 01b1 000000   		.align	2
 1018              	.LC22:
 1019 01b4 257300   		.ascii	"%s\000"
 1020 01b7 00       		.align	2
 1021              	.LC23:
 1022 01b8 4F4B00   		.ascii	"OK\000"
 1023              		.global	__aeabi_ui2d
 1024              		.global	__aeabi_d2iz
 1025 01bb 00       		.align	2
 1026              	.LC24:
 1027 01bc 68747470 		.ascii	"http_request len: %d\000"
 1027      5F726571 
 1027      75657374 
 1027      206C656E 
 1027      3A202564 
 1028 01d1 000000   		.align	2
 1029              	.LC25:
 1030 01d4 23206F66 		.ascii	"# of packets: %d\000"
 1030      20706163 
 1030      6B657473 
 1030      3A202564 
 1030      00
 1031 01e5 000000   		.align	2
 1032              	.LC26:
 1033 01e8 3E00     		.ascii	">\000"
 1034 01ea 0000     		.align	2
 1035              	.LC27:
 1036 01ec 41542353 		.ascii	"AT#SSEND=1\015\012\000"
 1036      53454E44 
 1036      3D310D0A 
 1036      00
 1037 01f9 000000   		.align	2
 1038              	.LC28:
 1039 01fc 1A00     		.ascii	"\032\000"
 1040 01fe 0000     		.align	2
 1041              	.LC29:
 1042 0200 6368756E 		.ascii	"chunk %d: %s\000"
 1042      6B202564 
 1042      3A202573 
 1042      00
 1043 020d 000000   		.align	2
 1044              	.LC30:
 1045 0210 5352494E 		.ascii	"SRING\000"
 1045      4700
 1046 0216 0000     		.align	2
 1047              	.LC31:
 1048 0218 4F532D4F 		.ascii	"OS-OK\000"
 1048      4B00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 27


 1049 021e 0000     		.align	2
 1050              	.LC32:
 1051 0220 41542353 		.ascii	"AT#SRECV=1,1000\015\000"
 1051      52454356 
 1051      3D312C31 
 1051      3030300D 
 1051      00
 1052 0231 000000   		.align	2
 1053              	.LC33:
 1054 0234 6D6F6465 		.ascii	"modem_tx_time\000"
 1054      6D5F7478 
 1054      5F74696D 
 1054      6500
 1055 0242 0000     		.align	2
 1056              	.LC34:
 1057 0244 4F532D4E 		.ascii	"OS-NO: Could not receive data from server.\000"
 1057      4F3A2043 
 1057      6F756C64 
 1057      206E6F74 
 1057      20726563 
 1058              		.section	.text.syncData,"ax",%progbits
 1059              		.align	2
 1060              		.global	syncData
 1061              		.thumb
 1062              		.thumb_func
 1063              		.type	syncData, %function
 1064              	syncData:
 1065              	.LFB74:
 358:notoriOS.c    **** }
 359:notoriOS.c    **** 
 360:notoriOS.c    **** // ==============================================
 361:notoriOS.c    **** // Syncs data with server
 362:notoriOS.c    **** // Returns 0 when done
 363:notoriOS.c    **** // ==============================================
 364:notoriOS.c    **** uint8 syncData(){
 1066              		.loc 1 364 0
 1067              		.cfi_startproc
 1068              		@ args = 0, pretend = 0, frame = 1360
 1069              		@ frame_needed = 1, uses_anonymous_args = 0
 1070 0000 90B5     		push	{r4, r7, lr}
 1071              		.cfi_def_cfa_offset 12
 1072              		.cfi_offset 4, -12
 1073              		.cfi_offset 7, -8
 1074              		.cfi_offset 14, -4
 1075 0002 ADF26C5D 		subw	sp, sp, #1388
 1076              		.cfi_def_cfa_offset 1400
 1077 0006 06AF     		add	r7, sp, #24
 1078              		.cfi_def_cfa 7, 1376
 365:notoriOS.c    ****     
 366:notoriOS.c    ****     /*
 367:notoriOS.c    ****     //at_write_command("AT#SCFG?\r","OK",1000);
 368:notoriOS.c    ****     uint8 check = 0;
 369:notoriOS.c    ****     //"AT#SD=,0,80,\”www.google.com\”,0,0,0\r"
 370:notoriOS.c    ****     check = at_write_command("AT#SD=1,0,8086,\"data.open-storm.org\",0,0,1\r","OK",10000u);
 371:notoriOS.c    ****     check = at_write_command("AT#SSEND=1\r\n",   ">", 1000u);
 372:notoriOS.c    ****     check = at_write_command("POST /write?db=ARB&u=generic_node&p=MakeFloodsCurrents HTTP/1.1\r\nHo
 373:notoriOS.c    ****     */
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 28


 374:notoriOS.c    **** 
 375:notoriOS.c    ****     // Blink LED so we know it's about to sync data
 376:notoriOS.c    ****     LED_Write(1u);
 1079              		.loc 1 376 0
 1080 0008 0120     		movs	r0, #1
 1081 000a FFF7FEFF 		bl	LED_Write
 377:notoriOS.c    ****     CyDelay(100u);
 1082              		.loc 1 377 0
 1083 000e 6420     		movs	r0, #100
 1084 0010 FFF7FEFF 		bl	CyDelay
 378:notoriOS.c    ****     LED_Write(0u);
 1085              		.loc 1 378 0
 1086 0014 0020     		movs	r0, #0
 1087 0016 FFF7FEFF 		bl	LED_Write
 379:notoriOS.c    **** 
 380:notoriOS.c    ****     
 381:notoriOS.c    ****     // If there's no data, not need to do anything
 382:notoriOS.c    ****     if(sizeOfDataStack() == 0){        
 1088              		.loc 1 382 0
 1089 001a FFF7FEFF 		bl	sizeOfDataStack
 1090 001e 0346     		mov	r3, r0
 1091 0020 002B     		cmp	r3, #0
 1092 0022 01D1     		bne	.L38
 383:notoriOS.c    ****         return 0u;
 1093              		.loc 1 383 0
 1094 0024 0023     		movs	r3, #0
 1095 0026 03E2     		b	.L39
 1096              	.L38:
 384:notoriOS.c    ****         }
 385:notoriOS.c    ****     
 386:notoriOS.c    ****     // Create request body, in this case influx
 387:notoriOS.c    ****     // Place body into HTTP request header
 388:notoriOS.c    ****     // Fire up modem and get it out
 389:notoriOS.c    ****      
 390:notoriOS.c    ****     
 391:notoriOS.c    ****     // Try up to 2 times to connect to the modem
 392:notoriOS.c    ****     if(modem_get_state() == MODEM_STATE_OFF){
 1097              		.loc 1 392 0
 1098 0028 FFF7FEFF 		bl	modem_get_state
 1099 002c 0346     		mov	r3, r0
 1100 002e 002B     		cmp	r3, #0
 1101 0030 11D1     		bne	.L40
 393:notoriOS.c    **** 
 394:notoriOS.c    ****         try_counter++;
 1102              		.loc 1 394 0
 1103 0032 AE4B     		ldr	r3, .L52
 1104 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1105 0036 0133     		adds	r3, r3, #1
 1106 0038 DAB2     		uxtb	r2, r3
 1107 003a AC4B     		ldr	r3, .L52
 1108 003c 1A70     		strb	r2, [r3]
 395:notoriOS.c    ****         	
 396:notoriOS.c    ****         if(try_counter <= 2){
 1109              		.loc 1 396 0
 1110 003e AB4B     		ldr	r3, .L52
 1111 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1112 0042 022B     		cmp	r3, #2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 29


 1113 0044 02D8     		bhi	.L41
 397:notoriOS.c    ****             modem_power_up();
 1114              		.loc 1 397 0
 1115 0046 FFF7FEFF 		bl	modem_power_up
 1116 004a F0E1     		b	.L42
 1117              	.L41:
 398:notoriOS.c    ****         }else{
 399:notoriOS.c    ****             try_counter = 0;
 1118              		.loc 1 399 0
 1119 004c A74B     		ldr	r3, .L52
 1120 004e 0022     		movs	r2, #0
 1121 0050 1A70     		strb	r2, [r3]
 400:notoriOS.c    ****             return 0u;
 1122              		.loc 1 400 0
 1123 0052 0023     		movs	r3, #0
 1124 0054 ECE1     		b	.L39
 1125              	.L40:
 401:notoriOS.c    ****             }
 402:notoriOS.c    ****             
 403:notoriOS.c    ****     }else if(modem_get_state() == MODEM_STATE_READY){
 1126              		.loc 1 403 0
 1127 0056 FFF7FEFF 		bl	modem_get_state
 1128 005a 0346     		mov	r3, r0
 1129 005c 042B     		cmp	r3, #4
 1130 005e 40F0E681 		bne	.L42
 1131              	.LBB2:
 404:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Modem is ready.");
 1132              		.loc 1 404 0
 1133 0062 A349     		ldr	r1, .L52+4
 1134 0064 0020     		movs	r0, #0
 1135 0066 FFF7FEFF 		bl	printNotif
 405:notoriOS.c    ****         
 406:notoriOS.c    ****         http_request[0] = '\0';
 1136              		.loc 1 406 0
 1137 006a A24B     		ldr	r3, .L52+8
 1138 006c 0022     		movs	r2, #0
 1139 006e 1A70     		strb	r2, [r3]
 407:notoriOS.c    ****         http_body[0] = '\0';
 1140              		.loc 1 407 0
 1141 0070 A14B     		ldr	r3, .L52+12
 1142 0072 0022     		movs	r2, #0
 1143 0074 1A70     		strb	r2, [r3]
 408:notoriOS.c    ****         http_route[0] = '\0';
 1144              		.loc 1 408 0
 1145 0076 A14B     		ldr	r3, .L52+16
 1146 0078 0022     		movs	r2, #0
 1147 007a 1A70     		strb	r2, [r3]
 409:notoriOS.c    ****         //char *base = "write";
 410:notoriOS.c    ****         
 411:notoriOS.c    ****         // Push cell strength data (RSRP: reference signal received power and RSCP: received signal
 412:notoriOS.c    ****         char s_rsrp[DATA_MAX_KEY_LENGTH];
 413:notoriOS.c    ****         snprintf(s_rsrp,sizeof(s_rsrp),"%d",modem_stats.rsrp);
 1148              		.loc 1 413 0
 1149 007c A04B     		ldr	r3, .L52+20
 1150 007e 5B69     		ldr	r3, [r3, #20]
 1151 0080 07F5A560 		add	r0, r7, #1320
 1152 0084 9F4A     		ldr	r2, .L52+24
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 30


 1153 0086 1421     		movs	r1, #20
 1154 0088 FFF7FEFF 		bl	snprintf
 414:notoriOS.c    ****         pushData("rsrp", s_rsrp, getTimeStamp());
 1155              		.loc 1 414 0
 1156 008c FFF7FEFF 		bl	getTimeStamp
 1157 0090 0246     		mov	r2, r0
 1158 0092 07F5A563 		add	r3, r7, #1320
 1159 0096 1946     		mov	r1, r3
 1160 0098 9B48     		ldr	r0, .L52+28
 1161 009a FFF7FEFF 		bl	pushData
 415:notoriOS.c    ****         
 416:notoriOS.c    ****         char s_rscp[DATA_MAX_KEY_LENGTH];
 417:notoriOS.c    ****         snprintf(s_rscp,sizeof(s_rscp),"%d",modem_stats.rscp);
 1162              		.loc 1 417 0
 1163 009e 984B     		ldr	r3, .L52+20
 1164 00a0 9B68     		ldr	r3, [r3, #8]
 1165 00a2 07F21450 		addw	r0, r7, #1300
 1166 00a6 974A     		ldr	r2, .L52+24
 1167 00a8 1421     		movs	r1, #20
 1168 00aa FFF7FEFF 		bl	snprintf
 418:notoriOS.c    ****         pushData("rscp", s_rscp, getTimeStamp());
 1169              		.loc 1 418 0
 1170 00ae FFF7FEFF 		bl	getTimeStamp
 1171 00b2 0246     		mov	r2, r0
 1172 00b4 07F21453 		addw	r3, r7, #1300
 1173 00b8 1946     		mov	r1, r3
 1174 00ba 9448     		ldr	r0, .L52+32
 1175 00bc FFF7FEFF 		bl	pushData
 419:notoriOS.c    ****         
 420:notoriOS.c    ****         // Push syncData try_counter to know how many tries it tried to connect
 421:notoriOS.c    ****         char c_try_counter[20];
 422:notoriOS.c    ****         snprintf(c_try_counter,sizeof(c_try_counter),"%d",try_counter);
 1176              		.loc 1 422 0
 1177 00c0 8A4B     		ldr	r3, .L52
 1178 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1179 00c4 07F5A060 		add	r0, r7, #1280
 1180 00c8 8E4A     		ldr	r2, .L52+24
 1181 00ca 1421     		movs	r1, #20
 1182 00cc FFF7FEFF 		bl	snprintf
 423:notoriOS.c    ****         pushData("try_counter",c_try_counter,getTimeStamp());
 1183              		.loc 1 423 0
 1184 00d0 FFF7FEFF 		bl	getTimeStamp
 1185 00d4 0246     		mov	r2, r0
 1186 00d6 07F5A063 		add	r3, r7, #1280
 1187 00da 1946     		mov	r1, r3
 1188 00dc 8C48     		ldr	r0, .L52+36
 1189 00de FFF7FEFF 		bl	pushData
 424:notoriOS.c    ****         
 425:notoriOS.c    ****         // Get size of the actual data stack count and push it to the stack
 426:notoriOS.c    ****         // If the buffer didn't overflow, then the data_count_sent is dataPointsInStack
 427:notoriOS.c    ****         // Otherwise, if the buffer overflows, then the data_count_sent is DATA_MAX_COUNT
 428:notoriOS.c    ****         if(buffer_overflow == false){
 1190              		.loc 1 428 0
 1191 00e2 8C4B     		ldr	r3, .L52+40
 1192 00e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1193 00e6 83F00103 		eor	r3, r3, #1
 1194 00ea DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 31


 1195 00ec 002B     		cmp	r3, #0
 1196 00ee 16D0     		beq	.L43
 1197              	.LBB3:
 429:notoriOS.c    ****             uint16 data_count_sent = sizeOfDataStack();
 1198              		.loc 1 429 0
 1199 00f0 FFF7FEFF 		bl	sizeOfDataStack
 1200 00f4 0346     		mov	r3, r0
 1201 00f6 A7F84835 		strh	r3, [r7, #1352]	@ movhi
 430:notoriOS.c    ****             char c_data_count_sent[20];
 431:notoriOS.c    ****             snprintf(c_data_count_sent,sizeof(c_data_count_sent),"%d",data_count_sent);
 1202              		.loc 1 431 0
 1203 00fa B7F84835 		ldrh	r3, [r7, #1352]
 1204 00fe 07F59B60 		add	r0, r7, #1240
 1205 0102 804A     		ldr	r2, .L52+24
 1206 0104 1421     		movs	r1, #20
 1207 0106 FFF7FEFF 		bl	snprintf
 432:notoriOS.c    ****             pushData("data_count_sent",c_data_count_sent,getTimeStamp());
 1208              		.loc 1 432 0
 1209 010a FFF7FEFF 		bl	getTimeStamp
 1210 010e 0246     		mov	r2, r0
 1211 0110 07F59B63 		add	r3, r7, #1240
 1212 0114 1946     		mov	r1, r3
 1213 0116 8048     		ldr	r0, .L52+44
 1214 0118 FFF7FEFF 		bl	pushData
 1215              	.LBE3:
 1216 011c 0FE0     		b	.L44
 1217              	.L43:
 1218              	.LBB4:
 433:notoriOS.c    ****         }else{
 434:notoriOS.c    ****             char c_data_count_sent[20];
 435:notoriOS.c    ****             snprintf(c_data_count_sent,sizeof(c_data_count_sent),"%d",DATA_MAX_VALUES);
 1219              		.loc 1 435 0
 1220 011e 07F2C440 		addw	r0, r7, #1220
 1221 0122 9623     		movs	r3, #150
 1222 0124 774A     		ldr	r2, .L52+24
 1223 0126 1421     		movs	r1, #20
 1224 0128 FFF7FEFF 		bl	snprintf
 436:notoriOS.c    ****             pushData("data_count_sent",c_data_count_sent,getTimeStamp());
 1225              		.loc 1 436 0
 1226 012c FFF7FEFF 		bl	getTimeStamp
 1227 0130 0246     		mov	r2, r0
 1228 0132 07F2C443 		addw	r3, r7, #1220
 1229 0136 1946     		mov	r1, r3
 1230 0138 7748     		ldr	r0, .L52+44
 1231 013a FFF7FEFF 		bl	pushData
 1232              	.L44:
 1233              	.LBE4:
 437:notoriOS.c    ****         }
 438:notoriOS.c    ****         
 439:notoriOS.c    ****         // Get size of the desired data stack count and push it to the stack
 440:notoriOS.c    ****         uint16 data_count_desired = sizeOfDataStackDesired();
 1234              		.loc 1 440 0
 1235 013e FFF7FEFF 		bl	sizeOfDataStackDesired
 1236 0142 0346     		mov	r3, r0
 1237 0144 A7F84635 		strh	r3, [r7, #1350]	@ movhi
 441:notoriOS.c    ****         char c_data_count_desired[20];
 442:notoriOS.c    ****         // subtract 1 to disclude data_count_sent so that it focuses only on the actual data
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 32


 443:notoriOS.c    ****         snprintf(c_data_count_desired,sizeof(c_data_count_desired),"%d", data_count_desired-1);
 1238              		.loc 1 443 0
 1239 0148 B7F84635 		ldrh	r3, [r7, #1350]
 1240 014c 013B     		subs	r3, r3, #1
 1241 014e 07F2EC40 		addw	r0, r7, #1260
 1242 0152 6C4A     		ldr	r2, .L52+24
 1243 0154 1421     		movs	r1, #20
 1244 0156 FFF7FEFF 		bl	snprintf
 444:notoriOS.c    ****         pushData("data_count_desired",c_data_count_desired,getTimeStamp());
 1245              		.loc 1 444 0
 1246 015a FFF7FEFF 		bl	getTimeStamp
 1247 015e 0246     		mov	r2, r0
 1248 0160 07F2EC43 		addw	r3, r7, #1260
 1249 0164 1946     		mov	r1, r3
 1250 0166 6D48     		ldr	r0, .L52+48
 1251 0168 FFF7FEFF 		bl	pushData
 445:notoriOS.c    ****         
 446:notoriOS.c    ****         // Construct HTPP request
 447:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Begin HTTP post.");
 1252              		.loc 1 447 0
 1253 016c 6C49     		ldr	r1, .L52+52
 1254 016e 0020     		movs	r0, #0
 1255 0170 FFF7FEFF 		bl	printNotif
 448:notoriOS.c    ****         
 449:notoriOS.c    ****         // Old influx API
 450:notoriOS.c    ****         // Construct_influx_route(http_route,base,system_settings.ep_user,system_settings.ep_pswd,s
 451:notoriOS.c    ****         construct_malcom_route(http_route,"api/v1/write",modem_info.imei,CURRENT_COMMIT);
 1256              		.loc 1 451 0
 1257 0174 6B4B     		ldr	r3, .L52+56
 1258 0176 6C4A     		ldr	r2, .L52+60
 1259 0178 6C49     		ldr	r1, .L52+64
 1260 017a 6048     		ldr	r0, .L52+16
 1261 017c FFF7FEFF 		bl	construct_malcom_route
 452:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"HTTP route: %s", http_route);
 1262              		.loc 1 452 0
 1263 0180 5E4A     		ldr	r2, .L52+16
 1264 0182 6B49     		ldr	r1, .L52+68
 1265 0184 0020     		movs	r0, #0
 1266 0186 FFF7FEFF 		bl	printNotif
 453:notoriOS.c    ****         
 454:notoriOS.c    ****         //OLD INFLUX API
 455:notoriOS.c    ****         //construct_influx_write_body(http_body,system_settings.node_id);
 456:notoriOS.c    ****         construct_malcom_body(http_body);
 1267              		.loc 1 456 0
 1268 018a 5B48     		ldr	r0, .L52+12
 1269 018c FFF7FEFF 		bl	construct_malcom_body
 457:notoriOS.c    ****         construct_generic_HTTP_request(http_request,http_body,system_settings.ep_host,http_route,sy
 1270              		.loc 1 457 0
 1271 0190 684B     		ldr	r3, .L52+72
 1272 0192 5B6E     		ldr	r3, [r3, #100]
 1273 0194 684A     		ldr	r2, .L52+76
 1274 0196 0592     		str	r2, [sp, #20]
 1275 0198 0022     		movs	r2, #0
 1276 019a 0492     		str	r2, [sp, #16]
 1277 019c 674A     		ldr	r2, .L52+80
 1278 019e 0392     		str	r2, [sp, #12]
 1279 01a0 674A     		ldr	r2, .L52+84
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 33


 1280 01a2 0292     		str	r2, [sp, #8]
 1281 01a4 674A     		ldr	r2, .L52+88
 1282 01a6 0192     		str	r2, [sp, #4]
 1283 01a8 0093     		str	r3, [sp]
 1284 01aa 544B     		ldr	r3, .L52+16
 1285 01ac 614A     		ldr	r2, .L52+72
 1286 01ae 5249     		ldr	r1, .L52+12
 1287 01b0 5048     		ldr	r0, .L52+8
 1288 01b2 FFF7FEFF 		bl	construct_generic_HTTP_request
 458:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Full HTTP Request: %s", http_request);
 1289              		.loc 1 458 0
 1290 01b6 4F4A     		ldr	r2, .L52+8
 1291 01b8 6349     		ldr	r1, .L52+92
 1292 01ba 0020     		movs	r0, #0
 1293 01bc FFF7FEFF 		bl	printNotif
 459:notoriOS.c    ****         
 460:notoriOS.c    ****         // Push request to modem and escape with <ctrl+z> escape sequence
 461:notoriOS.c    ****         // Open port and begin command line sequence
 462:notoriOS.c    ****         char portConfig[200];
 463:notoriOS.c    ****         uint8 status = 0u;
 1294              		.loc 1 463 0
 1295 01c0 0023     		movs	r3, #0
 1296 01c2 87F84535 		strb	r3, [r7, #1349]
 464:notoriOS.c    ****         
 465:notoriOS.c    ****         snprintf(portConfig,sizeof(portConfig),"AT#SD=1,0,%d,\"%s\",0,0,1\r",system_settings.ep_por
 1297              		.loc 1 465 0
 1298 01c6 5B4B     		ldr	r3, .L52+72
 1299 01c8 5A6E     		ldr	r2, [r3, #100]
 1300 01ca 381D     		adds	r0, r7, #4
 1301 01cc 594B     		ldr	r3, .L52+72
 1302 01ce 0093     		str	r3, [sp]
 1303 01d0 1346     		mov	r3, r2
 1304 01d2 5E4A     		ldr	r2, .L52+96
 1305 01d4 C821     		movs	r1, #200
 1306 01d6 FFF7FEFF 		bl	snprintf
 466:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"%s",portConfig);
 1307              		.loc 1 466 0
 1308 01da 3B1D     		adds	r3, r7, #4
 1309 01dc 1A46     		mov	r2, r3
 1310 01de 5C49     		ldr	r1, .L52+100
 1311 01e0 0020     		movs	r0, #0
 1312 01e2 FFF7FEFF 		bl	printNotif
 467:notoriOS.c    ****         status = at_write_command(portConfig,"OK",10000u);
 1313              		.loc 1 467 0
 1314 01e6 3B1D     		adds	r3, r7, #4
 1315 01e8 42F21072 		movw	r2, #10000
 1316 01ec 5949     		ldr	r1, .L52+104
 1317 01ee 1846     		mov	r0, r3
 1318 01f0 FFF7FEFF 		bl	at_write_command
 1319 01f4 0346     		mov	r3, r0
 1320 01f6 87F84535 		strb	r3, [r7, #1349]
 468:notoriOS.c    ****         
 469:notoriOS.c    ****         // create character pointer to chunk through the http_request
 470:notoriOS.c    ****         char *chunk;
 471:notoriOS.c    ****         // Set chunk to start where http_request starts
 472:notoriOS.c    ****         chunk = http_request;
 1321              		.loc 1 472 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 34


 1322 01fa 3E4B     		ldr	r3, .L52+8
 1323 01fc C7F84C35 		str	r3, [r7, #1356]
 473:notoriOS.c    ****         // variable for the number of packets to send
 474:notoriOS.c    ****         int8 packets;
 475:notoriOS.c    ****         packets = ceil(nextafter((strlen(http_request)/MAX_BYTES_SENT),MAX_BYTES_SENT));
 1324              		.loc 1 475 0
 1325 0200 3C48     		ldr	r0, .L52+8
 1326 0202 FFF7FEFF 		bl	strlen
 1327 0206 0246     		mov	r2, r0
 1328 0208 534B     		ldr	r3, .L52+108
 1329 020a A3FB0223 		umull	r2, r3, r3, r2
 1330 020e 5B09     		lsrs	r3, r3, #5
 1331 0210 1846     		mov	r0, r3
 1332 0212 FFF7FEFF 		bl	__aeabi_ui2d
 1333 0216 4FF00002 		mov	r2, #0
 1334 021a 504B     		ldr	r3, .L52+112
 1335 021c FFF7FEFF 		bl	nextafter
 1336 0220 0346     		mov	r3, r0
 1337 0222 0C46     		mov	r4, r1
 1338 0224 1846     		mov	r0, r3
 1339 0226 2146     		mov	r1, r4
 1340 0228 FFF7FEFF 		bl	ceil
 1341 022c 0346     		mov	r3, r0
 1342 022e 0C46     		mov	r4, r1
 1343 0230 1846     		mov	r0, r3
 1344 0232 2146     		mov	r1, r4
 1345 0234 FFF7FEFF 		bl	__aeabi_d2iz
 1346 0238 0346     		mov	r3, r0
 1347 023a 87F84435 		strb	r3, [r7, #1348]
 476:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT, "http_request len: %d", strlen(http_request));
 1348              		.loc 1 476 0
 1349 023e 2D48     		ldr	r0, .L52+8
 1350 0240 FFF7FEFF 		bl	strlen
 1351 0244 0346     		mov	r3, r0
 1352 0246 1A46     		mov	r2, r3
 1353 0248 4549     		ldr	r1, .L52+116
 1354 024a 0020     		movs	r0, #0
 1355 024c FFF7FEFF 		bl	printNotif
 477:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT, "# of packets: %d", packets);
 1356              		.loc 1 477 0
 1357 0250 97F94435 		ldrsb	r3, [r7, #1348]
 1358 0254 1A46     		mov	r2, r3
 1359 0256 4349     		ldr	r1, .L52+120
 1360 0258 0020     		movs	r0, #0
 1361 025a FFF7FEFF 		bl	printNotif
 1362              	.LBB5:
 478:notoriOS.c    ****         // while the size of the chunk of the data we are sending to the server is smaller than the
 479:notoriOS.c    ****         for(int8 packet = 0; packet < packets; packet++){
 1363              		.loc 1 479 0
 1364 025e 0023     		movs	r3, #0
 1365 0260 87F84B35 		strb	r3, [r7, #1355]
 1366 0264 9AE0     		b	.L45
 1367              	.L48:
 1368              	.LBB6:
 480:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 481:notoriOS.c    ****             char http_chunk[1001];
 482:notoriOS.c    ****             // AT command #SSEND= is an execution command that permits, while the module is in comm
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 35


 483:notoriOS.c    ****             // To complete the operation, send Ctrl-Z char to exit
 484:notoriOS.c    ****             status = at_write_command("AT#SSEND=1\r\n", ">", 1000u);
 1369              		.loc 1 484 0
 1370 0266 4FF47A72 		mov	r2, #1000
 1371 026a 3F49     		ldr	r1, .L52+124
 1372 026c 3F48     		ldr	r0, .L52+128
 1373 026e FFF7FEFF 		bl	at_write_command
 1374 0272 0346     		mov	r3, r0
 1375 0274 87F84535 		strb	r3, [r7, #1349]
 485:notoriOS.c    ****             // Print the first 1000 characters of http_request into http_chunk
 486:notoriOS.c    ****             snprintf(http_chunk, MAX_BYTES_SENT, "%s",chunk);
 1376              		.loc 1 486 0
 1377 0278 07F1CC00 		add	r0, r7, #204
 1378 027c D7F84C35 		ldr	r3, [r7, #1356]
 1379 0280 334A     		ldr	r2, .L52+100
 1380 0282 4FF4FA71 		mov	r1, #500
 1381 0286 FFF7FEFF 		bl	snprintf
 487:notoriOS.c    ****             // Append 1 character "<ctrl+z> escape sequence" to http_request to exit modem command 
 488:notoriOS.c    ****             strncat(http_chunk, "\032", 1); 
 1382              		.loc 1 488 0
 1383 028a 07F1CC03 		add	r3, r7, #204
 1384 028e 1846     		mov	r0, r3
 1385 0290 FFF7FEFF 		bl	strlen
 1386 0294 0346     		mov	r3, r0
 1387 0296 1A46     		mov	r2, r3
 1388 0298 07F1CC03 		add	r3, r7, #204
 1389 029c 1344     		add	r3, r3, r2
 1390 029e 3449     		ldr	r1, .L52+132
 1391 02a0 1A46     		mov	r2, r3
 1392 02a2 0B46     		mov	r3, r1
 1393 02a4 1B88     		ldrh	r3, [r3]	@ unaligned
 1394 02a6 1380     		strh	r3, [r2]	@ unaligned
 489:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"chunk %d: %s", packet, http_chunk);
 1395              		.loc 1 489 0
 1396 02a8 97F94B25 		ldrsb	r2, [r7, #1355]
 1397 02ac 07F1CC03 		add	r3, r7, #204
 1398 02b0 3049     		ldr	r1, .L52+136
 1399 02b2 0020     		movs	r0, #0
 1400 02b4 FFF7FEFF 		bl	printNotif
 490:notoriOS.c    ****             // Send data to server
 491:notoriOS.c    ****             if ((packet+1) != packets){
 1401              		.loc 1 491 0
 1402 02b8 97F94B35 		ldrsb	r3, [r7, #1355]
 1403 02bc 5A1C     		adds	r2, r3, #1
 1404 02be 97F94435 		ldrsb	r3, [r7, #1348]
 1405 02c2 9A42     		cmp	r2, r3
 1406 02c4 58D0     		beq	.L46
 492:notoriOS.c    ****                 status = at_write_command(http_chunk, "OK", 5000u);
 1407              		.loc 1 492 0
 1408 02c6 07F1CC03 		add	r3, r7, #204
 1409 02ca 41F28832 		movw	r2, #5000
 1410 02ce 2149     		ldr	r1, .L52+104
 1411 02d0 1846     		mov	r0, r3
 1412 02d2 FFF7FEFF 		bl	at_write_command
 1413 02d6 0346     		mov	r3, r0
 1414 02d8 87F84535 		strb	r3, [r7, #1349]
 493:notoriOS.c    ****                 // Move the pointer forward 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 36


 494:notoriOS.c    ****                 chunk = chunk + MAX_BYTES_SENT - 1;
 1415              		.loc 1 494 0
 1416 02dc D7F84C35 		ldr	r3, [r7, #1356]
 1417 02e0 03F2F313 		addw	r3, r3, #499
 1418 02e4 C7F84C35 		str	r3, [r7, #1356]
 1419 02e8 51E0     		b	.L47
 1420              	.L53:
 1421 02ea 00BF     		.align	2
 1422              	.L52:
 1423 02ec 00000000 		.word	try_counter
 1424 02f0 B4000000 		.word	.LC5
 1425 02f4 00000000 		.word	http_request
 1426 02f8 00000000 		.word	http_body
 1427 02fc 00000000 		.word	http_route
 1428 0300 00000000 		.word	modem_stats
 1429 0304 C4000000 		.word	.LC6
 1430 0308 C8000000 		.word	.LC7
 1431 030c D0000000 		.word	.LC8
 1432 0310 D8000000 		.word	.LC9
 1433 0314 00000000 		.word	buffer_overflow
 1434 0318 E4000000 		.word	.LC10
 1435 031c F4000000 		.word	.LC11
 1436 0320 08010000 		.word	.LC12
 1437 0324 1C010000 		.word	.LC13
 1438 0328 28000000 		.word	modem_info+40
 1439 032c 48010000 		.word	.LC14
 1440 0330 58010000 		.word	.LC15
 1441 0334 00000000 		.word	system_settings
 1442 0338 68010000 		.word	.LC16
 1443 033c 6C010000 		.word	.LC17
 1444 0340 70010000 		.word	.LC18
 1445 0344 78010000 		.word	.LC19
 1446 0348 80010000 		.word	.LC20
 1447 034c 98010000 		.word	.LC21
 1448 0350 B4010000 		.word	.LC22
 1449 0354 B8010000 		.word	.LC23
 1450 0358 D34D6210 		.word	274877907
 1451 035c 00407F40 		.word	1082081280
 1452 0360 BC010000 		.word	.LC24
 1453 0364 D4010000 		.word	.LC25
 1454 0368 E8010000 		.word	.LC26
 1455 036c EC010000 		.word	.LC27
 1456 0370 FC010000 		.word	.LC28
 1457 0374 00020000 		.word	.LC29
 1458              	.L46:
 495:notoriOS.c    ****             }else{
 496:notoriOS.c    ****                 status = at_write_command(http_chunk, "SRING", 5000u);
 1459              		.loc 1 496 0
 1460 0378 07F1CC03 		add	r3, r7, #204
 1461 037c 41F28832 		movw	r2, #5000
 1462 0380 2E49     		ldr	r1, .L54
 1463 0382 1846     		mov	r0, r3
 1464 0384 FFF7FEFF 		bl	at_write_command
 1465 0388 0346     		mov	r3, r0
 1466 038a 87F84535 		strb	r3, [r7, #1349]
 1467              	.L47:
 1468              	.LBE6:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 37


 479:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 1469              		.loc 1 479 0 discriminator 2
 1470 038e 97F94B35 		ldrsb	r3, [r7, #1355]
 1471 0392 DBB2     		uxtb	r3, r3
 1472 0394 0133     		adds	r3, r3, #1
 1473 0396 DBB2     		uxtb	r3, r3
 1474 0398 87F84B35 		strb	r3, [r7, #1355]
 1475              	.L45:
 479:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 1476              		.loc 1 479 0 is_stmt 0 discriminator 1
 1477 039c 97F94B25 		ldrsb	r2, [r7, #1355]
 1478 03a0 97F94435 		ldrsb	r3, [r7, #1348]
 1479 03a4 9A42     		cmp	r2, r3
 1480 03a6 FFF65EAF 		blt	.L48
 1481              	.LBE5:
 497:notoriOS.c    ****             }
 498:notoriOS.c    ****             
 499:notoriOS.c    ****         }
 500:notoriOS.c    ****         
 501:notoriOS.c    ****         // Read received buffer
 502:notoriOS.c    ****         // A good write will return code "OS-OK"
 503:notoriOS.c    ****         // AT command #SRECV= is an execution command that permits users to read data arrived throu
 504:notoriOS.c    ****         // = 1 means the UPD information is enabled: data are read just until the end of the UDP da
 505:notoriOS.c    ****         status = at_write_command("AT#SRECV=1,1000\r","OS-OK",5000u);
 1482              		.loc 1 505 0 is_stmt 1
 1483 03aa 41F28832 		movw	r2, #5000
 1484 03ae 2449     		ldr	r1, .L54+4
 1485 03b0 2448     		ldr	r0, .L54+8
 1486 03b2 FFF7FEFF 		bl	at_write_command
 1487 03b6 0346     		mov	r3, r0
 1488 03b8 87F84535 		strb	r3, [r7, #1349]
 506:notoriOS.c    ****         //printNotif(NOTIF_TYPE_EVENT,"Received SRECV: %s",uart_received_string);
 507:notoriOS.c    ****     
 508:notoriOS.c    ****   
 509:notoriOS.c    ****         // If it worked, clear the queue and clock how long the end-to-end tx took
 510:notoriOS.c    ****         if(status == 1u){
 1489              		.loc 1 510 0
 1490 03bc 97F84535 		ldrb	r3, [r7, #1349]	@ zero_extendqisi2
 1491 03c0 012B     		cmp	r3, #1
 1492 03c2 1DD1     		bne	.L49
 1493              	.LBB7:
 511:notoriOS.c    ****             get_updated_parameters_from_malcom();
 1494              		.loc 1 511 0
 1495 03c4 FFF7FEFF 		bl	get_updated_parameters_from_malcom
 512:notoriOS.c    ****             Clear_Data_Stack();
 1496              		.loc 1 512 0
 1497 03c8 FFF7FEFF 		bl	Clear_Data_Stack
 513:notoriOS.c    ****             int send_time = (int)(getTimeStamp()-(int32)modem_start_time_stamp);
 1498              		.loc 1 513 0
 1499 03cc FFF7FEFF 		bl	getTimeStamp
 1500 03d0 0246     		mov	r2, r0
 1501 03d2 1D4B     		ldr	r3, .L54+12
 1502 03d4 1B68     		ldr	r3, [r3]
 1503 03d6 D31A     		subs	r3, r2, r3
 1504 03d8 C7F84035 		str	r3, [r7, #1344]
 514:notoriOS.c    ****             char s_send_time[10];
 515:notoriOS.c    ****             snprintf(s_send_time,sizeof(s_send_time),"%d",send_time);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 38


 1505              		.loc 1 515 0
 1506 03dc 07F59760 		add	r0, r7, #1208
 1507 03e0 D7F84035 		ldr	r3, [r7, #1344]
 1508 03e4 194A     		ldr	r2, .L54+16
 1509 03e6 0A21     		movs	r1, #10
 1510 03e8 FFF7FEFF 		bl	snprintf
 516:notoriOS.c    ****             pushData("modem_tx_time",s_send_time,getTimeStamp());
 1511              		.loc 1 516 0
 1512 03ec FFF7FEFF 		bl	getTimeStamp
 1513 03f0 0246     		mov	r2, r0
 1514 03f2 07F59763 		add	r3, r7, #1208
 1515 03f6 1946     		mov	r1, r3
 1516 03f8 1548     		ldr	r0, .L54+20
 1517 03fa FFF7FEFF 		bl	pushData
 1518              	.LBE7:
 1519 03fe 03E0     		b	.L50
 1520              	.L49:
 517:notoriOS.c    ****         }else{
 518:notoriOS.c    ****             printNotif(NOTIF_TYPE_ERROR, "OS-NO: Could not receive data from server.");
 1521              		.loc 1 518 0
 1522 0400 1449     		ldr	r1, .L54+24
 1523 0402 0220     		movs	r0, #2
 1524 0404 FFF7FEFF 		bl	printNotif
 1525              	.L50:
 519:notoriOS.c    ****         }
 520:notoriOS.c    ****          
 521:notoriOS.c    ****         // Get time, and if it looks good, set the RTC with it
 522:notoriOS.c    ****         long network_time = modem_get_network_time();
 1526              		.loc 1 522 0
 1527 0408 FFF7FEFF 		bl	modem_get_network_time
 1528 040c C7F83C05 		str	r0, [r7, #1340]
 523:notoriOS.c    ****         if(network_time != 0){
 1529              		.loc 1 523 0
 1530 0410 D7F83C35 		ldr	r3, [r7, #1340]
 1531 0414 002B     		cmp	r3, #0
 1532 0416 03D0     		beq	.L51
 524:notoriOS.c    ****            setTime(network_time);
 1533              		.loc 1 524 0
 1534 0418 D7F83C05 		ldr	r0, [r7, #1340]
 1535 041c FFF7FEFF 		bl	setTime
 1536              	.L51:
 525:notoriOS.c    ****         }
 526:notoriOS.c    ****         
 527:notoriOS.c    ****         // If transmitted, flush the data stack and shut down modem
 528:notoriOS.c    ****         // If not -- keep the statck and try next time
 529:notoriOS.c    ****         // Power down the modem -- completely "kill" modem to conserve power
 530:notoriOS.c    ****         modem_power_down();
 1537              		.loc 1 530 0
 1538 0420 FFF7FEFF 		bl	modem_power_down
 531:notoriOS.c    ****         
 532:notoriOS.c    ****         try_counter = 0u;
 1539              		.loc 1 532 0
 1540 0424 0C4B     		ldr	r3, .L54+28
 1541 0426 0022     		movs	r2, #0
 1542 0428 1A70     		strb	r2, [r3]
 533:notoriOS.c    ****         return 0u;
 1543              		.loc 1 533 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 39


 1544 042a 0023     		movs	r3, #0
 1545 042c 00E0     		b	.L39
 1546              	.L42:
 1547              	.LBE2:
 534:notoriOS.c    ****     }
 535:notoriOS.c    ****       
 536:notoriOS.c    ****       return 1u; // Not done yet
 1548              		.loc 1 536 0
 1549 042e 0123     		movs	r3, #1
 1550              	.L39:
 537:notoriOS.c    **** }
 1551              		.loc 1 537 0 discriminator 1
 1552 0430 1846     		mov	r0, r3
 1553 0432 07F25457 		addw	r7, r7, #1364
 1554              		.cfi_def_cfa_offset 12
 1555 0436 BD46     		mov	sp, r7
 1556              		.cfi_def_cfa_register 13
 1557              		@ sp needed
 1558 0438 90BD     		pop	{r4, r7, pc}
 1559              	.L55:
 1560 043a 00BF     		.align	2
 1561              	.L54:
 1562 043c 10020000 		.word	.LC30
 1563 0440 18020000 		.word	.LC31
 1564 0444 20020000 		.word	.LC32
 1565 0448 00000000 		.word	modem_start_time_stamp
 1566 044c C4000000 		.word	.LC6
 1567 0450 34020000 		.word	.LC33
 1568 0454 44020000 		.word	.LC34
 1569 0458 00000000 		.word	try_counter
 1570              		.cfi_endproc
 1571              	.LFE74:
 1572              		.size	syncData, .-syncData
 1573              		.section	.text.configureRemoteParams,"ax",%progbits
 1574              		.align	2
 1575              		.global	configureRemoteParams
 1576              		.thumb
 1577              		.thumb_func
 1578              		.type	configureRemoteParams, %function
 1579              	configureRemoteParams:
 1580              	.LFB75:
 538:notoriOS.c    **** 
 539:notoriOS.c    **** // ==============================================
 540:notoriOS.c    **** // Syncs with cell-tower clock and check meta-DB
 541:notoriOS.c    **** // Returns 0 when done
 542:notoriOS.c    **** // ==============================================
 543:notoriOS.c    **** uint8 configureRemoteParams(){
 1581              		.loc 1 543 0
 1582              		.cfi_startproc
 1583              		@ args = 0, pretend = 0, frame = 8
 1584              		@ frame_needed = 1, uses_anonymous_args = 0
 1585 0000 80B5     		push	{r7, lr}
 1586              		.cfi_def_cfa_offset 8
 1587              		.cfi_offset 7, -8
 1588              		.cfi_offset 14, -4
 1589 0002 82B0     		sub	sp, sp, #8
 1590              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 40


 1591 0004 00AF     		add	r7, sp, #0
 1592              		.cfi_def_cfa_register 7
 544:notoriOS.c    ****     
 545:notoriOS.c    ****     if(modem_get_state() == MODEM_STATE_OFF){
 1593              		.loc 1 545 0
 1594 0006 FFF7FEFF 		bl	modem_get_state
 1595 000a 0346     		mov	r3, r0
 1596 000c 002B     		cmp	r3, #0
 1597 000e 02D1     		bne	.L57
 546:notoriOS.c    ****         // This puts all the modem points into a state that won't leak power    
 547:notoriOS.c    ****         modem_power_up();
 1598              		.loc 1 547 0
 1599 0010 FFF7FEFF 		bl	modem_power_up
 1600 0014 11E0     		b	.L58
 1601              	.L57:
 548:notoriOS.c    ****             
 549:notoriOS.c    ****     }else if(modem_get_state() == MODEM_STATE_READY){
 1602              		.loc 1 549 0
 1603 0016 FFF7FEFF 		bl	modem_get_state
 1604 001a 0346     		mov	r3, r0
 1605 001c 042B     		cmp	r3, #4
 1606 001e 0CD1     		bne	.L58
 1607              	.LBB8:
 550:notoriOS.c    ****         
 551:notoriOS.c    ****         // This is where we will interfasce with some sort of broker that assings node IDs
 552:notoriOS.c    ****         
 553:notoriOS.c    ****         // Get time, and if it looks good, set the RTC with it
 554:notoriOS.c    ****         long network_time = modem_get_network_time();
 1608              		.loc 1 554 0
 1609 0020 FFF7FEFF 		bl	modem_get_network_time
 1610 0024 7860     		str	r0, [r7, #4]
 555:notoriOS.c    ****         if(network_time != 0){
 1611              		.loc 1 555 0
 1612 0026 7B68     		ldr	r3, [r7, #4]
 1613 0028 002B     		cmp	r3, #0
 1614 002a 02D0     		beq	.L59
 556:notoriOS.c    ****             setTime(network_time);
 1615              		.loc 1 556 0
 1616 002c 7868     		ldr	r0, [r7, #4]
 1617 002e FFF7FEFF 		bl	setTime
 1618              	.L59:
 557:notoriOS.c    ****         }
 558:notoriOS.c    ****         
 559:notoriOS.c    ****         // Get GPS coordinates
 560:notoriOS.c    ****         //gps_t gps = modem_get_gps_coordinates();
 561:notoriOS.c    ****         // Power down the modem -- completely "kill" modem to conserve power
 562:notoriOS.c    ****         modem_power_down();
 1619              		.loc 1 562 0
 1620 0032 FFF7FEFF 		bl	modem_power_down
 563:notoriOS.c    ****         return 0u;
 1621              		.loc 1 563 0
 1622 0036 0023     		movs	r3, #0
 1623 0038 00E0     		b	.L60
 1624              	.L58:
 1625              	.LBE8:
 564:notoriOS.c    ****         
 565:notoriOS.c    ****     }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 41


 566:notoriOS.c    ****     
 567:notoriOS.c    ****     return 1u;
 1626              		.loc 1 567 0
 1627 003a 0123     		movs	r3, #1
 1628              	.L60:
 568:notoriOS.c    **** }
 1629              		.loc 1 568 0
 1630 003c 1846     		mov	r0, r3
 1631 003e 0837     		adds	r7, r7, #8
 1632              		.cfi_def_cfa_offset 8
 1633 0040 BD46     		mov	sp, r7
 1634              		.cfi_def_cfa_register 13
 1635              		@ sp needed
 1636 0042 80BD     		pop	{r7, pc}
 1637              		.cfi_endproc
 1638              	.LFE75:
 1639              		.size	configureRemoteParams, .-configureRemoteParams
 1640              		.section	.rodata
 1641 026f 00       		.align	2
 1642              	.LC35:
 1643 0270 256C6400 		.ascii	"%ld\000"
 1644              		.align	2
 1645              	.LC36:
 1646 0274 43757272 		.ascii	"Current_Node_Type\000"
 1646      656E745F 
 1646      4E6F6465 
 1646      5F547970 
 1646      6500
 1647 0286 0000     		.align	2
 1648              	.LC37:
 1649 0288 6D617862 		.ascii	"maxbotix_depth=%s\000"
 1649      6F746978 
 1649      5F646570 
 1649      74683D25 
 1649      7300
 1650 029a 0000     		.align	2
 1651              	.LC38:
 1652 029c 6D617862 		.ascii	"maxbotix_depth\000"
 1652      6F746978 
 1652      5F646570 
 1652      746800
 1653 02ab 00       		.align	2
 1654              	.LC39:
 1655 02ac 612B00   		.ascii	"a+\000"
 1656 02af 00       		.align	2
 1657              	.LC40:
 1658 02b0 206D6178 		.ascii	" maxbotix_depth: \000"
 1658      626F7469 
 1658      785F6465 
 1658      7074683A 
 1658      2000
 1659 02c2 0000     		.align	2
 1660              	.LC41:
 1661 02c4 2000     		.ascii	" \000"
 1662 02c6 0000     		.align	2
 1663              	.LC42:
 1664 02c8 436F756C 		.ascii	"Could not get valid readings from Maxbotix.\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 42


 1664      64206E6F 
 1664      74206765 
 1664      74207661 
 1664      6C696420 
 1665              		.global	__aeabi_f2d
 1666              		.align	2
 1667              	.LC43:
 1668 02f4 252E3266 		.ascii	"%.2f\000"
 1668      00
 1669 02f9 000000   		.align	2
 1670              	.LC44:
 1671 02fc 765F6261 		.ascii	"v_bat=%s\000"
 1671      743D2573 
 1671      00
 1672 0305 000000   		.align	2
 1673              	.LC45:
 1674 0308 765F6261 		.ascii	"v_bat\000"
 1674      7400
 1675 030e 0000     		.align	2
 1676              	.LC46:
 1677 0310 20766261 		.ascii	" vbat: \000"
 1677      743A2000 
 1678              		.align	2
 1679              	.LC47:
 1680 0318 70726573 		.ascii	"pressure_current=%s\000"
 1680      73757265 
 1680      5F637572 
 1680      72656E74 
 1680      3D257300 
 1681              		.align	2
 1682              	.LC48:
 1683 032c 70726573 		.ascii	"pressure_current\000"
 1683      73757265 
 1683      5F637572 
 1683      72656E74 
 1683      00
 1684 033d 000000   		.align	2
 1685              	.LC49:
 1686 0340 20707265 		.ascii	" pressure_current: \000"
 1686      73737572 
 1686      655F6375 
 1686      7272656E 
 1686      743A2000 
 1687              		.align	2
 1688              	.LC50:
 1689 0354 70726573 		.ascii	"pressure_depth=%s\000"
 1689      73757265 
 1689      5F646570 
 1689      74683D25 
 1689      7300
 1690 0366 0000     		.align	2
 1691              	.LC51:
 1692 0368 70726573 		.ascii	"pressure_depth\000"
 1692      73757265 
 1692      5F646570 
 1692      746800
 1693 0377 00       		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 43


 1694              	.LC52:
 1695 0378 20707265 		.ascii	" pressure_depth: \000"
 1695      73737572 
 1695      655F6465 
 1695      7074683A 
 1695      2000
 1696 038a 0000     		.align	2
 1697              	.LC53:
 1698 038c 436F756C 		.ascii	"Could not get valid readings from ADC.\000"
 1698      64206E6F 
 1698      74206765 
 1698      74207661 
 1698      6C696420 
 1699              		.section	.text.makeMeasurements,"ax",%progbits
 1700              		.align	2
 1701              		.global	makeMeasurements
 1702              		.thumb
 1703              		.thumb_func
 1704              		.type	makeMeasurements, %function
 1705              	makeMeasurements:
 1706              	.LFB76:
 569:notoriOS.c    **** 
 570:notoriOS.c    **** 
 571:notoriOS.c    **** // ==============================================
 572:notoriOS.c    **** // Make sensor measurements, which will be handeled by another cutions
 573:notoriOS.c    **** // Returns 0 when finished
 574:notoriOS.c    **** // ==============================================
 575:notoriOS.c    **** uint8 makeMeasurements(){
 1707              		.loc 1 575 0
 1708              		.cfi_startproc
 1709              		@ args = 0, pretend = 0, frame = 128
 1710              		@ frame_needed = 1, uses_anonymous_args = 0
 1711 0000 90B5     		push	{r4, r7, lr}
 1712              		.cfi_def_cfa_offset 12
 1713              		.cfi_offset 4, -12
 1714              		.cfi_offset 7, -8
 1715              		.cfi_offset 14, -4
 1716 0002 A3B0     		sub	sp, sp, #140
 1717              		.cfi_def_cfa_offset 152
 1718 0004 02AF     		add	r7, sp, #8
 1719              		.cfi_def_cfa 7, 144
 576:notoriOS.c    ****     
 577:notoriOS.c    ****     // Get clock time and save to timeStamp
 578:notoriOS.c    ****     long timeStamp = getTimeStamp();
 1720              		.loc 1 578 0
 1721 0006 FFF7FEFF 		bl	getTimeStamp
 1722 000a F867     		str	r0, [r7, #124]
 579:notoriOS.c    ****     char c_timeStamp[32];
 580:notoriOS.c    ****     snprintf(c_timeStamp,sizeof(c_timeStamp),"%ld",timeStamp);
 1723              		.loc 1 580 0
 1724 000c 07F15C00 		add	r0, r7, #92
 1725 0010 FB6F     		ldr	r3, [r7, #124]
 1726 0012 8C4A     		ldr	r2, .L69
 1727 0014 2021     		movs	r1, #32
 1728 0016 FFF7FEFF 		bl	snprintf
 581:notoriOS.c    ****     
 582:notoriOS.c    ****     // Holds string for value that will be written 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 44


 583:notoriOS.c    ****     char value[DATA_MAX_KEY_LENGTH];
 584:notoriOS.c    ****     
 585:notoriOS.c    ****     // who i am determines what I'm going to do 
 586:notoriOS.c    ****     // this is primarily for interpretability on grafana dashboards when developing custom nodes
 587:notoriOS.c    ****     char c_node_type[5];
 588:notoriOS.c    ****     itoa(updatable_parameters.node_type,c_node_type,10);
 1729              		.loc 1 588 0
 1730 001a 8B4B     		ldr	r3, .L69+4
 1731 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1732 001e 1846     		mov	r0, r3
 1733 0020 07F14003 		add	r3, r7, #64
 1734 0024 0A22     		movs	r2, #10
 1735 0026 1946     		mov	r1, r3
 1736 0028 FFF7FEFF 		bl	itoa
 589:notoriOS.c    ****     pushData("Current_Node_Type",c_node_type ,getTimeStamp());
 1737              		.loc 1 589 0
 1738 002c FFF7FEFF 		bl	getTimeStamp
 1739 0030 0246     		mov	r2, r0
 1740 0032 07F14003 		add	r3, r7, #64
 1741 0036 1946     		mov	r1, r3
 1742 0038 8448     		ldr	r0, .L69+8
 1743 003a FFF7FEFF 		bl	pushData
 590:notoriOS.c    ****     
 591:notoriOS.c    ****     // If node type is depth node, take level sensor measurements
 592:notoriOS.c    ****     
 593:notoriOS.c    ****     if(updatable_parameters.node_type == NODE_TYPE_DEPTH){
 1744              		.loc 1 593 0
 1745 003e 824B     		ldr	r3, .L69+4
 1746 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1747 0042 002B     		cmp	r3, #0
 1748 0044 3BD1     		bne	.L62
 1749              	.LBB9:
 594:notoriOS.c    ****         
 595:notoriOS.c    ****         // level_sensor_t is a new data type we defined in level_sensor.h. We then use that data ty
 596:notoriOS.c    ****         level_sensor_t m_level_sensor;
 597:notoriOS.c    ****         
 598:notoriOS.c    ****         // Take level sensor readings and save them to m_level_sensor
 599:notoriOS.c    ****         m_level_sensor = level_sensor_take_reading();
 1750              		.loc 1 599 0
 1751 0046 07F11003 		add	r3, r7, #16
 1752 004a 1846     		mov	r0, r3
 1753 004c FFF7FEFF 		bl	level_sensor_take_reading
 600:notoriOS.c    ****     
 601:notoriOS.c    ****         // If the number of valid level sensor readings is greater than 0, then print the level sen
 602:notoriOS.c    ****         if(m_level_sensor.num_valid_readings > 0){
 1754              		.loc 1 602 0
 1755 0050 97F82830 		ldrb	r3, [r7, #40]	@ zero_extendqisi2
 1756 0054 002B     		cmp	r3, #0
 1757 0056 2ED0     		beq	.L63
 603:notoriOS.c    ****             snprintf(value,sizeof(value),"%d",m_level_sensor.level_reading);
 1758              		.loc 1 603 0
 1759 0058 B7F92630 		ldrsh	r3, [r7, #38]
 1760 005c 07F14800 		add	r0, r7, #72
 1761 0060 7B4A     		ldr	r2, .L69+12
 1762 0062 1421     		movs	r1, #20
 1763 0064 FFF7FEFF 		bl	snprintf
 604:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"maxbotix_depth=%s",value);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 45


 1764              		.loc 1 604 0
 1765 0068 07F14803 		add	r3, r7, #72
 1766 006c 1A46     		mov	r2, r3
 1767 006e 7949     		ldr	r1, .L69+16
 1768 0070 0020     		movs	r0, #0
 1769 0072 FFF7FEFF 		bl	printNotif
 605:notoriOS.c    ****             pushData("maxbotix_depth",value,timeStamp);
 1770              		.loc 1 605 0
 1771 0076 07F14803 		add	r3, r7, #72
 1772 007a FA6F     		ldr	r2, [r7, #124]
 1773 007c 1946     		mov	r1, r3
 1774 007e 7648     		ldr	r0, .L69+20
 1775 0080 FFF7FEFF 		bl	pushData
 606:notoriOS.c    ****             
 607:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 608:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1776              		.loc 1 608 0
 1777 0084 07F15C03 		add	r3, r7, #92
 1778 0088 1A46     		mov	r2, r3
 1779 008a 7449     		ldr	r1, .L69+24
 1780 008c 7448     		ldr	r0, .L69+28
 1781 008e FFF7FEFF 		bl	SD_write
 609:notoriOS.c    ****             SD_write(Data_fileName, "a+", " maxbotix_depth: ");
 1782              		.loc 1 609 0
 1783 0092 744A     		ldr	r2, .L69+32
 1784 0094 7149     		ldr	r1, .L69+24
 1785 0096 7248     		ldr	r0, .L69+28
 1786 0098 FFF7FEFF 		bl	SD_write
 610:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1787              		.loc 1 610 0
 1788 009c 07F14803 		add	r3, r7, #72
 1789 00a0 1A46     		mov	r2, r3
 1790 00a2 6E49     		ldr	r1, .L69+24
 1791 00a4 6E48     		ldr	r0, .L69+28
 1792 00a6 FFF7FEFF 		bl	SD_write
 611:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1793              		.loc 1 611 0
 1794 00aa 6F4A     		ldr	r2, .L69+36
 1795 00ac 6B49     		ldr	r1, .L69+24
 1796 00ae 6C48     		ldr	r0, .L69+28
 1797 00b0 FFF7FEFF 		bl	SD_write
 1798 00b4 03E0     		b	.L62
 1799              	.L63:
 612:notoriOS.c    ****         }else{
 613:notoriOS.c    ****             printNotif(NOTIF_TYPE_ERROR,"Could not get valid readings from Maxbotix.");
 1800              		.loc 1 613 0
 1801 00b6 6D49     		ldr	r1, .L69+40
 1802 00b8 0220     		movs	r0, #2
 1803 00ba FFF7FEFF 		bl	printNotif
 1804              	.L62:
 1805              	.LBE9:
 614:notoriOS.c    ****             //pushData("maxbotix_depth","error",timeStamp);
 615:notoriOS.c    ****         }
 616:notoriOS.c    ****     }
 617:notoriOS.c    ****     
 618:notoriOS.c    ****     
 619:notoriOS.c    ****     // voltage_t is a new data type we defined in voltages.h. We then use that data type to define 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 46


 620:notoriOS.c    ****     voltage_t m_voltage;
 621:notoriOS.c    ****     
 622:notoriOS.c    ****     // Take voltage readings and save them to m_voltage
 623:notoriOS.c    ****     m_voltage = voltage_take_readings();
 1806              		.loc 1 623 0
 1807 00be 07F12C03 		add	r3, r7, #44
 1808 00c2 1846     		mov	r0, r3
 1809 00c4 FFF7FEFF 		bl	voltage_take_readings
 624:notoriOS.c    ****     
 625:notoriOS.c    ****     // If the reading is valid, print the voltage battery and pressure transducer reading and push 
 626:notoriOS.c    ****     if(m_voltage.valid){
 1810              		.loc 1 626 0
 1811 00c8 97F83C30 		ldrb	r3, [r7, #60]	@ zero_extendqisi2
 1812 00cc 002B     		cmp	r3, #0
 1813 00ce 00F0AF80 		beq	.L65
 627:notoriOS.c    ****         // battery voltage data
 628:notoriOS.c    ****         snprintf(value,sizeof(value),"%.2f",m_voltage.voltage_battery);
 1814              		.loc 1 628 0
 1815 00d2 FB6A     		ldr	r3, [r7, #44]	@ float
 1816 00d4 1846     		mov	r0, r3
 1817 00d6 FFF7FEFF 		bl	__aeabi_f2d
 1818 00da 0346     		mov	r3, r0
 1819 00dc 0C46     		mov	r4, r1
 1820 00de 07F14800 		add	r0, r7, #72
 1821 00e2 CDE90034 		strd	r3, [sp]
 1822 00e6 624A     		ldr	r2, .L69+44
 1823 00e8 1421     		movs	r1, #20
 1824 00ea FFF7FEFF 		bl	snprintf
 629:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"v_bat=%s",value);
 1825              		.loc 1 629 0
 1826 00ee 07F14803 		add	r3, r7, #72
 1827 00f2 1A46     		mov	r2, r3
 1828 00f4 5F49     		ldr	r1, .L69+48
 1829 00f6 0020     		movs	r0, #0
 1830 00f8 FFF7FEFF 		bl	printNotif
 630:notoriOS.c    ****         pushData("v_bat",value,timeStamp);
 1831              		.loc 1 630 0
 1832 00fc 07F14803 		add	r3, r7, #72
 1833 0100 FA6F     		ldr	r2, [r7, #124]
 1834 0102 1946     		mov	r1, r3
 1835 0104 5C48     		ldr	r0, .L69+52
 1836 0106 FFF7FEFF 		bl	pushData
 631:notoriOS.c    ****         
 632:notoriOS.c    ****         // Print measurement to SD card to file called data.txt
 633:notoriOS.c    ****         SD_write(Data_fileName, "a+", " ");
 1837              		.loc 1 633 0
 1838 010a 574A     		ldr	r2, .L69+36
 1839 010c 5349     		ldr	r1, .L69+24
 1840 010e 5448     		ldr	r0, .L69+28
 1841 0110 FFF7FEFF 		bl	SD_write
 634:notoriOS.c    ****         SD_write(Data_fileName, "a+", c_timeStamp);
 1842              		.loc 1 634 0
 1843 0114 07F15C03 		add	r3, r7, #92
 1844 0118 1A46     		mov	r2, r3
 1845 011a 5049     		ldr	r1, .L69+24
 1846 011c 5048     		ldr	r0, .L69+28
 1847 011e FFF7FEFF 		bl	SD_write
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 47


 635:notoriOS.c    ****         SD_write(Data_fileName, "a+", " vbat: ");
 1848              		.loc 1 635 0
 1849 0122 564A     		ldr	r2, .L69+56
 1850 0124 4D49     		ldr	r1, .L69+24
 1851 0126 4E48     		ldr	r0, .L69+28
 1852 0128 FFF7FEFF 		bl	SD_write
 636:notoriOS.c    ****         SD_write(Data_fileName, "a+", value);
 1853              		.loc 1 636 0
 1854 012c 07F14803 		add	r3, r7, #72
 1855 0130 1A46     		mov	r2, r3
 1856 0132 4A49     		ldr	r1, .L69+24
 1857 0134 4A48     		ldr	r0, .L69+28
 1858 0136 FFF7FEFF 		bl	SD_write
 637:notoriOS.c    ****         
 638:notoriOS.c    ****         // If node type is green infrastructure node, take pressure transducer measurements
 639:notoriOS.c    ****          
 640:notoriOS.c    ****         if(updatable_parameters.node_type == NODE_TYPE_GREENINFRASTRUCTURE){
 1859              		.loc 1 640 0
 1860 013a 434B     		ldr	r3, .L69+4
 1861 013c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1862 013e 012B     		cmp	r3, #1
 1863 0140 7AD1     		bne	.L67
 1864              	.LBB10:
 641:notoriOS.c    ****             
 642:notoriOS.c    ****             // pressure transducer voltage (V) data
 643:notoriOS.c    ****             //snprintf(value,sizeof(value),"%.2f",m_voltage.voltage_pressure);
 644:notoriOS.c    ****             //printNotif(NOTIF_TYPE_EVENT,"pressure_voltage=%s",value);
 645:notoriOS.c    ****             //pushData("pressure_voltage",value,timeStamp);
 646:notoriOS.c    ****             
 647:notoriOS.c    ****             // pressure_t is a new data type we defined in voltages.h. We then use that data type t
 648:notoriOS.c    ****             pressure_t m_pressure;
 649:notoriOS.c    ****             
 650:notoriOS.c    ****             // Make pressure transducer calculators for current and depth
 651:notoriOS.c    ****             m_pressure = pressure_calculations(m_voltage);
 1865              		.loc 1 651 0
 1866 0142 3C46     		mov	r4, r7
 1867 0144 6A46     		mov	r2, sp
 1868 0146 07F13803 		add	r3, r7, #56
 1869 014a 93E80300 		ldmia	r3, {r0, r1}
 1870 014e 82E80300 		stmia	r2, {r0, r1}
 1871 0152 07F12C03 		add	r3, r7, #44
 1872 0156 0ECB     		ldmia	r3, {r1, r2, r3}
 1873 0158 2046     		mov	r0, r4
 1874 015a FFF7FEFF 		bl	pressure_calculations
 652:notoriOS.c    ****             
 653:notoriOS.c    ****             // pressure transducer current (mA) data
 654:notoriOS.c    ****             snprintf(value,sizeof(value),"%.2f",m_pressure.pressure_current);
 1875              		.loc 1 654 0
 1876 015e BB68     		ldr	r3, [r7, #8]	@ float
 1877 0160 1846     		mov	r0, r3
 1878 0162 FFF7FEFF 		bl	__aeabi_f2d
 1879 0166 0346     		mov	r3, r0
 1880 0168 0C46     		mov	r4, r1
 1881 016a 07F14800 		add	r0, r7, #72
 1882 016e CDE90034 		strd	r3, [sp]
 1883 0172 3F4A     		ldr	r2, .L69+44
 1884 0174 1421     		movs	r1, #20
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 48


 1885 0176 FFF7FEFF 		bl	snprintf
 655:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"pressure_current=%s",value);
 1886              		.loc 1 655 0
 1887 017a 07F14803 		add	r3, r7, #72
 1888 017e 1A46     		mov	r2, r3
 1889 0180 3F49     		ldr	r1, .L69+60
 1890 0182 0020     		movs	r0, #0
 1891 0184 FFF7FEFF 		bl	printNotif
 656:notoriOS.c    ****             pushData("pressure_current",value,timeStamp);
 1892              		.loc 1 656 0
 1893 0188 07F14803 		add	r3, r7, #72
 1894 018c FA6F     		ldr	r2, [r7, #124]
 1895 018e 1946     		mov	r1, r3
 1896 0190 3C48     		ldr	r0, .L69+64
 1897 0192 FFF7FEFF 		bl	pushData
 657:notoriOS.c    ****             
 658:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 659:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1898              		.loc 1 659 0
 1899 0196 344A     		ldr	r2, .L69+36
 1900 0198 3049     		ldr	r1, .L69+24
 1901 019a 3148     		ldr	r0, .L69+28
 1902 019c FFF7FEFF 		bl	SD_write
 660:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1903              		.loc 1 660 0
 1904 01a0 07F15C03 		add	r3, r7, #92
 1905 01a4 1A46     		mov	r2, r3
 1906 01a6 2D49     		ldr	r1, .L69+24
 1907 01a8 2D48     		ldr	r0, .L69+28
 1908 01aa FFF7FEFF 		bl	SD_write
 661:notoriOS.c    ****             SD_write(Data_fileName, "a+", " pressure_current: ");
 1909              		.loc 1 661 0
 1910 01ae 364A     		ldr	r2, .L69+68
 1911 01b0 2A49     		ldr	r1, .L69+24
 1912 01b2 2B48     		ldr	r0, .L69+28
 1913 01b4 FFF7FEFF 		bl	SD_write
 662:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1914              		.loc 1 662 0
 1915 01b8 07F14803 		add	r3, r7, #72
 1916 01bc 1A46     		mov	r2, r3
 1917 01be 2749     		ldr	r1, .L69+24
 1918 01c0 2748     		ldr	r0, .L69+28
 1919 01c2 FFF7FEFF 		bl	SD_write
 663:notoriOS.c    ****             
 664:notoriOS.c    ****             // pressure transducer depth (ft) data
 665:notoriOS.c    ****             snprintf(value,sizeof(value),"%.2f",m_pressure.pressure_depth);
 1920              		.loc 1 665 0
 1921 01c6 FB68     		ldr	r3, [r7, #12]	@ float
 1922 01c8 1846     		mov	r0, r3
 1923 01ca FFF7FEFF 		bl	__aeabi_f2d
 1924 01ce 0346     		mov	r3, r0
 1925 01d0 0C46     		mov	r4, r1
 1926 01d2 07F14800 		add	r0, r7, #72
 1927 01d6 CDE90034 		strd	r3, [sp]
 1928 01da 254A     		ldr	r2, .L69+44
 1929 01dc 1421     		movs	r1, #20
 1930 01de FFF7FEFF 		bl	snprintf
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 49


 666:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"pressure_depth=%s",value);
 1931              		.loc 1 666 0
 1932 01e2 07F14803 		add	r3, r7, #72
 1933 01e6 1A46     		mov	r2, r3
 1934 01e8 2849     		ldr	r1, .L69+72
 1935 01ea 0020     		movs	r0, #0
 1936 01ec FFF7FEFF 		bl	printNotif
 667:notoriOS.c    ****             pushData("pressure_depth",value,timeStamp);
 1937              		.loc 1 667 0
 1938 01f0 07F14803 		add	r3, r7, #72
 1939 01f4 FA6F     		ldr	r2, [r7, #124]
 1940 01f6 1946     		mov	r1, r3
 1941 01f8 2548     		ldr	r0, .L69+76
 1942 01fa FFF7FEFF 		bl	pushData
 668:notoriOS.c    ****             
 669:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 670:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1943              		.loc 1 670 0
 1944 01fe 1A4A     		ldr	r2, .L69+36
 1945 0200 1649     		ldr	r1, .L69+24
 1946 0202 1748     		ldr	r0, .L69+28
 1947 0204 FFF7FEFF 		bl	SD_write
 671:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1948              		.loc 1 671 0
 1949 0208 07F15C03 		add	r3, r7, #92
 1950 020c 1A46     		mov	r2, r3
 1951 020e 1349     		ldr	r1, .L69+24
 1952 0210 1348     		ldr	r0, .L69+28
 1953 0212 FFF7FEFF 		bl	SD_write
 672:notoriOS.c    ****             SD_write(Data_fileName, "a+", " pressure_depth: ");
 1954              		.loc 1 672 0
 1955 0216 1F4A     		ldr	r2, .L69+80
 1956 0218 1049     		ldr	r1, .L69+24
 1957 021a 1148     		ldr	r0, .L69+28
 1958 021c FFF7FEFF 		bl	SD_write
 673:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1959              		.loc 1 673 0
 1960 0220 07F14803 		add	r3, r7, #72
 1961 0224 1A46     		mov	r2, r3
 1962 0226 0D49     		ldr	r1, .L69+24
 1963 0228 0D48     		ldr	r0, .L69+28
 1964 022a FFF7FEFF 		bl	SD_write
 1965 022e 03E0     		b	.L67
 1966              	.L65:
 1967              	.LBE10:
 674:notoriOS.c    ****         }    
 675:notoriOS.c    ****     }else{
 676:notoriOS.c    ****         printNotif(NOTIF_TYPE_ERROR,"Could not get valid readings from ADC.");
 1968              		.loc 1 676 0
 1969 0230 1949     		ldr	r1, .L69+84
 1970 0232 0220     		movs	r0, #2
 1971 0234 FFF7FEFF 		bl	printNotif
 1972              	.L67:
 677:notoriOS.c    ****         
 678:notoriOS.c    ****     }
 679:notoriOS.c    ****         
 680:notoriOS.c    ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 50


 681:notoriOS.c    ****     return 0u;
 1973              		.loc 1 681 0
 1974 0238 0023     		movs	r3, #0
 682:notoriOS.c    **** }
 1975              		.loc 1 682 0
 1976 023a 1846     		mov	r0, r3
 1977 023c 8437     		adds	r7, r7, #132
 1978              		.cfi_def_cfa_offset 12
 1979 023e BD46     		mov	sp, r7
 1980              		.cfi_def_cfa_register 13
 1981              		@ sp needed
 1982 0240 90BD     		pop	{r4, r7, pc}
 1983              	.L70:
 1984 0242 00BF     		.align	2
 1985              	.L69:
 1986 0244 70020000 		.word	.LC35
 1987 0248 00000000 		.word	updatable_parameters
 1988 024c 74020000 		.word	.LC36
 1989 0250 C4000000 		.word	.LC6
 1990 0254 88020000 		.word	.LC37
 1991 0258 9C020000 		.word	.LC38
 1992 025c AC020000 		.word	.LC39
 1993 0260 00000000 		.word	Data_fileName
 1994 0264 B0020000 		.word	.LC40
 1995 0268 C4020000 		.word	.LC41
 1996 026c C8020000 		.word	.LC42
 1997 0270 F4020000 		.word	.LC43
 1998 0274 FC020000 		.word	.LC44
 1999 0278 08030000 		.word	.LC45
 2000 027c 10030000 		.word	.LC46
 2001 0280 18030000 		.word	.LC47
 2002 0284 2C030000 		.word	.LC48
 2003 0288 40030000 		.word	.LC49
 2004 028c 54030000 		.word	.LC50
 2005 0290 68030000 		.word	.LC51
 2006 0294 78030000 		.word	.LC52
 2007 0298 8C030000 		.word	.LC53
 2008              		.cfi_endproc
 2009              	.LFE76:
 2010              		.size	makeMeasurements, .-makeMeasurements
 2011              		.section	.rodata
 2012 03b3 00       		.align	2
 2013              	.LC54:
 2014 03b4 4572726F 		.ascii	"Error setting system time.\000"
 2014      72207365 
 2014      7474696E 
 2014      67207379 
 2014      7374656D 
 2015              		.section	.text.setTime,"ax",%progbits
 2016              		.align	2
 2017              		.global	setTime
 2018              		.thumb
 2019              		.thumb_func
 2020              		.type	setTime, %function
 2021              	setTime:
 2022              	.LFB77:
 683:notoriOS.c    **** 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 51


 684:notoriOS.c    **** // ==============================================
 685:notoriOS.c    **** // Set the system time
 686:notoriOS.c    **** // Returns 0 if there is an error, returns 1 if successful
 687:notoriOS.c    **** // ==============================================
 688:notoriOS.c    **** uint8 setTime(long timeStamp){
 2023              		.loc 1 688 0
 2024              		.cfi_startproc
 2025              		@ args = 0, pretend = 0, frame = 24
 2026              		@ frame_needed = 1, uses_anonymous_args = 0
 2027 0000 80B5     		push	{r7, lr}
 2028              		.cfi_def_cfa_offset 8
 2029              		.cfi_offset 7, -8
 2030              		.cfi_offset 14, -4
 2031 0002 86B0     		sub	sp, sp, #24
 2032              		.cfi_def_cfa_offset 32
 2033 0004 00AF     		add	r7, sp, #0
 2034              		.cfi_def_cfa_register 7
 2035 0006 7860     		str	r0, [r7, #4]
 689:notoriOS.c    ****     // If timestamp is <= 0 print error statement and return 0
 690:notoriOS.c    ****     if(timeStamp <=0){
 2036              		.loc 1 690 0
 2037 0008 7B68     		ldr	r3, [r7, #4]
 2038 000a 002B     		cmp	r3, #0
 2039 000c 05DC     		bgt	.L72
 691:notoriOS.c    ****         printNotif(NOTIF_TYPE_ERROR,"Error setting system time.");
 2040              		.loc 1 691 0
 2041 000e 1849     		ldr	r1, .L74
 2042 0010 0220     		movs	r0, #2
 2043 0012 FFF7FEFF 		bl	printNotif
 692:notoriOS.c    ****         return 0;  
 2044              		.loc 1 692 0
 2045 0016 0023     		movs	r3, #0
 2046 0018 25E0     		b	.L73
 2047              	.L72:
 693:notoriOS.c    ****     }
 694:notoriOS.c    ****     // Create a new pointer t of data structure tm
 695:notoriOS.c    ****     struct tm * t;
 696:notoriOS.c    ****     // Converts a calendar time (pointed to by timer) and returns a pointer to a structure containi
 697:notoriOS.c    ****     t = gmtime(&timeStamp);
 2048              		.loc 1 697 0
 2049 001a 3B1D     		adds	r3, r7, #4
 2050 001c 1846     		mov	r0, r3
 2051 001e FFF7FEFF 		bl	gmtime
 2052 0022 7861     		str	r0, [r7, #20]
 698:notoriOS.c    ****     
 699:notoriOS.c    ****     // Create variable localTime of data structure RTC_TIME_DATE
 700:notoriOS.c    ****     RTC_TIME_DATE localTime;
 701:notoriOS.c    ****     localTime.Sec = t->tm_sec;
 2053              		.loc 1 701 0
 2054 0024 7B69     		ldr	r3, [r7, #20]
 2055 0026 1B68     		ldr	r3, [r3]
 2056 0028 DBB2     		uxtb	r3, r3
 2057 002a 3B72     		strb	r3, [r7, #8]
 702:notoriOS.c    ****     localTime.Min = t->tm_min;
 2058              		.loc 1 702 0
 2059 002c 7B69     		ldr	r3, [r7, #20]
 2060 002e 5B68     		ldr	r3, [r3, #4]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 52


 2061 0030 DBB2     		uxtb	r3, r3
 2062 0032 7B72     		strb	r3, [r7, #9]
 703:notoriOS.c    ****     localTime.Hour = t->tm_hour;
 2063              		.loc 1 703 0
 2064 0034 7B69     		ldr	r3, [r7, #20]
 2065 0036 9B68     		ldr	r3, [r3, #8]
 2066 0038 DBB2     		uxtb	r3, r3
 2067 003a BB72     		strb	r3, [r7, #10]
 704:notoriOS.c    ****     localTime.Year = t->tm_year + 1900;
 2068              		.loc 1 704 0
 2069 003c 7B69     		ldr	r3, [r7, #20]
 2070 003e 5B69     		ldr	r3, [r3, #20]
 2071 0040 9BB2     		uxth	r3, r3
 2072 0042 03F26C73 		addw	r3, r3, #1900
 2073 0046 9BB2     		uxth	r3, r3
 2074 0048 7B82     		strh	r3, [r7, #18]	@ movhi
 705:notoriOS.c    ****     localTime.Month = t->tm_mon;
 2075              		.loc 1 705 0
 2076 004a 7B69     		ldr	r3, [r7, #20]
 2077 004c 1B69     		ldr	r3, [r3, #16]
 2078 004e DBB2     		uxtb	r3, r3
 2079 0050 3B74     		strb	r3, [r7, #16]
 706:notoriOS.c    ****     localTime.DayOfMonth = t->tm_mday;
 2080              		.loc 1 706 0
 2081 0052 7B69     		ldr	r3, [r7, #20]
 2082 0054 DB68     		ldr	r3, [r3, #12]
 2083 0056 DBB2     		uxtb	r3, r3
 2084 0058 3B73     		strb	r3, [r7, #12]
 707:notoriOS.c    **** 
 708:notoriOS.c    ****     // Writes time and date values as current time and date.
 709:notoriOS.c    ****     RTC_WriteTime(&localTime);
 2085              		.loc 1 709 0
 2086 005a 07F10803 		add	r3, r7, #8
 2087 005e 1846     		mov	r0, r3
 2088 0060 FFF7FEFF 		bl	RTC_WriteTime
 710:notoriOS.c    ****     
 711:notoriOS.c    ****     // Return 1 when the system time was set properly.
 712:notoriOS.c    ****     return 1;
 2089              		.loc 1 712 0
 2090 0064 0123     		movs	r3, #1
 2091              	.L73:
 713:notoriOS.c    **** }
 2092              		.loc 1 713 0
 2093 0066 1846     		mov	r0, r3
 2094 0068 1837     		adds	r7, r7, #24
 2095              		.cfi_def_cfa_offset 8
 2096 006a BD46     		mov	sp, r7
 2097              		.cfi_def_cfa_register 13
 2098              		@ sp needed
 2099 006c 80BD     		pop	{r7, pc}
 2100              	.L75:
 2101 006e 00BF     		.align	2
 2102              	.L74:
 2103 0070 B4030000 		.word	.LC54
 2104              		.cfi_endproc
 2105              	.LFE77:
 2106              		.size	setTime, .-setTime
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 53


 2107              		.section	.rodata
 2108 03cf 00       		.align	2
 2109              	.LC55:
 2110 03d0 75706772 		.ascii	"upgrade.hex\000"
 2110      6164652E 
 2110      68657800 
 2111              		.section	.text.upgraded,"ax",%progbits
 2112              		.align	2
 2113              		.global	upgraded
 2114              		.thumb
 2115              		.thumb_func
 2116              		.type	upgraded, %function
 2117              	upgraded:
 2118              	.LFB78:
 714:notoriOS.c    **** 
 715:notoriOS.c    **** //downloads and stores files on SD card
 716:notoriOS.c    **** 
 717:notoriOS.c    **** 
 718:notoriOS.c    **** 
 719:notoriOS.c    **** // ==============================================
 720:notoriOS.c    **** // Will they love it, will they hate it
 721:notoriOS.c    **** // Never fade it, I evade it
 722:notoriOS.c    **** // Cause I never really want to complicate it
 723:notoriOS.c    **** //      - Logic, Upgraded (2015)
 724:notoriOS.c    **** //
 725:notoriOS.c    **** // downloads new firmware, stores it on SD card, and reboots the system to allow bootloader 
 726:notoriOS.c    **** // returns 0 if modem is connected, 1 if the file downlaod failed, and does not return otherwise (b
 727:notoriOS.c    **** // ==============================================
 728:notoriOS.c    **** 
 729:notoriOS.c    **** uint8 upgraded(char *host, int port,  char *route){
 2119              		.loc 1 729 0
 2120              		.cfi_startproc
 2121              		@ args = 0, pretend = 0, frame = 232
 2122              		@ frame_needed = 1, uses_anonymous_args = 0
 2123 0000 80B5     		push	{r7, lr}
 2124              		.cfi_def_cfa_offset 8
 2125              		.cfi_offset 7, -8
 2126              		.cfi_offset 14, -4
 2127 0002 C0B0     		sub	sp, sp, #256
 2128              		.cfi_def_cfa_offset 264
 2129 0004 06AF     		add	r7, sp, #24
 2130              		.cfi_def_cfa 7, 240
 2131 0006 F860     		str	r0, [r7, #12]
 2132 0008 B960     		str	r1, [r7, #8]
 2133 000a 7A60     		str	r2, [r7, #4]
 730:notoriOS.c    ****     
 731:notoriOS.c    ****     uint8 upgrade_status = 0;
 2134              		.loc 1 731 0
 2135 000c 0023     		movs	r3, #0
 2136 000e 87F8E730 		strb	r3, [r7, #231]
 732:notoriOS.c    ****     
 733:notoriOS.c    ****    //AGPS will only work if we're connected to network, so don't call this fuction otherwise
 734:notoriOS.c    ****     if(modem_state != MODEM_STATE_READY){
 2137              		.loc 1 734 0
 2138 0012 384B     		ldr	r3, .L80
 2139 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2140 0016 042B     		cmp	r3, #4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 54


 2141 0018 02D0     		beq	.L77
 735:notoriOS.c    ****         return upgrade_status;//where valid = 0
 2142              		.loc 1 735 0
 2143 001a 97F8E730 		ldrb	r3, [r7, #231]	@ zero_extendqisi2
 2144 001e 65E0     		b	.L79
 2145              	.L77:
 736:notoriOS.c    ****     }
 737:notoriOS.c    ****     
 738:notoriOS.c    ****     char fileName[] = "upgrade.hex";
 2146              		.loc 1 738 0
 2147 0020 354A     		ldr	r2, .L80+4
 2148 0022 07F1D803 		add	r3, r7, #216
 2149 0026 07CA     		ldmia	r2, {r0, r1, r2}
 2150 0028 83E80700 		stmia	r3, {r0, r1, r2}
 739:notoriOS.c    ****     //delete file, if one exisits already
 740:notoriOS.c    ****     SD_rmfile(fileName);
 2151              		.loc 1 740 0
 2152 002c 07F1D803 		add	r3, r7, #216
 2153 0030 1846     		mov	r0, r3
 2154 0032 FFF7FEFF 		bl	SD_rmfile
 741:notoriOS.c    ****     
 742:notoriOS.c    ****     // Create http request
 743:notoriOS.c    ****     construct_generic_HTTP_request(http_request,http_body,host,route,port,"POST","Close","",0,"1.1"
 2155              		.loc 1 743 0
 2156 0036 314B     		ldr	r3, .L80+8
 2157 0038 0593     		str	r3, [sp, #20]
 2158 003a 0023     		movs	r3, #0
 2159 003c 0493     		str	r3, [sp, #16]
 2160 003e 304B     		ldr	r3, .L80+12
 2161 0040 0393     		str	r3, [sp, #12]
 2162 0042 304B     		ldr	r3, .L80+16
 2163 0044 0293     		str	r3, [sp, #8]
 2164 0046 304B     		ldr	r3, .L80+20
 2165 0048 0193     		str	r3, [sp, #4]
 2166 004a BB68     		ldr	r3, [r7, #8]
 2167 004c 0093     		str	r3, [sp]
 2168 004e 7B68     		ldr	r3, [r7, #4]
 2169 0050 FA68     		ldr	r2, [r7, #12]
 2170 0052 2E49     		ldr	r1, .L80+24
 2171 0054 2E48     		ldr	r0, .L80+28
 2172 0056 FFF7FEFF 		bl	construct_generic_HTTP_request
 744:notoriOS.c    ****     printNotif(NOTIF_TYPE_EVENT,"Full HTTP Request: %s", http_request);
 2173              		.loc 1 744 0
 2174 005a 2D4A     		ldr	r2, .L80+28
 2175 005c 2D49     		ldr	r1, .L80+32
 2176 005e 0020     		movs	r0, #0
 2177 0060 FFF7FEFF 		bl	printNotif
 745:notoriOS.c    ****     // Create array portConfig of size 200 characters
 746:notoriOS.c    ****     char portConfig[200];
 747:notoriOS.c    ****     // Print port configurations
 748:notoriOS.c    ****     snprintf(portConfig,sizeof(portConfig),"AT#SD=1,0,%d,\"%s\",0,0,1\r",port,host);
 2178              		.loc 1 748 0
 2179 0064 07F11000 		add	r0, r7, #16
 2180 0068 FB68     		ldr	r3, [r7, #12]
 2181 006a 0093     		str	r3, [sp]
 2182 006c BB68     		ldr	r3, [r7, #8]
 2183 006e 2A4A     		ldr	r2, .L80+36
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 55


 2184 0070 C821     		movs	r1, #200
 2185 0072 FFF7FEFF 		bl	snprintf
 749:notoriOS.c    ****     printNotif(NOTIF_TYPE_EVENT,"%s",portConfig);
 2186              		.loc 1 749 0
 2187 0076 07F11003 		add	r3, r7, #16
 2188 007a 1A46     		mov	r2, r3
 2189 007c 2749     		ldr	r1, .L80+40
 2190 007e 0020     		movs	r0, #0
 2191 0080 FFF7FEFF 		bl	printNotif
 750:notoriOS.c    ****     // AT command to configure the port
 751:notoriOS.c    ****     upgrade_status = at_write_command(portConfig,"OK",10000u);
 2192              		.loc 1 751 0
 2193 0084 07F11003 		add	r3, r7, #16
 2194 0088 42F21072 		movw	r2, #10000
 2195 008c 2449     		ldr	r1, .L80+44
 2196 008e 1846     		mov	r0, r3
 2197 0090 FFF7FEFF 		bl	at_write_command
 2198 0094 0346     		mov	r3, r0
 2199 0096 87F8E730 		strb	r3, [r7, #231]
 752:notoriOS.c    ****     // AT command #SSEND= is an execution command that permits, while the modul eis in command mode
 753:notoriOS.c    ****     // To complete the operation, send Ctrl-Z char to exit
 754:notoriOS.c    ****     upgrade_status = at_write_command("AT#SSEND=1\r\n",   ">", 1000u);
 2200              		.loc 1 754 0
 2201 009a 4FF47A72 		mov	r2, #1000
 2202 009e 2149     		ldr	r1, .L80+48
 2203 00a0 2148     		ldr	r0, .L80+52
 2204 00a2 FFF7FEFF 		bl	at_write_command
 2205 00a6 0346     		mov	r3, r0
 2206 00a8 87F8E730 		strb	r3, [r7, #231]
 755:notoriOS.c    ****     // Append <ctrl+z> escape sequence to http_request to exit modem command line
 756:notoriOS.c    ****     strncat(http_request, "\032", 1); 
 2207              		.loc 1 756 0
 2208 00ac 1848     		ldr	r0, .L80+28
 2209 00ae FFF7FEFF 		bl	strlen
 2210 00b2 0346     		mov	r3, r0
 2211 00b4 1A46     		mov	r2, r3
 2212 00b6 164B     		ldr	r3, .L80+28
 2213 00b8 1344     		add	r3, r3, r2
 2214 00ba 1C49     		ldr	r1, .L80+56
 2215 00bc 1A46     		mov	r2, r3
 2216 00be 0B46     		mov	r3, r1
 2217 00c0 1B88     		ldrh	r3, [r3]	@ unaligned
 2218 00c2 1380     		strh	r3, [r2]	@ unaligned
 757:notoriOS.c    ****     // AT command to send http request
 758:notoriOS.c    ****     upgrade_status = at_write_command(http_request, "OK", 5000u);
 2219              		.loc 1 758 0
 2220 00c4 41F28832 		movw	r2, #5000
 2221 00c8 1549     		ldr	r1, .L80+44
 2222 00ca 1148     		ldr	r0, .L80+28
 2223 00cc FFF7FEFF 		bl	at_write_command
 2224 00d0 0346     		mov	r3, r0
 2225 00d2 87F8E730 		strb	r3, [r7, #231]
 759:notoriOS.c    ****     // AT command #SRECV= is an execution command that permits users to read data arrived through a
 760:notoriOS.c    ****     // = 1 means the UPD information is enabled: data are read just until the end of the UDP datagr
 761:notoriOS.c    ****     upgrade_status = at_write_command("AT#SRECV=1,1000\r","OS-OK",5000u);
 2226              		.loc 1 761 0
 2227 00d6 41F28832 		movw	r2, #5000
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 56


 2228 00da 1549     		ldr	r1, .L80+60
 2229 00dc 1548     		ldr	r0, .L80+64
 2230 00de FFF7FEFF 		bl	at_write_command
 2231 00e2 0346     		mov	r3, r0
 2232 00e4 87F8E730 		strb	r3, [r7, #231]
 762:notoriOS.c    ****     //SD_write(fileName,"w+",uart_received_string);
 763:notoriOS.c    ****     
 764:notoriOS.c    ****     
 765:notoriOS.c    ****     return upgrade_status;
 2233              		.loc 1 765 0
 2234 00e8 97F8E730 		ldrb	r3, [r7, #231]	@ zero_extendqisi2
 2235              	.L79:
 766:notoriOS.c    ****     
 767:notoriOS.c    **** }
 2236              		.loc 1 767 0 discriminator 1
 2237 00ec 1846     		mov	r0, r3
 2238 00ee E837     		adds	r7, r7, #232
 2239              		.cfi_def_cfa_offset 8
 2240 00f0 BD46     		mov	sp, r7
 2241              		.cfi_def_cfa_register 13
 2242              		@ sp needed
 2243 00f2 80BD     		pop	{r7, pc}
 2244              	.L81:
 2245              		.align	2
 2246              	.L80:
 2247 00f4 00000000 		.word	modem_state
 2248 00f8 D0030000 		.word	.LC55
 2249 00fc 68010000 		.word	.LC16
 2250 0100 6C010000 		.word	.LC17
 2251 0104 70010000 		.word	.LC18
 2252 0108 78010000 		.word	.LC19
 2253 010c 00000000 		.word	http_body
 2254 0110 00000000 		.word	http_request
 2255 0114 80010000 		.word	.LC20
 2256 0118 98010000 		.word	.LC21
 2257 011c B4010000 		.word	.LC22
 2258 0120 B8010000 		.word	.LC23
 2259 0124 E8010000 		.word	.LC26
 2260 0128 EC010000 		.word	.LC27
 2261 012c FC010000 		.word	.LC28
 2262 0130 18020000 		.word	.LC31
 2263 0134 20020000 		.word	.LC32
 2264              		.cfi_endproc
 2265              	.LFE78:
 2266              		.size	upgraded, .-upgraded
 2267              		.text
 2268              	.Letext0:
 2269              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2270              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2271              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2272              		.file 5 "Generated_Source\\PSoC5/RTC.h"
 2273              		.file 6 "testing.h"
 2274              		.file 7 "level_sensor.h"
 2275              		.file 8 "voltages.h"
 2276              		.file 9 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2277              		.file 10 "data.h"
 2278              		.file 11 "modem.h"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 57


 2279              		.file 12 "notoriOS.h"
 2280              		.file 13 "Generated_Source\\PSoC5/core_cm3.h"
 2281              		.file 14 "downstream_level_sensor.h"
 2282              		.file 15 "App_LED.h"
 2283              		.section	.debug_info,"",%progbits
 2284              	.Ldebug_info0:
 2285 0000 360D0000 		.4byte	0xd36
 2286 0004 0400     		.2byte	0x4
 2287 0006 00000000 		.4byte	.Ldebug_abbrev0
 2288 000a 04       		.byte	0x4
 2289 000b 01       		.uleb128 0x1
 2290 000c AC000000 		.4byte	.LASF177
 2291 0010 0C       		.byte	0xc
 2292 0011 DB080000 		.4byte	.LASF178
 2293 0015 2C000000 		.4byte	.LASF179
 2294 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2295 001d 00000000 		.4byte	0
 2296 0021 00000000 		.4byte	.Ldebug_line0
 2297 0025 02       		.uleb128 0x2
 2298 0026 01       		.byte	0x1
 2299 0027 06       		.byte	0x6
 2300 0028 7D000000 		.4byte	.LASF0
 2301 002c 02       		.uleb128 0x2
 2302 002d 01       		.byte	0x1
 2303 002e 08       		.byte	0x8
 2304 002f 76060000 		.4byte	.LASF1
 2305 0033 02       		.uleb128 0x2
 2306 0034 02       		.byte	0x2
 2307 0035 05       		.byte	0x5
 2308 0036 94040000 		.4byte	.LASF2
 2309 003a 02       		.uleb128 0x2
 2310 003b 02       		.byte	0x2
 2311 003c 07       		.byte	0x7
 2312 003d 34080000 		.4byte	.LASF3
 2313 0041 03       		.uleb128 0x3
 2314 0042 FC070000 		.4byte	.LASF9
 2315 0046 02       		.byte	0x2
 2316 0047 3F       		.byte	0x3f
 2317 0048 4C000000 		.4byte	0x4c
 2318 004c 02       		.uleb128 0x2
 2319 004d 04       		.byte	0x4
 2320 004e 05       		.byte	0x5
 2321 004f 6E020000 		.4byte	.LASF4
 2322 0053 02       		.uleb128 0x2
 2323 0054 04       		.byte	0x4
 2324 0055 07       		.byte	0x7
 2325 0056 D1030000 		.4byte	.LASF5
 2326 005a 02       		.uleb128 0x2
 2327 005b 08       		.byte	0x8
 2328 005c 05       		.byte	0x5
 2329 005d AE010000 		.4byte	.LASF6
 2330 0061 02       		.uleb128 0x2
 2331 0062 08       		.byte	0x8
 2332 0063 07       		.byte	0x7
 2333 0064 4B010000 		.4byte	.LASF7
 2334 0068 04       		.uleb128 0x4
 2335 0069 04       		.byte	0x4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 58


 2336 006a 05       		.byte	0x5
 2337 006b 696E7400 		.ascii	"int\000"
 2338 006f 02       		.uleb128 0x2
 2339 0070 04       		.byte	0x4
 2340 0071 07       		.byte	0x7
 2341 0072 CD070000 		.4byte	.LASF8
 2342 0076 03       		.uleb128 0x3
 2343 0077 6E060000 		.4byte	.LASF10
 2344 007b 03       		.byte	0x3
 2345 007c 2C       		.byte	0x2c
 2346 007d 41000000 		.4byte	0x41
 2347 0081 05       		.uleb128 0x5
 2348 0082 A5020000 		.4byte	.LASF11
 2349 0086 04       		.byte	0x4
 2350 0087 9201     		.2byte	0x192
 2351 0089 2C000000 		.4byte	0x2c
 2352 008d 05       		.uleb128 0x5
 2353 008e 08000000 		.4byte	.LASF12
 2354 0092 04       		.byte	0x4
 2355 0093 9301     		.2byte	0x193
 2356 0095 3A000000 		.4byte	0x3a
 2357 0099 05       		.uleb128 0x5
 2358 009a F6020000 		.4byte	.LASF13
 2359 009e 04       		.byte	0x4
 2360 009f 9401     		.2byte	0x194
 2361 00a1 53000000 		.4byte	0x53
 2362 00a5 05       		.uleb128 0x5
 2363 00a6 57040000 		.4byte	.LASF14
 2364 00aa 04       		.byte	0x4
 2365 00ab 9501     		.2byte	0x195
 2366 00ad 25000000 		.4byte	0x25
 2367 00b1 05       		.uleb128 0x5
 2368 00b2 F0080000 		.4byte	.LASF15
 2369 00b6 04       		.byte	0x4
 2370 00b7 9601     		.2byte	0x196
 2371 00b9 33000000 		.4byte	0x33
 2372 00bd 05       		.uleb128 0x5
 2373 00be D0020000 		.4byte	.LASF16
 2374 00c2 04       		.byte	0x4
 2375 00c3 9701     		.2byte	0x197
 2376 00c5 4C000000 		.4byte	0x4c
 2377 00c9 02       		.uleb128 0x2
 2378 00ca 04       		.byte	0x4
 2379 00cb 04       		.byte	0x4
 2380 00cc 0C060000 		.4byte	.LASF17
 2381 00d0 02       		.uleb128 0x2
 2382 00d1 08       		.byte	0x8
 2383 00d2 04       		.byte	0x4
 2384 00d3 6E090000 		.4byte	.LASF18
 2385 00d7 02       		.uleb128 0x2
 2386 00d8 01       		.byte	0x1
 2387 00d9 08       		.byte	0x8
 2388 00da C8070000 		.4byte	.LASF19
 2389 00de 02       		.uleb128 0x2
 2390 00df 08       		.byte	0x8
 2391 00e0 04       		.byte	0x4
 2392 00e1 AA070000 		.4byte	.LASF20
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 59


 2393 00e5 02       		.uleb128 0x2
 2394 00e6 04       		.byte	0x4
 2395 00e7 07       		.byte	0x7
 2396 00e8 4A050000 		.4byte	.LASF21
 2397 00ec 06       		.uleb128 0x6
 2398 00ed 04       		.byte	0x4
 2399 00ee D7000000 		.4byte	0xd7
 2400 00f2 07       		.uleb128 0x7
 2401 00f3 D7000000 		.4byte	0xd7
 2402 00f7 02010000 		.4byte	0x102
 2403 00fb 08       		.uleb128 0x8
 2404 00fc E5000000 		.4byte	0xe5
 2405 0100 17       		.byte	0x17
 2406 0101 00       		.byte	0
 2407 0102 09       		.uleb128 0x9
 2408 0103 0C       		.byte	0xc
 2409 0104 05       		.byte	0x5
 2410 0105 30       		.byte	0x30
 2411 0106 6B010000 		.4byte	0x16b
 2412 010a 0A       		.uleb128 0xa
 2413 010b 53656300 		.ascii	"Sec\000"
 2414 010f 05       		.byte	0x5
 2415 0110 32       		.byte	0x32
 2416 0111 81000000 		.4byte	0x81
 2417 0115 00       		.byte	0
 2418 0116 0A       		.uleb128 0xa
 2419 0117 4D696E00 		.ascii	"Min\000"
 2420 011b 05       		.byte	0x5
 2421 011c 33       		.byte	0x33
 2422 011d 81000000 		.4byte	0x81
 2423 0121 01       		.byte	0x1
 2424 0122 0B       		.uleb128 0xb
 2425 0123 62010000 		.4byte	.LASF22
 2426 0127 05       		.byte	0x5
 2427 0128 34       		.byte	0x34
 2428 0129 81000000 		.4byte	0x81
 2429 012d 02       		.byte	0x2
 2430 012e 0B       		.uleb128 0xb
 2431 012f D3060000 		.4byte	.LASF23
 2432 0133 05       		.byte	0x5
 2433 0134 35       		.byte	0x35
 2434 0135 81000000 		.4byte	0x81
 2435 0139 03       		.byte	0x3
 2436 013a 0B       		.uleb128 0xb
 2437 013b 12040000 		.4byte	.LASF24
 2438 013f 05       		.byte	0x5
 2439 0140 36       		.byte	0x36
 2440 0141 81000000 		.4byte	0x81
 2441 0145 04       		.byte	0x4
 2442 0146 0B       		.uleb128 0xb
 2443 0147 23090000 		.4byte	.LASF25
 2444 014b 05       		.byte	0x5
 2445 014c 37       		.byte	0x37
 2446 014d 8D000000 		.4byte	0x8d
 2447 0151 06       		.byte	0x6
 2448 0152 0B       		.uleb128 0xb
 2449 0153 45010000 		.4byte	.LASF26
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 60


 2450 0157 05       		.byte	0x5
 2451 0158 38       		.byte	0x38
 2452 0159 81000000 		.4byte	0x81
 2453 015d 08       		.byte	0x8
 2454 015e 0B       		.uleb128 0xb
 2455 015f 63060000 		.4byte	.LASF27
 2456 0163 05       		.byte	0x5
 2457 0164 39       		.byte	0x39
 2458 0165 8D000000 		.4byte	0x8d
 2459 0169 0A       		.byte	0xa
 2460 016a 00       		.byte	0
 2461 016b 03       		.uleb128 0x3
 2462 016c B1050000 		.4byte	.LASF28
 2463 0170 05       		.byte	0x5
 2464 0171 3A       		.byte	0x3a
 2465 0172 76010000 		.4byte	0x176
 2466 0176 0C       		.uleb128 0xc
 2467 0177 02010000 		.4byte	0x102
 2468 017b 0D       		.uleb128 0xd
 2469 017c 8101     		.2byte	0x181
 2470 017e 06       		.byte	0x6
 2471 017f 0A       		.byte	0xa
 2472 0180 A9010000 		.4byte	0x1a9
 2473 0184 0B       		.uleb128 0xb
 2474 0185 59060000 		.4byte	.LASF29
 2475 0189 06       		.byte	0x6
 2476 018a 0C       		.byte	0xc
 2477 018b A9010000 		.4byte	0x1a9
 2478 018f 00       		.byte	0
 2479 0190 0B       		.uleb128 0xb
 2480 0191 8E080000 		.4byte	.LASF30
 2481 0195 06       		.byte	0x6
 2482 0196 0D       		.byte	0xd
 2483 0197 81000000 		.4byte	0x81
 2484 019b 80       		.byte	0x80
 2485 019c 0B       		.uleb128 0xb
 2486 019d F5060000 		.4byte	.LASF31
 2487 01a1 06       		.byte	0x6
 2488 01a2 0F       		.byte	0xf
 2489 01a3 B9010000 		.4byte	0x1b9
 2490 01a7 81       		.byte	0x81
 2491 01a8 00       		.byte	0
 2492 01a9 07       		.uleb128 0x7
 2493 01aa D7000000 		.4byte	0xd7
 2494 01ae B9010000 		.4byte	0x1b9
 2495 01b2 08       		.uleb128 0x8
 2496 01b3 E5000000 		.4byte	0xe5
 2497 01b7 7F       		.byte	0x7f
 2498 01b8 00       		.byte	0
 2499 01b9 07       		.uleb128 0x7
 2500 01ba D7000000 		.4byte	0xd7
 2501 01be C9010000 		.4byte	0x1c9
 2502 01c2 08       		.uleb128 0x8
 2503 01c3 E5000000 		.4byte	0xe5
 2504 01c7 FF       		.byte	0xff
 2505 01c8 00       		.byte	0
 2506 01c9 03       		.uleb128 0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 61


 2507 01ca DD060000 		.4byte	.LASF32
 2508 01ce 06       		.byte	0x6
 2509 01cf 10       		.byte	0x10
 2510 01d0 7B010000 		.4byte	0x17b
 2511 01d4 09       		.uleb128 0x9
 2512 01d5 1A       		.byte	0x1a
 2513 01d6 07       		.byte	0x7
 2514 01d7 10       		.byte	0x10
 2515 01d8 0D020000 		.4byte	0x20d
 2516 01dc 0B       		.uleb128 0xb
 2517 01dd 06030000 		.4byte	.LASF33
 2518 01e1 07       		.byte	0x7
 2519 01e2 11       		.byte	0x11
 2520 01e3 0D020000 		.4byte	0x20d
 2521 01e7 00       		.byte	0
 2522 01e8 0B       		.uleb128 0xb
 2523 01e9 1E080000 		.4byte	.LASF34
 2524 01ed 07       		.byte	0x7
 2525 01ee 12       		.byte	0x12
 2526 01ef B1000000 		.4byte	0xb1
 2527 01f3 16       		.byte	0x16
 2528 01f4 0B       		.uleb128 0xb
 2529 01f5 A9030000 		.4byte	.LASF35
 2530 01f9 07       		.byte	0x7
 2531 01fa 13       		.byte	0x13
 2532 01fb 81000000 		.4byte	0x81
 2533 01ff 18       		.byte	0x18
 2534 0200 0B       		.uleb128 0xb
 2535 0201 17000000 		.4byte	.LASF36
 2536 0205 07       		.byte	0x7
 2537 0206 14       		.byte	0x14
 2538 0207 81000000 		.4byte	0x81
 2539 020b 19       		.byte	0x19
 2540 020c 00       		.byte	0
 2541 020d 07       		.uleb128 0x7
 2542 020e B1000000 		.4byte	0xb1
 2543 0212 1D020000 		.4byte	0x21d
 2544 0216 08       		.uleb128 0x8
 2545 0217 E5000000 		.4byte	0xe5
 2546 021b 0A       		.byte	0xa
 2547 021c 00       		.byte	0
 2548 021d 03       		.uleb128 0x3
 2549 021e 12060000 		.4byte	.LASF37
 2550 0222 07       		.byte	0x7
 2551 0223 15       		.byte	0x15
 2552 0224 D4010000 		.4byte	0x1d4
 2553 0228 09       		.uleb128 0x9
 2554 0229 14       		.byte	0x14
 2555 022a 08       		.byte	0x8
 2556 022b 11       		.byte	0x11
 2557 022c 6D020000 		.4byte	0x26d
 2558 0230 0B       		.uleb128 0xb
 2559 0231 02040000 		.4byte	.LASF38
 2560 0235 08       		.byte	0x8
 2561 0236 12       		.byte	0x12
 2562 0237 C9000000 		.4byte	0xc9
 2563 023b 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 62


 2564 023c 0B       		.uleb128 0xb
 2565 023d FA010000 		.4byte	.LASF39
 2566 0241 08       		.byte	0x8
 2567 0242 13       		.byte	0x13
 2568 0243 C9000000 		.4byte	0xc9
 2569 0247 04       		.byte	0x4
 2570 0248 0B       		.uleb128 0xb
 2571 0249 08020000 		.4byte	.LASF40
 2572 024d 08       		.byte	0x8
 2573 024e 14       		.byte	0x14
 2574 024f C9000000 		.4byte	0xc9
 2575 0253 08       		.byte	0x8
 2576 0254 0B       		.uleb128 0xb
 2577 0255 EE050000 		.4byte	.LASF41
 2578 0259 08       		.byte	0x8
 2579 025a 15       		.byte	0x15
 2580 025b C9000000 		.4byte	0xc9
 2581 025f 0C       		.byte	0xc
 2582 0260 0B       		.uleb128 0xb
 2583 0261 66070000 		.4byte	.LASF42
 2584 0265 08       		.byte	0x8
 2585 0266 16       		.byte	0x16
 2586 0267 81000000 		.4byte	0x81
 2587 026b 10       		.byte	0x10
 2588 026c 00       		.byte	0
 2589 026d 03       		.uleb128 0x3
 2590 026e A1090000 		.4byte	.LASF43
 2591 0272 08       		.byte	0x8
 2592 0273 17       		.byte	0x17
 2593 0274 28020000 		.4byte	0x228
 2594 0278 09       		.uleb128 0x9
 2595 0279 10       		.byte	0x10
 2596 027a 08       		.byte	0x8
 2597 027b 19       		.byte	0x19
 2598 027c B1020000 		.4byte	0x2b1
 2599 0280 0B       		.uleb128 0xb
 2600 0281 66030000 		.4byte	.LASF44
 2601 0285 08       		.byte	0x8
 2602 0286 1A       		.byte	0x1a
 2603 0287 C9000000 		.4byte	0xc9
 2604 028b 00       		.byte	0
 2605 028c 0B       		.uleb128 0xb
 2606 028d 90020000 		.4byte	.LASF45
 2607 0291 08       		.byte	0x8
 2608 0292 1B       		.byte	0x1b
 2609 0293 C9000000 		.4byte	0xc9
 2610 0297 04       		.byte	0x4
 2611 0298 0B       		.uleb128 0xb
 2612 0299 55070000 		.4byte	.LASF46
 2613 029d 08       		.byte	0x8
 2614 029e 1C       		.byte	0x1c
 2615 029f C9000000 		.4byte	0xc9
 2616 02a3 08       		.byte	0x8
 2617 02a4 0B       		.uleb128 0xb
 2618 02a5 BF060000 		.4byte	.LASF47
 2619 02a9 08       		.byte	0x8
 2620 02aa 1D       		.byte	0x1d
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 63


 2621 02ab C9000000 		.4byte	0xc9
 2622 02af 0C       		.byte	0xc
 2623 02b0 00       		.byte	0
 2624 02b1 03       		.uleb128 0x3
 2625 02b2 2D090000 		.4byte	.LASF48
 2626 02b6 08       		.byte	0x8
 2627 02b7 1E       		.byte	0x1e
 2628 02b8 78020000 		.4byte	0x278
 2629 02bc 0E       		.uleb128 0xe
 2630 02bd 746D00   		.ascii	"tm\000"
 2631 02c0 24       		.byte	0x24
 2632 02c1 09       		.byte	0x9
 2633 02c2 21       		.byte	0x21
 2634 02c3 34030000 		.4byte	0x334
 2635 02c7 0B       		.uleb128 0xb
 2636 02c8 7C080000 		.4byte	.LASF49
 2637 02cc 09       		.byte	0x9
 2638 02cd 23       		.byte	0x23
 2639 02ce 68000000 		.4byte	0x68
 2640 02d2 00       		.byte	0
 2641 02d3 0B       		.uleb128 0xb
 2642 02d4 2C050000 		.4byte	.LASF50
 2643 02d8 09       		.byte	0x9
 2644 02d9 24       		.byte	0x24
 2645 02da 68000000 		.4byte	0x68
 2646 02de 04       		.byte	0x4
 2647 02df 0B       		.uleb128 0xb
 2648 02e0 0F000000 		.4byte	.LASF51
 2649 02e4 09       		.byte	0x9
 2650 02e5 25       		.byte	0x25
 2651 02e6 68000000 		.4byte	0x68
 2652 02ea 08       		.byte	0x8
 2653 02eb 0B       		.uleb128 0xb
 2654 02ec 4E080000 		.4byte	.LASF52
 2655 02f0 09       		.byte	0x9
 2656 02f1 26       		.byte	0x26
 2657 02f2 68000000 		.4byte	0x68
 2658 02f6 0C       		.byte	0xc
 2659 02f7 0B       		.uleb128 0xb
 2660 02f8 31030000 		.4byte	.LASF53
 2661 02fc 09       		.byte	0x9
 2662 02fd 27       		.byte	0x27
 2663 02fe 68000000 		.4byte	0x68
 2664 0302 10       		.byte	0x10
 2665 0303 0B       		.uleb128 0xb
 2666 0304 54030000 		.4byte	.LASF54
 2667 0308 09       		.byte	0x9
 2668 0309 28       		.byte	0x28
 2669 030a 68000000 		.4byte	0x68
 2670 030e 14       		.byte	0x14
 2671 030f 0B       		.uleb128 0xb
 2672 0310 7D070000 		.4byte	.LASF55
 2673 0314 09       		.byte	0x9
 2674 0315 29       		.byte	0x29
 2675 0316 68000000 		.4byte	0x68
 2676 031a 18       		.byte	0x18
 2677 031b 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 64


 2678 031c 6F050000 		.4byte	.LASF56
 2679 0320 09       		.byte	0x9
 2680 0321 2A       		.byte	0x2a
 2681 0322 68000000 		.4byte	0x68
 2682 0326 1C       		.byte	0x1c
 2683 0327 0B       		.uleb128 0xb
 2684 0328 3B040000 		.4byte	.LASF57
 2685 032c 09       		.byte	0x9
 2686 032d 2B       		.byte	0x2b
 2687 032e 68000000 		.4byte	0x68
 2688 0332 20       		.byte	0x20
 2689 0333 00       		.byte	0
 2690 0334 09       		.uleb128 0x9
 2691 0335 2C       		.byte	0x2c
 2692 0336 0A       		.byte	0xa
 2693 0337 14       		.byte	0x14
 2694 0338 61030000 		.4byte	0x361
 2695 033c 0A       		.uleb128 0xa
 2696 033d 6B657900 		.ascii	"key\000"
 2697 0341 0A       		.byte	0xa
 2698 0342 15       		.byte	0x15
 2699 0343 61030000 		.4byte	0x361
 2700 0347 00       		.byte	0
 2701 0348 0B       		.uleb128 0xb
 2702 0349 49030000 		.4byte	.LASF58
 2703 034d 0A       		.byte	0xa
 2704 034e 16       		.byte	0x16
 2705 034f 61030000 		.4byte	0x361
 2706 0353 14       		.byte	0x14
 2707 0354 0B       		.uleb128 0xb
 2708 0355 A7050000 		.4byte	.LASF59
 2709 0359 0A       		.byte	0xa
 2710 035a 17       		.byte	0x17
 2711 035b BD000000 		.4byte	0xbd
 2712 035f 28       		.byte	0x28
 2713 0360 00       		.byte	0
 2714 0361 07       		.uleb128 0x7
 2715 0362 D7000000 		.4byte	0xd7
 2716 0366 71030000 		.4byte	0x371
 2717 036a 08       		.uleb128 0x8
 2718 036b E5000000 		.4byte	0xe5
 2719 036f 13       		.byte	0x13
 2720 0370 00       		.byte	0
 2721 0371 03       		.uleb128 0x3
 2722 0372 92030000 		.4byte	.LASF60
 2723 0376 0A       		.byte	0xa
 2724 0377 19       		.byte	0x19
 2725 0378 34030000 		.4byte	0x334
 2726 037c 09       		.uleb128 0x9
 2727 037d 3C       		.byte	0x3c
 2728 037e 0B       		.byte	0xb
 2729 037f 36       		.byte	0x36
 2730 0380 A9030000 		.4byte	0x3a9
 2731 0384 0B       		.uleb128 0xb
 2732 0385 47080000 		.4byte	.LASF61
 2733 0389 0B       		.byte	0xb
 2734 038a 37       		.byte	0x37
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 65


 2735 038b 61030000 		.4byte	0x361
 2736 038f 00       		.byte	0
 2737 0390 0B       		.uleb128 0xb
 2738 0391 FD020000 		.4byte	.LASF62
 2739 0395 0B       		.byte	0xb
 2740 0396 38       		.byte	0x38
 2741 0397 61030000 		.4byte	0x361
 2742 039b 14       		.byte	0x14
 2743 039c 0B       		.uleb128 0xb
 2744 039d F0060000 		.4byte	.LASF63
 2745 03a1 0B       		.byte	0xb
 2746 03a2 39       		.byte	0x39
 2747 03a3 61030000 		.4byte	0x361
 2748 03a7 28       		.byte	0x28
 2749 03a8 00       		.byte	0
 2750 03a9 03       		.uleb128 0x3
 2751 03aa 40020000 		.4byte	.LASF64
 2752 03ae 0B       		.byte	0xb
 2753 03af 3B       		.byte	0x3b
 2754 03b0 7C030000 		.4byte	0x37c
 2755 03b4 09       		.uleb128 0x9
 2756 03b5 20       		.byte	0x20
 2757 03b6 0B       		.byte	0xb
 2758 03b7 3D       		.byte	0x3d
 2759 03b8 1D040000 		.4byte	0x41d
 2760 03bc 0B       		.uleb128 0xb
 2761 03bd 68020000 		.4byte	.LASF65
 2762 03c1 0B       		.byte	0xb
 2763 03c2 3E       		.byte	0x3e
 2764 03c3 68000000 		.4byte	0x68
 2765 03c7 00       		.byte	0
 2766 03c8 0A       		.uleb128 0xa
 2767 03c9 62657200 		.ascii	"ber\000"
 2768 03cd 0B       		.byte	0xb
 2769 03ce 3F       		.byte	0x3f
 2770 03cf 68000000 		.4byte	0x68
 2771 03d3 04       		.byte	0x4
 2772 03d4 0B       		.uleb128 0xb
 2773 03d5 CE060000 		.4byte	.LASF66
 2774 03d9 0B       		.byte	0xb
 2775 03da 40       		.byte	0x40
 2776 03db 68000000 		.4byte	0x68
 2777 03df 08       		.byte	0x8
 2778 03e0 0B       		.uleb128 0xb
 2779 03e1 C4010000 		.4byte	.LASF67
 2780 03e5 0B       		.byte	0xb
 2781 03e6 41       		.byte	0x41
 2782 03e7 68000000 		.4byte	0x68
 2783 03eb 0C       		.byte	0xc
 2784 03ec 0B       		.uleb128 0xb
 2785 03ed 99060000 		.4byte	.LASF68
 2786 03f1 0B       		.byte	0xb
 2787 03f2 42       		.byte	0x42
 2788 03f3 68000000 		.4byte	0x68
 2789 03f7 10       		.byte	0x10
 2790 03f8 0B       		.uleb128 0xb
 2791 03f9 94060000 		.4byte	.LASF69
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 66


 2792 03fd 0B       		.byte	0xb
 2793 03fe 43       		.byte	0x43
 2794 03ff 68000000 		.4byte	0x68
 2795 0403 14       		.byte	0x14
 2796 0404 0B       		.uleb128 0xb
 2797 0405 D7010000 		.4byte	.LASF70
 2798 0409 0B       		.byte	0xb
 2799 040a 44       		.byte	0x44
 2800 040b 68000000 		.4byte	0x68
 2801 040f 18       		.byte	0x18
 2802 0410 0B       		.uleb128 0xb
 2803 0411 77020000 		.4byte	.LASF71
 2804 0415 0B       		.byte	0xb
 2805 0416 45       		.byte	0x45
 2806 0417 68000000 		.4byte	0x68
 2807 041b 1C       		.byte	0x1c
 2808 041c 00       		.byte	0
 2809 041d 03       		.uleb128 0x3
 2810 041e 47070000 		.4byte	.LASF72
 2811 0422 0B       		.byte	0xb
 2812 0423 47       		.byte	0x47
 2813 0424 B4030000 		.4byte	0x3b4
 2814 0428 09       		.uleb128 0x9
 2815 0429 08       		.byte	0x8
 2816 042a 0B       		.byte	0xb
 2817 042b 53       		.byte	0x53
 2818 042c 91040000 		.4byte	0x491
 2819 0430 0B       		.uleb128 0xb
 2820 0431 D6020000 		.4byte	.LASF73
 2821 0435 0B       		.byte	0xb
 2822 0436 55       		.byte	0x55
 2823 0437 81000000 		.4byte	0x81
 2824 043b 00       		.byte	0
 2825 043c 0B       		.uleb128 0xb
 2826 043d 1A090000 		.4byte	.LASF74
 2827 0441 0B       		.byte	0xb
 2828 0442 57       		.byte	0x57
 2829 0443 91040000 		.4byte	0x491
 2830 0447 01       		.byte	0x1
 2831 0448 0B       		.uleb128 0xb
 2832 0449 61090000 		.4byte	.LASF75
 2833 044d 0B       		.byte	0xb
 2834 044e 59       		.byte	0x59
 2835 044f 81000000 		.4byte	0x81
 2836 0453 02       		.byte	0x2
 2837 0454 0B       		.uleb128 0xb
 2838 0455 B5060000 		.4byte	.LASF76
 2839 0459 0B       		.byte	0xb
 2840 045a 5B       		.byte	0x5b
 2841 045b 81000000 		.4byte	0x81
 2842 045f 03       		.byte	0x3
 2843 0460 0B       		.uleb128 0xb
 2844 0461 38030000 		.4byte	.LASF77
 2845 0465 0B       		.byte	0xb
 2846 0466 5E       		.byte	0x5e
 2847 0467 81000000 		.4byte	0x81
 2848 046b 04       		.byte	0x4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 67


 2849 046c 0B       		.uleb128 0xb
 2850 046d C3080000 		.4byte	.LASF78
 2851 0471 0B       		.byte	0xb
 2852 0472 63       		.byte	0x63
 2853 0473 81000000 		.4byte	0x81
 2854 0477 05       		.byte	0x5
 2855 0478 0B       		.uleb128 0xb
 2856 0479 85070000 		.4byte	.LASF79
 2857 047d 0B       		.byte	0xb
 2858 047e 65       		.byte	0x65
 2859 047f 81000000 		.4byte	0x81
 2860 0483 06       		.byte	0x6
 2861 0484 0B       		.uleb128 0xb
 2862 0485 5F080000 		.4byte	.LASF80
 2863 0489 0B       		.byte	0xb
 2864 048a 66       		.byte	0x66
 2865 048b 81000000 		.4byte	0x81
 2866 048f 07       		.byte	0x7
 2867 0490 00       		.byte	0
 2868 0491 02       		.uleb128 0x2
 2869 0492 01       		.byte	0x1
 2870 0493 02       		.byte	0x2
 2871 0494 68060000 		.4byte	.LASF81
 2872 0498 03       		.uleb128 0x3
 2873 0499 EC040000 		.4byte	.LASF82
 2874 049d 0B       		.byte	0xb
 2875 049e 68       		.byte	0x68
 2876 049f 28040000 		.4byte	0x428
 2877 04a3 09       		.uleb128 0x9
 2878 04a4 06       		.byte	0x6
 2879 04a5 0C       		.byte	0xc
 2880 04a6 2F       		.byte	0x2f
 2881 04a7 DC040000 		.4byte	0x4dc
 2882 04ab 0B       		.uleb128 0xb
 2883 04ac 19030000 		.4byte	.LASF83
 2884 04b0 0C       		.byte	0xc
 2885 04b1 31       		.byte	0x31
 2886 04b2 8D000000 		.4byte	0x8d
 2887 04b6 00       		.byte	0
 2888 04b7 0B       		.uleb128 0xb
 2889 04b8 04090000 		.4byte	.LASF84
 2890 04bc 0C       		.byte	0xc
 2891 04bd 32       		.byte	0x32
 2892 04be B1000000 		.4byte	0xb1
 2893 04c2 02       		.byte	0x2
 2894 04c3 0B       		.uleb128 0xb
 2895 04c4 F6080000 		.4byte	.LASF85
 2896 04c8 0C       		.byte	0xc
 2897 04c9 33       		.byte	0x33
 2898 04ca 81000000 		.4byte	0x81
 2899 04ce 04       		.byte	0x4
 2900 04cf 0B       		.uleb128 0xb
 2901 04d0 89000000 		.4byte	.LASF86
 2902 04d4 0C       		.byte	0xc
 2903 04d5 34       		.byte	0x34
 2904 04d6 81000000 		.4byte	0x81
 2905 04da 05       		.byte	0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 68


 2906 04db 00       		.byte	0
 2907 04dc 03       		.uleb128 0x3
 2908 04dd 8A020000 		.4byte	.LASF87
 2909 04e1 0C       		.byte	0xc
 2910 04e2 37       		.byte	0x37
 2911 04e3 E7040000 		.4byte	0x4e7
 2912 04e7 0C       		.uleb128 0xc
 2913 04e8 A3040000 		.4byte	0x4a3
 2914 04ec 09       		.uleb128 0x9
 2915 04ed 1C       		.byte	0x1c
 2916 04ee 0C       		.byte	0xc
 2917 04ef 3A       		.byte	0x3a
 2918 04f0 0D050000 		.4byte	0x50d
 2919 04f4 0B       		.uleb128 0xb
 2920 04f5 44040000 		.4byte	.LASF88
 2921 04f9 0C       		.byte	0xc
 2922 04fa 3C       		.byte	0x3c
 2923 04fb 0D050000 		.4byte	0x50d
 2924 04ff 00       		.byte	0
 2925 0500 0B       		.uleb128 0xb
 2926 0501 53090000 		.4byte	.LASF89
 2927 0505 0C       		.byte	0xc
 2928 0506 3D       		.byte	0x3d
 2929 0507 F2000000 		.4byte	0xf2
 2930 050b 04       		.byte	0x4
 2931 050c 00       		.byte	0
 2932 050d 06       		.uleb128 0x6
 2933 050e 04       		.byte	0x4
 2934 050f A9030000 		.4byte	0x3a9
 2935 0513 03       		.uleb128 0x3
 2936 0514 E1040000 		.4byte	.LASF90
 2937 0518 0C       		.byte	0xc
 2938 0519 3F       		.byte	0x3f
 2939 051a EC040000 		.4byte	0x4ec
 2940 051e 09       		.uleb128 0x9
 2941 051f 68       		.byte	0x68
 2942 0520 0C       		.byte	0xc
 2943 0521 45       		.byte	0x45
 2944 0522 3F050000 		.4byte	0x53f
 2945 0526 0B       		.uleb128 0xb
 2946 0527 4F040000 		.4byte	.LASF91
 2947 052b 0C       		.byte	0xc
 2948 052c 4A       		.byte	0x4a
 2949 052d 3F050000 		.4byte	0x53f
 2950 0531 00       		.byte	0
 2951 0532 0B       		.uleb128 0xb
 2952 0533 33040000 		.4byte	.LASF92
 2953 0537 0C       		.byte	0xc
 2954 0538 4B       		.byte	0x4b
 2955 0539 68000000 		.4byte	0x68
 2956 053d 64       		.byte	0x64
 2957 053e 00       		.byte	0
 2958 053f 07       		.uleb128 0x7
 2959 0540 D7000000 		.4byte	0xd7
 2960 0544 4F050000 		.4byte	0x54f
 2961 0548 08       		.uleb128 0x8
 2962 0549 E5000000 		.4byte	0xe5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 69


 2963 054d 63       		.byte	0x63
 2964 054e 00       		.byte	0
 2965 054f 03       		.uleb128 0x3
 2966 0550 77050000 		.4byte	.LASF93
 2967 0554 0C       		.byte	0xc
 2968 0555 51       		.byte	0x51
 2969 0556 1E050000 		.4byte	0x51e
 2970 055a 0F       		.uleb128 0xf
 2971 055b A1000000 		.4byte	.LASF180
 2972 055f 01       		.byte	0x1
 2973 0560 14       		.byte	0x14
 2974 0561 00000000 		.4byte	.LFB64
 2975 0565 0C000000 		.4byte	.LFE64-.LFB64
 2976 0569 01       		.uleb128 0x1
 2977 056a 9C       		.byte	0x9c
 2978 056b 10       		.uleb128 0x10
 2979 056c 43090000 		.4byte	.LASF106
 2980 0570 01       		.byte	0x1
 2981 0571 28       		.byte	0x28
 2982 0572 00000000 		.4byte	.LFB65
 2983 0576 84010000 		.4byte	.LFE65-.LFB65
 2984 057a 01       		.uleb128 0x1
 2985 057b 9C       		.byte	0x9c
 2986 057c 9D050000 		.4byte	0x59d
 2987 0580 11       		.uleb128 0x11
 2988 0581 06080000 		.4byte	.LASF94
 2989 0585 01       		.byte	0x1
 2990 0586 3C       		.byte	0x3c
 2991 0587 9D050000 		.4byte	0x59d
 2992 058b 02       		.uleb128 0x2
 2993 058c 91       		.byte	0x91
 2994 058d 64       		.sleb128 -28
 2995 058e 11       		.uleb128 0x11
 2996 058f E3030000 		.4byte	.LASF95
 2997 0593 01       		.byte	0x1
 2998 0594 68       		.byte	0x68
 2999 0595 81000000 		.4byte	0x81
 3000 0599 02       		.uleb128 0x2
 3001 059a 91       		.byte	0x91
 3002 059b 6F       		.sleb128 -17
 3003 059c 00       		.byte	0
 3004 059d 07       		.uleb128 0x7
 3005 059e 99000000 		.4byte	0x99
 3006 05a2 AD050000 		.4byte	0x5ad
 3007 05a6 08       		.uleb128 0x8
 3008 05a7 E5000000 		.4byte	0xe5
 3009 05ab 01       		.byte	0x1
 3010 05ac 00       		.byte	0
 3011 05ad 12       		.uleb128 0x12
 3012 05ae 5C040000 		.4byte	.LASF97
 3013 05b2 01       		.byte	0x1
 3014 05b3 72       		.byte	0x72
 3015 05b4 68000000 		.4byte	0x68
 3016 05b8 00000000 		.4byte	.LFB66
 3017 05bc DC000000 		.4byte	.LFE66-.LFB66
 3018 05c0 01       		.uleb128 0x1
 3019 05c1 9C       		.byte	0x9c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 70


 3020 05c2 D5050000 		.4byte	0x5d5
 3021 05c6 11       		.uleb128 0x11
 3022 05c7 4C060000 		.4byte	.LASF96
 3023 05cb 01       		.byte	0x1
 3024 05cc 9E       		.byte	0x9e
 3025 05cd 81000000 		.4byte	0x81
 3026 05d1 02       		.uleb128 0x2
 3027 05d2 91       		.byte	0x91
 3028 05d3 77       		.sleb128 -9
 3029 05d4 00       		.byte	0
 3030 05d5 13       		.uleb128 0x13
 3031 05d6 2C080000 		.4byte	.LASF181
 3032 05da 01       		.byte	0x1
 3033 05db AE       		.byte	0xae
 3034 05dc 00000000 		.4byte	.LFB67
 3035 05e0 2A000000 		.4byte	.LFE67-.LFB67
 3036 05e4 01       		.uleb128 0x1
 3037 05e5 9C       		.byte	0x9c
 3038 05e6 14       		.uleb128 0x14
 3039 05e7 9E030000 		.4byte	.LASF98
 3040 05eb 01       		.byte	0x1
 3041 05ec D3       		.byte	0xd3
 3042 05ed 00000000 		.4byte	.LFB68
 3043 05f1 A8000000 		.4byte	.LFE68-.LFB68
 3044 05f5 01       		.uleb128 0x1
 3045 05f6 9C       		.byte	0x9c
 3046 05f7 0A060000 		.4byte	0x60a
 3047 05fb 15       		.uleb128 0x15
 3048 05fc 03050000 		.4byte	.LASF99
 3049 0600 01       		.byte	0x1
 3050 0601 D3       		.byte	0xd3
 3051 0602 81000000 		.4byte	0x81
 3052 0606 02       		.uleb128 0x2
 3053 0607 91       		.byte	0x91
 3054 0608 77       		.sleb128 -9
 3055 0609 00       		.byte	0
 3056 060a 16       		.uleb128 0x16
 3057 060b 38090000 		.4byte	.LASF103
 3058 060f 01       		.byte	0x1
 3059 0610 F8       		.byte	0xf8
 3060 0611 81000000 		.4byte	0x81
 3061 0615 00000000 		.4byte	.LFB69
 3062 0619 48000000 		.4byte	.LFE69-.LFB69
 3063 061d 01       		.uleb128 0x1
 3064 061e 9C       		.byte	0x9c
 3065 061f 40060000 		.4byte	0x640
 3066 0623 15       		.uleb128 0x15
 3067 0624 39050000 		.4byte	.LASF100
 3068 0628 01       		.byte	0x1
 3069 0629 F8       		.byte	0xf8
 3070 062a 40060000 		.4byte	0x640
 3071 062e 02       		.uleb128 0x2
 3072 062f 91       		.byte	0x91
 3073 0630 74       		.sleb128 -12
 3074 0631 15       		.uleb128 0x15
 3075 0632 03050000 		.4byte	.LASF99
 3076 0636 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 71


 3077 0637 F8       		.byte	0xf8
 3078 0638 81000000 		.4byte	0x81
 3079 063c 02       		.uleb128 0x2
 3080 063d 91       		.byte	0x91
 3081 063e 73       		.sleb128 -13
 3082 063f 00       		.byte	0
 3083 0640 06       		.uleb128 0x6
 3084 0641 04       		.byte	0x4
 3085 0642 DC040000 		.4byte	0x4dc
 3086 0646 17       		.uleb128 0x17
 3087 0647 9E060000 		.4byte	.LASF101
 3088 064b 01       		.byte	0x1
 3089 064c 0D01     		.2byte	0x10d
 3090 064e 00000000 		.4byte	.LFB70
 3091 0652 1E000000 		.4byte	.LFE70-.LFB70
 3092 0656 01       		.uleb128 0x1
 3093 0657 9C       		.byte	0x9c
 3094 0658 6C060000 		.4byte	0x66c
 3095 065c 18       		.uleb128 0x18
 3096 065d FC060000 		.4byte	.LASF102
 3097 0661 01       		.byte	0x1
 3098 0662 0D01     		.2byte	0x10d
 3099 0664 40060000 		.4byte	0x640
 3100 0668 02       		.uleb128 0x2
 3101 0669 91       		.byte	0x91
 3102 066a 74       		.sleb128 -12
 3103 066b 00       		.byte	0
 3104 066c 19       		.uleb128 0x19
 3105 066d D4050000 		.4byte	.LASF104
 3106 0671 01       		.byte	0x1
 3107 0672 1601     		.2byte	0x116
 3108 0674 DC040000 		.4byte	0x4dc
 3109 0678 00000000 		.4byte	.LFB71
 3110 067c 46000000 		.4byte	.LFE71-.LFB71
 3111 0680 01       		.uleb128 0x1
 3112 0681 9C       		.byte	0x9c
 3113 0682 C3060000 		.4byte	0x6c3
 3114 0686 18       		.uleb128 0x18
 3115 0687 19030000 		.4byte	.LASF83
 3116 068b 01       		.byte	0x1
 3117 068c 1601     		.2byte	0x116
 3118 068e 8D000000 		.4byte	0x8d
 3119 0692 02       		.uleb128 0x2
 3120 0693 91       		.byte	0x91
 3121 0694 6A       		.sleb128 -22
 3122 0695 18       		.uleb128 0x18
 3123 0696 F6080000 		.4byte	.LASF85
 3124 069a 01       		.byte	0x1
 3125 069b 1601     		.2byte	0x116
 3126 069d 81000000 		.4byte	0x81
 3127 06a1 02       		.uleb128 0x2
 3128 06a2 91       		.byte	0x91
 3129 06a3 69       		.sleb128 -23
 3130 06a4 18       		.uleb128 0x18
 3131 06a5 89000000 		.4byte	.LASF86
 3132 06a9 01       		.byte	0x1
 3133 06aa 1601     		.2byte	0x116
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 72


 3134 06ac 81000000 		.4byte	0x81
 3135 06b0 02       		.uleb128 0x2
 3136 06b1 91       		.byte	0x91
 3137 06b2 68       		.sleb128 -24
 3138 06b3 1A       		.uleb128 0x1a
 3139 06b4 56080000 		.4byte	.LASF105
 3140 06b8 01       		.byte	0x1
 3141 06b9 1901     		.2byte	0x119
 3142 06bb DC040000 		.4byte	0x4dc
 3143 06bf 02       		.uleb128 0x2
 3144 06c0 91       		.byte	0x91
 3145 06c1 70       		.sleb128 -16
 3146 06c2 00       		.byte	0
 3147 06c3 1B       		.uleb128 0x1b
 3148 06c4 0B070000 		.4byte	.LASF107
 3149 06c8 01       		.byte	0x1
 3150 06c9 2F01     		.2byte	0x12f
 3151 06cb 00000000 		.4byte	.LFB72
 3152 06cf 2C010000 		.4byte	.LFE72-.LFB72
 3153 06d3 01       		.uleb128 0x1
 3154 06d4 9C       		.byte	0x9c
 3155 06d5 3A070000 		.4byte	0x73a
 3156 06d9 1A       		.uleb128 0x1a
 3157 06da 9F010000 		.4byte	.LASF108
 3158 06de 01       		.byte	0x1
 3159 06df 3701     		.2byte	0x137
 3160 06e1 C9010000 		.4byte	0x1c9
 3161 06e5 03       		.uleb128 0x3
 3162 06e6 91       		.byte	0x91
 3163 06e7 EC7C     		.sleb128 -404
 3164 06e9 1A       		.uleb128 0x1a
 3165 06ea 1F050000 		.4byte	.LASF109
 3166 06ee 01       		.byte	0x1
 3167 06ef 3B01     		.2byte	0x13b
 3168 06f1 C9010000 		.4byte	0x1c9
 3169 06f5 03       		.uleb128 0x3
 3170 06f6 91       		.byte	0x91
 3171 06f7 E879     		.sleb128 -792
 3172 06f9 1A       		.uleb128 0x1a
 3173 06fa D0080000 		.4byte	.LASF110
 3174 06fe 01       		.byte	0x1
 3175 06ff 3F01     		.2byte	0x13f
 3176 0701 C9010000 		.4byte	0x1c9
 3177 0705 03       		.uleb128 0x3
 3178 0706 91       		.byte	0x91
 3179 0707 E476     		.sleb128 -1180
 3180 0709 1A       		.uleb128 0x1a
 3181 070a 3A010000 		.4byte	.LASF111
 3182 070e 01       		.byte	0x1
 3183 070f 4301     		.2byte	0x143
 3184 0711 C9010000 		.4byte	0x1c9
 3185 0715 03       		.uleb128 0x3
 3186 0716 91       		.byte	0x91
 3187 0717 E073     		.sleb128 -1568
 3188 0719 1A       		.uleb128 0x1a
 3189 071a 8A040000 		.4byte	.LASF112
 3190 071e 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 73


 3191 071f 4701     		.2byte	0x147
 3192 0721 C9010000 		.4byte	0x1c9
 3193 0725 03       		.uleb128 0x3
 3194 0726 91       		.byte	0x91
 3195 0727 DC70     		.sleb128 -1956
 3196 0729 1A       		.uleb128 0x1a
 3197 072a 00000000 		.4byte	.LASF113
 3198 072e 01       		.byte	0x1
 3199 072f 4B01     		.2byte	0x14b
 3200 0731 C9010000 		.4byte	0x1c9
 3201 0735 03       		.uleb128 0x3
 3202 0736 91       		.byte	0x91
 3203 0737 D86D     		.sleb128 -2344
 3204 0739 00       		.byte	0
 3205 073a 1C       		.uleb128 0x1c
 3206 073b 4E090000 		.4byte	.LASF182
 3207 073f 01       		.byte	0x1
 3208 0740 5601     		.2byte	0x156
 3209 0742 68000000 		.4byte	0x68
 3210 0746 00000000 		.4byte	.LFB73
 3211 074a 1E000000 		.4byte	.LFE73-.LFB73
 3212 074e 01       		.uleb128 0x1
 3213 074f 9C       		.byte	0x9c
 3214 0750 1D       		.uleb128 0x1d
 3215 0751 E0020000 		.4byte	.LASF114
 3216 0755 01       		.byte	0x1
 3217 0756 6C01     		.2byte	0x16c
 3218 0758 81000000 		.4byte	0x81
 3219 075c 00000000 		.4byte	.LFB74
 3220 0760 5C040000 		.4byte	.LFE74-.LFB74
 3221 0764 01       		.uleb128 0x1
 3222 0765 9C       		.byte	0x9c
 3223 0766 BA080000 		.4byte	0x8ba
 3224 076a 1E       		.uleb128 0x1e
 3225 076b 62000000 		.4byte	.LBB2
 3226 076f CC030000 		.4byte	.LBE2-.LBB2
 3227 0773 1A       		.uleb128 0x1a
 3228 0774 E7050000 		.4byte	.LASF115
 3229 0778 01       		.byte	0x1
 3230 0779 9C01     		.2byte	0x19c
 3231 077b 61030000 		.4byte	0x361
 3232 077f 02       		.uleb128 0x2
 3233 0780 91       		.byte	0x91
 3234 0781 48       		.sleb128 -56
 3235 0782 1A       		.uleb128 0x1a
 3236 0783 21060000 		.4byte	.LASF116
 3237 0787 01       		.byte	0x1
 3238 0788 A001     		.2byte	0x1a0
 3239 078a 61030000 		.4byte	0x361
 3240 078e 03       		.uleb128 0x3
 3241 078f 91       		.byte	0x91
 3242 0790 B47F     		.sleb128 -76
 3243 0792 1A       		.uleb128 0x1a
 3244 0793 AB020000 		.4byte	.LASF117
 3245 0797 01       		.byte	0x1
 3246 0798 A501     		.2byte	0x1a5
 3247 079a 61030000 		.4byte	0x361
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 74


 3248 079e 03       		.uleb128 0x3
 3249 079f 91       		.byte	0x91
 3250 07a0 A07F     		.sleb128 -96
 3251 07a2 1A       		.uleb128 0x1a
 3252 07a3 EF030000 		.4byte	.LASF118
 3253 07a7 01       		.byte	0x1
 3254 07a8 B801     		.2byte	0x1b8
 3255 07aa 8D000000 		.4byte	0x8d
 3256 07ae 02       		.uleb128 0x2
 3257 07af 91       		.byte	0x91
 3258 07b0 66       		.sleb128 -26
 3259 07b1 1A       		.uleb128 0x1a
 3260 07b2 75040000 		.4byte	.LASF119
 3261 07b6 01       		.byte	0x1
 3262 07b7 B901     		.2byte	0x1b9
 3263 07b9 61030000 		.4byte	0x361
 3264 07bd 03       		.uleb128 0x3
 3265 07be 91       		.byte	0x91
 3266 07bf 8C7F     		.sleb128 -116
 3267 07c1 1A       		.uleb128 0x1a
 3268 07c2 F1070000 		.4byte	.LASF120
 3269 07c6 01       		.byte	0x1
 3270 07c7 CE01     		.2byte	0x1ce
 3271 07c9 BA080000 		.4byte	0x8ba
 3272 07cd 03       		.uleb128 0x3
 3273 07ce 91       		.byte	0x91
 3274 07cf A475     		.sleb128 -1372
 3275 07d1 1A       		.uleb128 0x1a
 3276 07d2 8E080000 		.4byte	.LASF30
 3277 07d6 01       		.byte	0x1
 3278 07d7 CF01     		.2byte	0x1cf
 3279 07d9 81000000 		.4byte	0x81
 3280 07dd 02       		.uleb128 0x2
 3281 07de 91       		.byte	0x91
 3282 07df 65       		.sleb128 -27
 3283 07e0 1A       		.uleb128 0x1a
 3284 07e1 B6070000 		.4byte	.LASF121
 3285 07e5 01       		.byte	0x1
 3286 07e6 D601     		.2byte	0x1d6
 3287 07e8 EC000000 		.4byte	0xec
 3288 07ec 02       		.uleb128 0x2
 3289 07ed 91       		.byte	0x91
 3290 07ee 6C       		.sleb128 -20
 3291 07ef 1A       		.uleb128 0x1a
 3292 07f0 BC010000 		.4byte	.LASF122
 3293 07f4 01       		.byte	0x1
 3294 07f5 DA01     		.2byte	0x1da
 3295 07f7 A5000000 		.4byte	0xa5
 3296 07fb 02       		.uleb128 0x2
 3297 07fc 91       		.byte	0x91
 3298 07fd 64       		.sleb128 -28
 3299 07fe 1A       		.uleb128 0x1a
 3300 07ff E9020000 		.4byte	.LASF123
 3301 0803 01       		.byte	0x1
 3302 0804 0A02     		.2byte	0x20a
 3303 0806 4C000000 		.4byte	0x4c
 3304 080a 02       		.uleb128 0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 75


 3305 080b 91       		.byte	0x91
 3306 080c 5C       		.sleb128 -36
 3307 080d 1F       		.uleb128 0x1f
 3308 080e F0000000 		.4byte	.LBB3
 3309 0812 2C000000 		.4byte	.LBE3-.LBB3
 3310 0816 3A080000 		.4byte	0x83a
 3311 081a 1A       		.uleb128 0x1a
 3312 081b 37070000 		.4byte	.LASF124
 3313 081f 01       		.byte	0x1
 3314 0820 AD01     		.2byte	0x1ad
 3315 0822 8D000000 		.4byte	0x8d
 3316 0826 02       		.uleb128 0x2
 3317 0827 91       		.byte	0x91
 3318 0828 68       		.sleb128 -24
 3319 0829 1A       		.uleb128 0x1a
 3320 082a 2E020000 		.4byte	.LASF125
 3321 082e 01       		.byte	0x1
 3322 082f AE01     		.2byte	0x1ae
 3323 0831 61030000 		.4byte	0x361
 3324 0835 03       		.uleb128 0x3
 3325 0836 91       		.byte	0x91
 3326 0837 F87E     		.sleb128 -136
 3327 0839 00       		.byte	0
 3328 083a 1F       		.uleb128 0x1f
 3329 083b 1E010000 		.4byte	.LBB4
 3330 083f 20000000 		.4byte	.LBE4-.LBB4
 3331 0843 58080000 		.4byte	0x858
 3332 0847 1A       		.uleb128 0x1a
 3333 0848 2E020000 		.4byte	.LASF125
 3334 084c 01       		.byte	0x1
 3335 084d B201     		.2byte	0x1b2
 3336 084f 61030000 		.4byte	0x361
 3337 0853 03       		.uleb128 0x3
 3338 0854 91       		.byte	0x91
 3339 0855 E47E     		.sleb128 -156
 3340 0857 00       		.byte	0
 3341 0858 1F       		.uleb128 0x1f
 3342 0859 5E020000 		.4byte	.LBB5
 3343 085d 4C010000 		.4byte	.LBE5-.LBB5
 3344 0861 8F080000 		.4byte	0x88f
 3345 0865 1A       		.uleb128 0x1a
 3346 0866 E0050000 		.4byte	.LASF126
 3347 086a 01       		.byte	0x1
 3348 086b DF01     		.2byte	0x1df
 3349 086d A5000000 		.4byte	0xa5
 3350 0871 02       		.uleb128 0x2
 3351 0872 91       		.byte	0x91
 3352 0873 6B       		.sleb128 -21
 3353 0874 1E       		.uleb128 0x1e
 3354 0875 66020000 		.4byte	.LBB6
 3355 0879 28010000 		.4byte	.LBE6-.LBB6
 3356 087d 1A       		.uleb128 0x1a
 3357 087e BC030000 		.4byte	.LASF127
 3358 0882 01       		.byte	0x1
 3359 0883 E101     		.2byte	0x1e1
 3360 0885 CA080000 		.4byte	0x8ca
 3361 0889 03       		.uleb128 0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 76


 3362 088a 91       		.byte	0x91
 3363 088b EC76     		.sleb128 -1172
 3364 088d 00       		.byte	0
 3365 088e 00       		.byte	0
 3366 088f 1E       		.uleb128 0x1e
 3367 0890 C4030000 		.4byte	.LBB7
 3368 0894 3A000000 		.4byte	.LBE7-.LBB7
 3369 0898 1A       		.uleb128 0x1a
 3370 0899 B9020000 		.4byte	.LASF128
 3371 089d 01       		.byte	0x1
 3372 089e 0102     		.2byte	0x201
 3373 08a0 68000000 		.4byte	0x68
 3374 08a4 02       		.uleb128 0x2
 3375 08a5 91       		.byte	0x91
 3376 08a6 60       		.sleb128 -32
 3377 08a7 1A       		.uleb128 0x1a
 3378 08a8 A9060000 		.4byte	.LASF129
 3379 08ac 01       		.byte	0x1
 3380 08ad 0202     		.2byte	0x202
 3381 08af DB080000 		.4byte	0x8db
 3382 08b3 03       		.uleb128 0x3
 3383 08b4 91       		.byte	0x91
 3384 08b5 D87E     		.sleb128 -168
 3385 08b7 00       		.byte	0
 3386 08b8 00       		.byte	0
 3387 08b9 00       		.byte	0
 3388 08ba 07       		.uleb128 0x7
 3389 08bb D7000000 		.4byte	0xd7
 3390 08bf CA080000 		.4byte	0x8ca
 3391 08c3 08       		.uleb128 0x8
 3392 08c4 E5000000 		.4byte	0xe5
 3393 08c8 C7       		.byte	0xc7
 3394 08c9 00       		.byte	0
 3395 08ca 07       		.uleb128 0x7
 3396 08cb D7000000 		.4byte	0xd7
 3397 08cf DB080000 		.4byte	0x8db
 3398 08d3 20       		.uleb128 0x20
 3399 08d4 E5000000 		.4byte	0xe5
 3400 08d8 E803     		.2byte	0x3e8
 3401 08da 00       		.byte	0
 3402 08db 07       		.uleb128 0x7
 3403 08dc D7000000 		.4byte	0xd7
 3404 08e0 EB080000 		.4byte	0x8eb
 3405 08e4 08       		.uleb128 0x8
 3406 08e5 E5000000 		.4byte	0xe5
 3407 08e9 09       		.byte	0x9
 3408 08ea 00       		.byte	0
 3409 08eb 1D       		.uleb128 0x1d
 3410 08ec 28060000 		.4byte	.LASF130
 3411 08f0 01       		.byte	0x1
 3412 08f1 1F02     		.2byte	0x21f
 3413 08f3 81000000 		.4byte	0x81
 3414 08f7 00000000 		.4byte	.LFB75
 3415 08fb 44000000 		.4byte	.LFE75-.LFB75
 3416 08ff 01       		.uleb128 0x1
 3417 0900 9C       		.byte	0x9c
 3418 0901 1F090000 		.4byte	0x91f
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 77


 3419 0905 1E       		.uleb128 0x1e
 3420 0906 20000000 		.4byte	.LBB8
 3421 090a 1A000000 		.4byte	.LBE8-.LBB8
 3422 090e 1A       		.uleb128 0x1a
 3423 090f E9020000 		.4byte	.LASF123
 3424 0913 01       		.byte	0x1
 3425 0914 2A02     		.2byte	0x22a
 3426 0916 4C000000 		.4byte	0x4c
 3427 091a 02       		.uleb128 0x2
 3428 091b 91       		.byte	0x91
 3429 091c 74       		.sleb128 -12
 3430 091d 00       		.byte	0
 3431 091e 00       		.byte	0
 3432 091f 1D       		.uleb128 0x1d
 3433 0920 1D040000 		.4byte	.LASF131
 3434 0924 01       		.byte	0x1
 3435 0925 3F02     		.2byte	0x23f
 3436 0927 81000000 		.4byte	0x81
 3437 092b 00000000 		.4byte	.LFB76
 3438 092f 9C020000 		.4byte	.LFE76-.LFB76
 3439 0933 01       		.uleb128 0x1
 3440 0934 9C       		.byte	0x9c
 3441 0935 C0090000 		.4byte	0x9c0
 3442 0939 1A       		.uleb128 0x1a
 3443 093a A7050000 		.4byte	.LASF59
 3444 093e 01       		.byte	0x1
 3445 093f 4202     		.2byte	0x242
 3446 0941 4C000000 		.4byte	0x4c
 3447 0945 02       		.uleb128 0x2
 3448 0946 91       		.byte	0x91
 3449 0947 6C       		.sleb128 -20
 3450 0948 1A       		.uleb128 0x1a
 3451 0949 BC070000 		.4byte	.LASF132
 3452 094d 01       		.byte	0x1
 3453 094e 4302     		.2byte	0x243
 3454 0950 C0090000 		.4byte	0x9c0
 3455 0954 02       		.uleb128 0x2
 3456 0955 91       		.byte	0x91
 3457 0956 4C       		.sleb128 -52
 3458 0957 1A       		.uleb128 0x1a
 3459 0958 49030000 		.4byte	.LASF58
 3460 095c 01       		.byte	0x1
 3461 095d 4702     		.2byte	0x247
 3462 095f 61030000 		.4byte	0x361
 3463 0963 03       		.uleb128 0x3
 3464 0964 91       		.byte	0x91
 3465 0965 B87F     		.sleb128 -72
 3466 0967 1A       		.uleb128 0x1a
 3467 0968 AB090000 		.4byte	.LASF133
 3468 096c 01       		.byte	0x1
 3469 096d 4B02     		.2byte	0x24b
 3470 096f D0090000 		.4byte	0x9d0
 3471 0973 03       		.uleb128 0x3
 3472 0974 91       		.byte	0x91
 3473 0975 B07F     		.sleb128 -80
 3474 0977 1A       		.uleb128 0x1a
 3475 0978 C7030000 		.4byte	.LASF134
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 78


 3476 097c 01       		.byte	0x1
 3477 097d 6C02     		.2byte	0x26c
 3478 097f 6D020000 		.4byte	0x26d
 3479 0983 03       		.uleb128 0x3
 3480 0984 91       		.byte	0x91
 3481 0985 9C7F     		.sleb128 -100
 3482 0987 1F       		.uleb128 0x1f
 3483 0988 46000000 		.4byte	.LBB9
 3484 098c 78000000 		.4byte	.LBE9-.LBB9
 3485 0990 A5090000 		.4byte	0x9a5
 3486 0994 1A       		.uleb128 0x1a
 3487 0995 0F080000 		.4byte	.LASF135
 3488 0999 01       		.byte	0x1
 3489 099a 5402     		.2byte	0x254
 3490 099c 1D020000 		.4byte	0x21d
 3491 09a0 03       		.uleb128 0x3
 3492 09a1 91       		.byte	0x91
 3493 09a2 807F     		.sleb128 -128
 3494 09a4 00       		.byte	0
 3495 09a5 1E       		.uleb128 0x1e
 3496 09a6 42010000 		.4byte	.LBB10
 3497 09aa EE000000 		.4byte	.LBE10-.LBB10
 3498 09ae 1A       		.uleb128 0x1a
 3499 09af 83080000 		.4byte	.LASF136
 3500 09b3 01       		.byte	0x1
 3501 09b4 8802     		.2byte	0x288
 3502 09b6 B1020000 		.4byte	0x2b1
 3503 09ba 03       		.uleb128 0x3
 3504 09bb 91       		.byte	0x91
 3505 09bc F07E     		.sleb128 -144
 3506 09be 00       		.byte	0
 3507 09bf 00       		.byte	0
 3508 09c0 07       		.uleb128 0x7
 3509 09c1 D7000000 		.4byte	0xd7
 3510 09c5 D0090000 		.4byte	0x9d0
 3511 09c9 08       		.uleb128 0x8
 3512 09ca E5000000 		.4byte	0xe5
 3513 09ce 1F       		.byte	0x1f
 3514 09cf 00       		.byte	0
 3515 09d0 07       		.uleb128 0x7
 3516 09d1 D7000000 		.4byte	0xd7
 3517 09d5 E0090000 		.4byte	0x9e0
 3518 09d9 08       		.uleb128 0x8
 3519 09da E5000000 		.4byte	0xe5
 3520 09de 04       		.byte	0x4
 3521 09df 00       		.byte	0
 3522 09e0 21       		.uleb128 0x21
 3523 09e1 8A030000 		.4byte	.LASF137
 3524 09e5 01       		.byte	0x1
 3525 09e6 B002     		.2byte	0x2b0
 3526 09e8 81000000 		.4byte	0x81
 3527 09ec 00000000 		.4byte	.LFB77
 3528 09f0 74000000 		.4byte	.LFE77-.LFB77
 3529 09f4 01       		.uleb128 0x1
 3530 09f5 9C       		.byte	0x9c
 3531 09f6 260A0000 		.4byte	0xa26
 3532 09fa 18       		.uleb128 0x18
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 79


 3533 09fb A7050000 		.4byte	.LASF59
 3534 09ff 01       		.byte	0x1
 3535 0a00 B002     		.2byte	0x2b0
 3536 0a02 4C000000 		.4byte	0x4c
 3537 0a06 02       		.uleb128 0x2
 3538 0a07 91       		.byte	0x91
 3539 0a08 64       		.sleb128 -28
 3540 0a09 22       		.uleb128 0x22
 3541 0a0a 7400     		.ascii	"t\000"
 3542 0a0c 01       		.byte	0x1
 3543 0a0d B702     		.2byte	0x2b7
 3544 0a0f 260A0000 		.4byte	0xa26
 3545 0a13 02       		.uleb128 0x2
 3546 0a14 91       		.byte	0x91
 3547 0a15 74       		.sleb128 -12
 3548 0a16 1A       		.uleb128 0x1a
 3549 0a17 86050000 		.4byte	.LASF138
 3550 0a1b 01       		.byte	0x1
 3551 0a1c BC02     		.2byte	0x2bc
 3552 0a1e 6B010000 		.4byte	0x16b
 3553 0a22 02       		.uleb128 0x2
 3554 0a23 91       		.byte	0x91
 3555 0a24 68       		.sleb128 -24
 3556 0a25 00       		.byte	0
 3557 0a26 06       		.uleb128 0x6
 3558 0a27 04       		.byte	0x4
 3559 0a28 BC020000 		.4byte	0x2bc
 3560 0a2c 21       		.uleb128 0x21
 3561 0a2d 28030000 		.4byte	.LASF139
 3562 0a31 01       		.byte	0x1
 3563 0a32 D902     		.2byte	0x2d9
 3564 0a34 81000000 		.4byte	0x81
 3565 0a38 00000000 		.4byte	.LFB78
 3566 0a3c 38010000 		.4byte	.LFE78-.LFB78
 3567 0a40 01       		.uleb128 0x1
 3568 0a41 9C       		.byte	0x9c
 3569 0a42 A50A0000 		.4byte	0xaa5
 3570 0a46 18       		.uleb128 0x18
 3571 0a47 4F030000 		.4byte	.LASF140
 3572 0a4b 01       		.byte	0x1
 3573 0a4c D902     		.2byte	0x2d9
 3574 0a4e EC000000 		.4byte	0xec
 3575 0a52 03       		.uleb128 0x3
 3576 0a53 91       		.byte	0x91
 3577 0a54 9C7E     		.sleb128 -228
 3578 0a56 18       		.uleb128 0x18
 3579 0a57 44030000 		.4byte	.LASF141
 3580 0a5b 01       		.byte	0x1
 3581 0a5c D902     		.2byte	0x2d9
 3582 0a5e 68000000 		.4byte	0x68
 3583 0a62 03       		.uleb128 0x3
 3584 0a63 91       		.byte	0x91
 3585 0a64 987E     		.sleb128 -232
 3586 0a66 18       		.uleb128 0x18
 3587 0a67 33050000 		.4byte	.LASF142
 3588 0a6b 01       		.byte	0x1
 3589 0a6c D902     		.2byte	0x2d9
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 80


 3590 0a6e EC000000 		.4byte	0xec
 3591 0a72 03       		.uleb128 0x3
 3592 0a73 91       		.byte	0x91
 3593 0a74 947E     		.sleb128 -236
 3594 0a76 1A       		.uleb128 0x1a
 3595 0a77 1F020000 		.4byte	.LASF143
 3596 0a7b 01       		.byte	0x1
 3597 0a7c DB02     		.2byte	0x2db
 3598 0a7e 81000000 		.4byte	0x81
 3599 0a82 02       		.uleb128 0x2
 3600 0a83 91       		.byte	0x91
 3601 0a84 77       		.sleb128 -9
 3602 0a85 1A       		.uleb128 0x1a
 3603 0a86 74000000 		.4byte	.LASF144
 3604 0a8a 01       		.byte	0x1
 3605 0a8b E202     		.2byte	0x2e2
 3606 0a8d A50A0000 		.4byte	0xaa5
 3607 0a91 02       		.uleb128 0x2
 3608 0a92 91       		.byte	0x91
 3609 0a93 68       		.sleb128 -24
 3610 0a94 1A       		.uleb128 0x1a
 3611 0a95 F1070000 		.4byte	.LASF120
 3612 0a99 01       		.byte	0x1
 3613 0a9a EA02     		.2byte	0x2ea
 3614 0a9c BA080000 		.4byte	0x8ba
 3615 0aa0 03       		.uleb128 0x3
 3616 0aa1 91       		.byte	0x91
 3617 0aa2 A07E     		.sleb128 -224
 3618 0aa4 00       		.byte	0
 3619 0aa5 07       		.uleb128 0x7
 3620 0aa6 D7000000 		.4byte	0xd7
 3621 0aaa B50A0000 		.4byte	0xab5
 3622 0aae 08       		.uleb128 0x8
 3623 0aaf E5000000 		.4byte	0xe5
 3624 0ab3 0B       		.byte	0xb
 3625 0ab4 00       		.byte	0
 3626 0ab5 23       		.uleb128 0x23
 3627 0ab6 80010000 		.4byte	.LASF145
 3628 0aba 0D       		.byte	0xd
 3629 0abb 1207     		.2byte	0x712
 3630 0abd C10A0000 		.4byte	0xac1
 3631 0ac1 0C       		.uleb128 0xc
 3632 0ac2 76000000 		.4byte	0x76
 3633 0ac6 24       		.uleb128 0x24
 3634 0ac7 97070000 		.4byte	.LASF146
 3635 0acb 07       		.byte	0x7
 3636 0acc 25       		.byte	0x25
 3637 0acd 3F050000 		.4byte	0x53f
 3638 0ad1 05       		.uleb128 0x5
 3639 0ad2 03       		.byte	0x3
 3640 0ad3 00000000 		.4byte	level_sensor_inbox
 3641 0ad7 24       		.uleb128 0x24
 3642 0ad8 95080000 		.4byte	.LASF147
 3643 0adc 07       		.byte	0x7
 3644 0add 27       		.byte	0x27
 3645 0ade 91040000 		.4byte	0x491
 3646 0ae2 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 81


 3647 0ae3 03       		.byte	0x3
 3648 0ae4 00000000 		.4byte	level_sensor_enabled
 3649 0ae8 24       		.uleb128 0x24
 3650 0ae9 83090000 		.4byte	.LASF148
 3651 0aed 0E       		.byte	0xe
 3652 0aee 0F       		.byte	0xf
 3653 0aef 3F050000 		.4byte	0x53f
 3654 0af3 05       		.uleb128 0x5
 3655 0af4 03       		.byte	0x3
 3656 0af5 00000000 		.4byte	downstream_level_sensor_inbox
 3657 0af9 24       		.uleb128 0x24
 3658 0afa C1040000 		.4byte	.LASF149
 3659 0afe 0E       		.byte	0xe
 3660 0aff 11       		.byte	0x11
 3661 0b00 91040000 		.4byte	0x491
 3662 0b04 05       		.uleb128 0x5
 3663 0b05 03       		.byte	0x3
 3664 0b06 00000000 		.4byte	downstream_level_sensor_enabled
 3665 0b0a 24       		.uleb128 0x24
 3666 0b0b 64000000 		.4byte	.LASF150
 3667 0b0f 0A       		.byte	0xa
 3668 0b10 11       		.byte	0x11
 3669 0b11 91040000 		.4byte	0x491
 3670 0b15 05       		.uleb128 0x5
 3671 0b16 03       		.byte	0x3
 3672 0b17 00000000 		.4byte	buffer_overflow
 3673 0b1b 24       		.uleb128 0x24
 3674 0b1c 0D050000 		.4byte	.LASF151
 3675 0b20 0A       		.byte	0xa
 3676 0b21 22       		.byte	0x22
 3677 0b22 8D000000 		.4byte	0x8d
 3678 0b26 05       		.uleb128 0x5
 3679 0b27 03       		.byte	0x3
 3680 0b28 00000000 		.4byte	dataPointsInStack
 3681 0b2c 24       		.uleb128 0x24
 3682 0b2d AA080000 		.4byte	.LASF152
 3683 0b31 0A       		.byte	0xa
 3684 0b32 23       		.byte	0x23
 3685 0b33 8D000000 		.4byte	0x8d
 3686 0b37 05       		.uleb128 0x5
 3687 0b38 03       		.byte	0x3
 3688 0b39 00000000 		.4byte	dataPointsInStackDesired
 3689 0b3d 07       		.uleb128 0x7
 3690 0b3e 71030000 		.4byte	0x371
 3691 0b42 4D0B0000 		.4byte	0xb4d
 3692 0b46 08       		.uleb128 0x8
 3693 0b47 E5000000 		.4byte	0xe5
 3694 0b4b 95       		.byte	0x95
 3695 0b4c 00       		.byte	0
 3696 0b4d 24       		.uleb128 0x24
 3697 0b4e 2E040000 		.4byte	.LASF153
 3698 0b52 0A       		.byte	0xa
 3699 0b53 24       		.byte	0x24
 3700 0b54 3D0B0000 		.4byte	0xb3d
 3701 0b58 05       		.uleb128 0x5
 3702 0b59 03       		.byte	0x3
 3703 0b5a 00000000 		.4byte	data
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 82


 3704 0b5e 24       		.uleb128 0x24
 3705 0b5f 67010000 		.4byte	.LASF154
 3706 0b63 0B       		.byte	0xb
 3707 0b64 20       		.byte	0x20
 3708 0b65 81000000 		.4byte	0x81
 3709 0b69 05       		.uleb128 0x5
 3710 0b6a 03       		.byte	0x3
 3711 0b6b 00000000 		.4byte	modem_state
 3712 0b6f 24       		.uleb128 0x24
 3713 0b70 AA040000 		.4byte	.LASF155
 3714 0b74 0B       		.byte	0xb
 3715 0b75 6B       		.byte	0x6b
 3716 0b76 BD000000 		.4byte	0xbd
 3717 0b7a 05       		.uleb128 0x5
 3718 0b7b 03       		.byte	0x3
 3719 0b7c 00000000 		.4byte	modem_start_time_stamp
 3720 0b80 24       		.uleb128 0x24
 3721 0b81 44040000 		.4byte	.LASF88
 3722 0b85 0B       		.byte	0xb
 3723 0b86 6C       		.byte	0x6c
 3724 0b87 A9030000 		.4byte	0x3a9
 3725 0b8b 05       		.uleb128 0x5
 3726 0b8c 03       		.byte	0x3
 3727 0b8d 00000000 		.4byte	modem_info
 3728 0b91 24       		.uleb128 0x24
 3729 0b92 DA070000 		.4byte	.LASF156
 3730 0b96 0B       		.byte	0xb
 3731 0b97 6D       		.byte	0x6d
 3732 0b98 1D040000 		.4byte	0x41d
 3733 0b9c 05       		.uleb128 0x5
 3734 0b9d 03       		.byte	0x3
 3735 0b9e 00000000 		.4byte	modem_stats
 3736 0ba2 24       		.uleb128 0x24
 3737 0ba3 BF050000 		.4byte	.LASF157
 3738 0ba7 0B       		.byte	0xb
 3739 0ba8 6E       		.byte	0x6e
 3740 0ba9 98040000 		.4byte	0x498
 3741 0bad 05       		.uleb128 0x5
 3742 0bae 03       		.byte	0x3
 3743 0baf 00000000 		.4byte	updatable_parameters
 3744 0bb3 24       		.uleb128 0x24
 3745 0bb4 7A030000 		.4byte	.LASF158
 3746 0bb8 0F       		.byte	0xf
 3747 0bb9 07       		.byte	0x7
 3748 0bba 91040000 		.4byte	0x491
 3749 0bbe 05       		.uleb128 0x5
 3750 0bbf 03       		.byte	0x3
 3751 0bc0 00000000 		.4byte	App_LED_enabled
 3752 0bc4 24       		.uleb128 0x24
 3753 0bc5 75090000 		.4byte	.LASF159
 3754 0bc9 0F       		.byte	0xf
 3755 0bca 08       		.byte	0x8
 3756 0bcb 3F050000 		.4byte	0x53f
 3757 0bcf 05       		.uleb128 0x5
 3758 0bd0 03       		.byte	0x3
 3759 0bd1 00000000 		.4byte	app_led_inbox
 3760 0bd5 07       		.uleb128 0x7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 83


 3761 0bd6 D7000000 		.4byte	0xd7
 3762 0bda E60B0000 		.4byte	0xbe6
 3763 0bde 20       		.uleb128 0x20
 3764 0bdf E5000000 		.4byte	0xe5
 3765 0be3 0F27     		.2byte	0x270f
 3766 0be5 00       		.byte	0
 3767 0be6 24       		.uleb128 0x24
 3768 0be7 FF050000 		.4byte	.LASF160
 3769 0beb 0C       		.byte	0xc
 3770 0bec 19       		.byte	0x19
 3771 0bed D50B0000 		.4byte	0xbd5
 3772 0bf1 05       		.uleb128 0x5
 3773 0bf2 03       		.byte	0x3
 3774 0bf3 00000000 		.4byte	http_request
 3775 0bf7 24       		.uleb128 0x24
 3776 0bf8 E6080000 		.4byte	.LASF161
 3777 0bfc 0C       		.byte	0xc
 3778 0bfd 1A       		.byte	0x1a
 3779 0bfe D50B0000 		.4byte	0xbd5
 3780 0c02 05       		.uleb128 0x5
 3781 0c03 03       		.byte	0x3
 3782 0c04 00000000 		.4byte	http_body
 3783 0c08 24       		.uleb128 0x24
 3784 0c09 E6070000 		.4byte	.LASF162
 3785 0c0d 0C       		.byte	0xc
 3786 0c0e 1B       		.byte	0x1b
 3787 0c0f BA080000 		.4byte	0x8ba
 3788 0c13 05       		.uleb128 0x5
 3789 0c14 03       		.byte	0x3
 3790 0c15 00000000 		.4byte	http_route
 3791 0c19 24       		.uleb128 0x24
 3792 0c1a E4060000 		.4byte	.LASF163
 3793 0c1e 0C       		.byte	0xc
 3794 0c1f 42       		.byte	0x42
 3795 0c20 13050000 		.4byte	0x513
 3796 0c24 05       		.uleb128 0x5
 3797 0c25 03       		.byte	0x3
 3798 0c26 00000000 		.4byte	system_info
 3799 0c2a 24       		.uleb128 0x24
 3800 0c2b 84060000 		.4byte	.LASF164
 3801 0c2f 0C       		.byte	0xc
 3802 0c30 54       		.byte	0x54
 3803 0c31 4F050000 		.4byte	0x54f
 3804 0c35 05       		.uleb128 0x5
 3805 0c36 03       		.byte	0x3
 3806 0c37 00000000 		.4byte	system_settings
 3807 0c3b 24       		.uleb128 0x24
 3808 0c3c 73010000 		.4byte	.LASF165
 3809 0c40 0C       		.byte	0xc
 3810 0c41 70       		.byte	0x70
 3811 0c42 DC040000 		.4byte	0x4dc
 3812 0c46 05       		.uleb128 0x5
 3813 0c47 03       		.byte	0x3
 3814 0c48 00000000 		.4byte	alarmMeasure
 3815 0c4c 24       		.uleb128 0x24
 3816 0c4d C9010000 		.4byte	.LASF166
 3817 0c51 0C       		.byte	0xc
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 84


 3818 0c52 71       		.byte	0x71
 3819 0c53 81000000 		.4byte	0x81
 3820 0c57 05       		.uleb128 0x5
 3821 0c58 03       		.byte	0x3
 3822 0c59 00000000 		.4byte	timeToMeasure
 3823 0c5d 24       		.uleb128 0x24
 3824 0c5e 5C030000 		.4byte	.LASF167
 3825 0c62 0C       		.byte	0xc
 3826 0c63 72       		.byte	0x72
 3827 0c64 DC040000 		.4byte	0x4dc
 3828 0c68 05       		.uleb128 0x5
 3829 0c69 03       		.byte	0x3
 3830 0c6a 00000000 		.4byte	alarmSync
 3831 0c6e 24       		.uleb128 0x24
 3832 0c6f EF010000 		.4byte	.LASF168
 3833 0c73 0C       		.byte	0xc
 3834 0c74 73       		.byte	0x73
 3835 0c75 81000000 		.4byte	0x81
 3836 0c79 05       		.uleb128 0x5
 3837 0c7a 03       		.byte	0x3
 3838 0c7b 00000000 		.4byte	timeToSync
 3839 0c7f 24       		.uleb128 0x24
 3840 0c80 90050000 		.4byte	.LASF169
 3841 0c84 0C       		.byte	0xc
 3842 0c85 74       		.byte	0x74
 3843 0c86 81000000 		.4byte	0x81
 3844 0c8a 05       		.uleb128 0x5
 3845 0c8b 03       		.byte	0x3
 3846 0c8c 00000000 		.4byte	timeToSycnRemoteParams
 3847 0c90 25       		.uleb128 0x25
 3848 0c91 68657900 		.ascii	"hey\000"
 3849 0c95 0C       		.byte	0xc
 3850 0c96 75       		.byte	0x75
 3851 0c97 81000000 		.4byte	0x81
 3852 0c9b 05       		.uleb128 0x5
 3853 0c9c 03       		.byte	0x3
 3854 0c9d 00000000 		.4byte	hey
 3855 0ca1 24       		.uleb128 0x24
 3856 0ca2 9E040000 		.4byte	.LASF170
 3857 0ca6 0C       		.byte	0xc
 3858 0ca7 79       		.byte	0x79
 3859 0ca8 DC040000 		.4byte	0x4dc
 3860 0cac 05       		.uleb128 0x5
 3861 0cad 03       		.byte	0x3
 3862 0cae 00000000 		.4byte	alarmAppLED
 3863 0cb2 24       		.uleb128 0x24
 3864 0cb3 C3020000 		.4byte	.LASF171
 3865 0cb7 0C       		.byte	0xc
 3866 0cb8 7A       		.byte	0x7a
 3867 0cb9 81000000 		.4byte	0x81
 3868 0cbd 05       		.uleb128 0x5
 3869 0cbe 03       		.byte	0x3
 3870 0cbf 00000000 		.4byte	timeToAppLED
 3871 0cc3 24       		.uleb128 0x24
 3872 0cc4 6C070000 		.4byte	.LASF172
 3873 0cc8 0C       		.byte	0xc
 3874 0cc9 7C       		.byte	0x7c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 85


 3875 0cca DC040000 		.4byte	0x4dc
 3876 0cce 05       		.uleb128 0x5
 3877 0ccf 03       		.byte	0x3
 3878 0cd0 00000000 		.4byte	alarmLevelSensor
 3879 0cd4 24       		.uleb128 0x24
 3880 0cd5 8D010000 		.4byte	.LASF173
 3881 0cd9 0C       		.byte	0xc
 3882 0cda 7D       		.byte	0x7d
 3883 0cdb 81000000 		.4byte	0x81
 3884 0cdf 05       		.uleb128 0x5
 3885 0ce0 03       		.byte	0x3
 3886 0ce1 00000000 		.4byte	timetoLevelSensor
 3887 0ce5 24       		.uleb128 0x24
 3888 0ce6 4D020000 		.4byte	.LASF174
 3889 0cea 0C       		.byte	0xc
 3890 0ceb 7F       		.byte	0x7f
 3891 0cec DC040000 		.4byte	0x4dc
 3892 0cf0 05       		.uleb128 0x5
 3893 0cf1 03       		.byte	0x3
 3894 0cf2 00000000 		.4byte	alarmDownstreamLevelSensor
 3895 0cf6 24       		.uleb128 0x24
 3896 0cf7 53050000 		.4byte	.LASF175
 3897 0cfb 0C       		.byte	0xc
 3898 0cfc 80       		.byte	0x80
 3899 0cfd 81000000 		.4byte	0x81
 3900 0d01 05       		.uleb128 0x5
 3901 0d02 03       		.byte	0x3
 3902 0d03 00000000 		.4byte	timetoDownstreamLevelSensor
 3903 0d07 07       		.uleb128 0x7
 3904 0d08 D7000000 		.4byte	0xd7
 3905 0d0c 170D0000 		.4byte	0xd17
 3906 0d10 08       		.uleb128 0x8
 3907 0d11 E5000000 		.4byte	0xe5
 3908 0d15 1D       		.byte	0x1d
 3909 0d16 00       		.byte	0
 3910 0d17 24       		.uleb128 0x24
 3911 0d18 3E060000 		.4byte	.LASF176
 3912 0d1c 01       		.byte	0x1
 3913 0d1d 1D       		.byte	0x1d
 3914 0d1e 070D0000 		.4byte	0xd07
 3915 0d22 05       		.uleb128 0x5
 3916 0d23 03       		.byte	0x3
 3917 0d24 00000000 		.4byte	Data_fileName
 3918 0d28 24       		.uleb128 0x24
 3919 0d29 E3030000 		.4byte	.LASF95
 3920 0d2d 01       		.byte	0x1
 3921 0d2e 1E       		.byte	0x1e
 3922 0d2f 81000000 		.4byte	0x81
 3923 0d33 05       		.uleb128 0x5
 3924 0d34 03       		.byte	0x3
 3925 0d35 00000000 		.4byte	try_counter
 3926 0d39 00       		.byte	0
 3927              		.section	.debug_abbrev,"",%progbits
 3928              	.Ldebug_abbrev0:
 3929 0000 01       		.uleb128 0x1
 3930 0001 11       		.uleb128 0x11
 3931 0002 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 86


 3932 0003 25       		.uleb128 0x25
 3933 0004 0E       		.uleb128 0xe
 3934 0005 13       		.uleb128 0x13
 3935 0006 0B       		.uleb128 0xb
 3936 0007 03       		.uleb128 0x3
 3937 0008 0E       		.uleb128 0xe
 3938 0009 1B       		.uleb128 0x1b
 3939 000a 0E       		.uleb128 0xe
 3940 000b 55       		.uleb128 0x55
 3941 000c 17       		.uleb128 0x17
 3942 000d 11       		.uleb128 0x11
 3943 000e 01       		.uleb128 0x1
 3944 000f 10       		.uleb128 0x10
 3945 0010 17       		.uleb128 0x17
 3946 0011 00       		.byte	0
 3947 0012 00       		.byte	0
 3948 0013 02       		.uleb128 0x2
 3949 0014 24       		.uleb128 0x24
 3950 0015 00       		.byte	0
 3951 0016 0B       		.uleb128 0xb
 3952 0017 0B       		.uleb128 0xb
 3953 0018 3E       		.uleb128 0x3e
 3954 0019 0B       		.uleb128 0xb
 3955 001a 03       		.uleb128 0x3
 3956 001b 0E       		.uleb128 0xe
 3957 001c 00       		.byte	0
 3958 001d 00       		.byte	0
 3959 001e 03       		.uleb128 0x3
 3960 001f 16       		.uleb128 0x16
 3961 0020 00       		.byte	0
 3962 0021 03       		.uleb128 0x3
 3963 0022 0E       		.uleb128 0xe
 3964 0023 3A       		.uleb128 0x3a
 3965 0024 0B       		.uleb128 0xb
 3966 0025 3B       		.uleb128 0x3b
 3967 0026 0B       		.uleb128 0xb
 3968 0027 49       		.uleb128 0x49
 3969 0028 13       		.uleb128 0x13
 3970 0029 00       		.byte	0
 3971 002a 00       		.byte	0
 3972 002b 04       		.uleb128 0x4
 3973 002c 24       		.uleb128 0x24
 3974 002d 00       		.byte	0
 3975 002e 0B       		.uleb128 0xb
 3976 002f 0B       		.uleb128 0xb
 3977 0030 3E       		.uleb128 0x3e
 3978 0031 0B       		.uleb128 0xb
 3979 0032 03       		.uleb128 0x3
 3980 0033 08       		.uleb128 0x8
 3981 0034 00       		.byte	0
 3982 0035 00       		.byte	0
 3983 0036 05       		.uleb128 0x5
 3984 0037 16       		.uleb128 0x16
 3985 0038 00       		.byte	0
 3986 0039 03       		.uleb128 0x3
 3987 003a 0E       		.uleb128 0xe
 3988 003b 3A       		.uleb128 0x3a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 87


 3989 003c 0B       		.uleb128 0xb
 3990 003d 3B       		.uleb128 0x3b
 3991 003e 05       		.uleb128 0x5
 3992 003f 49       		.uleb128 0x49
 3993 0040 13       		.uleb128 0x13
 3994 0041 00       		.byte	0
 3995 0042 00       		.byte	0
 3996 0043 06       		.uleb128 0x6
 3997 0044 0F       		.uleb128 0xf
 3998 0045 00       		.byte	0
 3999 0046 0B       		.uleb128 0xb
 4000 0047 0B       		.uleb128 0xb
 4001 0048 49       		.uleb128 0x49
 4002 0049 13       		.uleb128 0x13
 4003 004a 00       		.byte	0
 4004 004b 00       		.byte	0
 4005 004c 07       		.uleb128 0x7
 4006 004d 01       		.uleb128 0x1
 4007 004e 01       		.byte	0x1
 4008 004f 49       		.uleb128 0x49
 4009 0050 13       		.uleb128 0x13
 4010 0051 01       		.uleb128 0x1
 4011 0052 13       		.uleb128 0x13
 4012 0053 00       		.byte	0
 4013 0054 00       		.byte	0
 4014 0055 08       		.uleb128 0x8
 4015 0056 21       		.uleb128 0x21
 4016 0057 00       		.byte	0
 4017 0058 49       		.uleb128 0x49
 4018 0059 13       		.uleb128 0x13
 4019 005a 2F       		.uleb128 0x2f
 4020 005b 0B       		.uleb128 0xb
 4021 005c 00       		.byte	0
 4022 005d 00       		.byte	0
 4023 005e 09       		.uleb128 0x9
 4024 005f 13       		.uleb128 0x13
 4025 0060 01       		.byte	0x1
 4026 0061 0B       		.uleb128 0xb
 4027 0062 0B       		.uleb128 0xb
 4028 0063 3A       		.uleb128 0x3a
 4029 0064 0B       		.uleb128 0xb
 4030 0065 3B       		.uleb128 0x3b
 4031 0066 0B       		.uleb128 0xb
 4032 0067 01       		.uleb128 0x1
 4033 0068 13       		.uleb128 0x13
 4034 0069 00       		.byte	0
 4035 006a 00       		.byte	0
 4036 006b 0A       		.uleb128 0xa
 4037 006c 0D       		.uleb128 0xd
 4038 006d 00       		.byte	0
 4039 006e 03       		.uleb128 0x3
 4040 006f 08       		.uleb128 0x8
 4041 0070 3A       		.uleb128 0x3a
 4042 0071 0B       		.uleb128 0xb
 4043 0072 3B       		.uleb128 0x3b
 4044 0073 0B       		.uleb128 0xb
 4045 0074 49       		.uleb128 0x49
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 88


 4046 0075 13       		.uleb128 0x13
 4047 0076 38       		.uleb128 0x38
 4048 0077 0B       		.uleb128 0xb
 4049 0078 00       		.byte	0
 4050 0079 00       		.byte	0
 4051 007a 0B       		.uleb128 0xb
 4052 007b 0D       		.uleb128 0xd
 4053 007c 00       		.byte	0
 4054 007d 03       		.uleb128 0x3
 4055 007e 0E       		.uleb128 0xe
 4056 007f 3A       		.uleb128 0x3a
 4057 0080 0B       		.uleb128 0xb
 4058 0081 3B       		.uleb128 0x3b
 4059 0082 0B       		.uleb128 0xb
 4060 0083 49       		.uleb128 0x49
 4061 0084 13       		.uleb128 0x13
 4062 0085 38       		.uleb128 0x38
 4063 0086 0B       		.uleb128 0xb
 4064 0087 00       		.byte	0
 4065 0088 00       		.byte	0
 4066 0089 0C       		.uleb128 0xc
 4067 008a 35       		.uleb128 0x35
 4068 008b 00       		.byte	0
 4069 008c 49       		.uleb128 0x49
 4070 008d 13       		.uleb128 0x13
 4071 008e 00       		.byte	0
 4072 008f 00       		.byte	0
 4073 0090 0D       		.uleb128 0xd
 4074 0091 13       		.uleb128 0x13
 4075 0092 01       		.byte	0x1
 4076 0093 0B       		.uleb128 0xb
 4077 0094 05       		.uleb128 0x5
 4078 0095 3A       		.uleb128 0x3a
 4079 0096 0B       		.uleb128 0xb
 4080 0097 3B       		.uleb128 0x3b
 4081 0098 0B       		.uleb128 0xb
 4082 0099 01       		.uleb128 0x1
 4083 009a 13       		.uleb128 0x13
 4084 009b 00       		.byte	0
 4085 009c 00       		.byte	0
 4086 009d 0E       		.uleb128 0xe
 4087 009e 13       		.uleb128 0x13
 4088 009f 01       		.byte	0x1
 4089 00a0 03       		.uleb128 0x3
 4090 00a1 08       		.uleb128 0x8
 4091 00a2 0B       		.uleb128 0xb
 4092 00a3 0B       		.uleb128 0xb
 4093 00a4 3A       		.uleb128 0x3a
 4094 00a5 0B       		.uleb128 0xb
 4095 00a6 3B       		.uleb128 0x3b
 4096 00a7 0B       		.uleb128 0xb
 4097 00a8 01       		.uleb128 0x1
 4098 00a9 13       		.uleb128 0x13
 4099 00aa 00       		.byte	0
 4100 00ab 00       		.byte	0
 4101 00ac 0F       		.uleb128 0xf
 4102 00ad 2E       		.uleb128 0x2e
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 89


 4103 00ae 00       		.byte	0
 4104 00af 3F       		.uleb128 0x3f
 4105 00b0 19       		.uleb128 0x19
 4106 00b1 03       		.uleb128 0x3
 4107 00b2 0E       		.uleb128 0xe
 4108 00b3 3A       		.uleb128 0x3a
 4109 00b4 0B       		.uleb128 0xb
 4110 00b5 3B       		.uleb128 0x3b
 4111 00b6 0B       		.uleb128 0xb
 4112 00b7 27       		.uleb128 0x27
 4113 00b8 19       		.uleb128 0x19
 4114 00b9 11       		.uleb128 0x11
 4115 00ba 01       		.uleb128 0x1
 4116 00bb 12       		.uleb128 0x12
 4117 00bc 06       		.uleb128 0x6
 4118 00bd 40       		.uleb128 0x40
 4119 00be 18       		.uleb128 0x18
 4120 00bf 9642     		.uleb128 0x2116
 4121 00c1 19       		.uleb128 0x19
 4122 00c2 00       		.byte	0
 4123 00c3 00       		.byte	0
 4124 00c4 10       		.uleb128 0x10
 4125 00c5 2E       		.uleb128 0x2e
 4126 00c6 01       		.byte	0x1
 4127 00c7 3F       		.uleb128 0x3f
 4128 00c8 19       		.uleb128 0x19
 4129 00c9 03       		.uleb128 0x3
 4130 00ca 0E       		.uleb128 0xe
 4131 00cb 3A       		.uleb128 0x3a
 4132 00cc 0B       		.uleb128 0xb
 4133 00cd 3B       		.uleb128 0x3b
 4134 00ce 0B       		.uleb128 0xb
 4135 00cf 11       		.uleb128 0x11
 4136 00d0 01       		.uleb128 0x1
 4137 00d1 12       		.uleb128 0x12
 4138 00d2 06       		.uleb128 0x6
 4139 00d3 40       		.uleb128 0x40
 4140 00d4 18       		.uleb128 0x18
 4141 00d5 9642     		.uleb128 0x2116
 4142 00d7 19       		.uleb128 0x19
 4143 00d8 01       		.uleb128 0x1
 4144 00d9 13       		.uleb128 0x13
 4145 00da 00       		.byte	0
 4146 00db 00       		.byte	0
 4147 00dc 11       		.uleb128 0x11
 4148 00dd 34       		.uleb128 0x34
 4149 00de 00       		.byte	0
 4150 00df 03       		.uleb128 0x3
 4151 00e0 0E       		.uleb128 0xe
 4152 00e1 3A       		.uleb128 0x3a
 4153 00e2 0B       		.uleb128 0xb
 4154 00e3 3B       		.uleb128 0x3b
 4155 00e4 0B       		.uleb128 0xb
 4156 00e5 49       		.uleb128 0x49
 4157 00e6 13       		.uleb128 0x13
 4158 00e7 02       		.uleb128 0x2
 4159 00e8 18       		.uleb128 0x18
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 90


 4160 00e9 00       		.byte	0
 4161 00ea 00       		.byte	0
 4162 00eb 12       		.uleb128 0x12
 4163 00ec 2E       		.uleb128 0x2e
 4164 00ed 01       		.byte	0x1
 4165 00ee 3F       		.uleb128 0x3f
 4166 00ef 19       		.uleb128 0x19
 4167 00f0 03       		.uleb128 0x3
 4168 00f1 0E       		.uleb128 0xe
 4169 00f2 3A       		.uleb128 0x3a
 4170 00f3 0B       		.uleb128 0xb
 4171 00f4 3B       		.uleb128 0x3b
 4172 00f5 0B       		.uleb128 0xb
 4173 00f6 49       		.uleb128 0x49
 4174 00f7 13       		.uleb128 0x13
 4175 00f8 11       		.uleb128 0x11
 4176 00f9 01       		.uleb128 0x1
 4177 00fa 12       		.uleb128 0x12
 4178 00fb 06       		.uleb128 0x6
 4179 00fc 40       		.uleb128 0x40
 4180 00fd 18       		.uleb128 0x18
 4181 00fe 9642     		.uleb128 0x2116
 4182 0100 19       		.uleb128 0x19
 4183 0101 01       		.uleb128 0x1
 4184 0102 13       		.uleb128 0x13
 4185 0103 00       		.byte	0
 4186 0104 00       		.byte	0
 4187 0105 13       		.uleb128 0x13
 4188 0106 2E       		.uleb128 0x2e
 4189 0107 00       		.byte	0
 4190 0108 3F       		.uleb128 0x3f
 4191 0109 19       		.uleb128 0x19
 4192 010a 03       		.uleb128 0x3
 4193 010b 0E       		.uleb128 0xe
 4194 010c 3A       		.uleb128 0x3a
 4195 010d 0B       		.uleb128 0xb
 4196 010e 3B       		.uleb128 0x3b
 4197 010f 0B       		.uleb128 0xb
 4198 0110 11       		.uleb128 0x11
 4199 0111 01       		.uleb128 0x1
 4200 0112 12       		.uleb128 0x12
 4201 0113 06       		.uleb128 0x6
 4202 0114 40       		.uleb128 0x40
 4203 0115 18       		.uleb128 0x18
 4204 0116 9642     		.uleb128 0x2116
 4205 0118 19       		.uleb128 0x19
 4206 0119 00       		.byte	0
 4207 011a 00       		.byte	0
 4208 011b 14       		.uleb128 0x14
 4209 011c 2E       		.uleb128 0x2e
 4210 011d 01       		.byte	0x1
 4211 011e 3F       		.uleb128 0x3f
 4212 011f 19       		.uleb128 0x19
 4213 0120 03       		.uleb128 0x3
 4214 0121 0E       		.uleb128 0xe
 4215 0122 3A       		.uleb128 0x3a
 4216 0123 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 91


 4217 0124 3B       		.uleb128 0x3b
 4218 0125 0B       		.uleb128 0xb
 4219 0126 27       		.uleb128 0x27
 4220 0127 19       		.uleb128 0x19
 4221 0128 11       		.uleb128 0x11
 4222 0129 01       		.uleb128 0x1
 4223 012a 12       		.uleb128 0x12
 4224 012b 06       		.uleb128 0x6
 4225 012c 40       		.uleb128 0x40
 4226 012d 18       		.uleb128 0x18
 4227 012e 9642     		.uleb128 0x2116
 4228 0130 19       		.uleb128 0x19
 4229 0131 01       		.uleb128 0x1
 4230 0132 13       		.uleb128 0x13
 4231 0133 00       		.byte	0
 4232 0134 00       		.byte	0
 4233 0135 15       		.uleb128 0x15
 4234 0136 05       		.uleb128 0x5
 4235 0137 00       		.byte	0
 4236 0138 03       		.uleb128 0x3
 4237 0139 0E       		.uleb128 0xe
 4238 013a 3A       		.uleb128 0x3a
 4239 013b 0B       		.uleb128 0xb
 4240 013c 3B       		.uleb128 0x3b
 4241 013d 0B       		.uleb128 0xb
 4242 013e 49       		.uleb128 0x49
 4243 013f 13       		.uleb128 0x13
 4244 0140 02       		.uleb128 0x2
 4245 0141 18       		.uleb128 0x18
 4246 0142 00       		.byte	0
 4247 0143 00       		.byte	0
 4248 0144 16       		.uleb128 0x16
 4249 0145 2E       		.uleb128 0x2e
 4250 0146 01       		.byte	0x1
 4251 0147 3F       		.uleb128 0x3f
 4252 0148 19       		.uleb128 0x19
 4253 0149 03       		.uleb128 0x3
 4254 014a 0E       		.uleb128 0xe
 4255 014b 3A       		.uleb128 0x3a
 4256 014c 0B       		.uleb128 0xb
 4257 014d 3B       		.uleb128 0x3b
 4258 014e 0B       		.uleb128 0xb
 4259 014f 27       		.uleb128 0x27
 4260 0150 19       		.uleb128 0x19
 4261 0151 49       		.uleb128 0x49
 4262 0152 13       		.uleb128 0x13
 4263 0153 11       		.uleb128 0x11
 4264 0154 01       		.uleb128 0x1
 4265 0155 12       		.uleb128 0x12
 4266 0156 06       		.uleb128 0x6
 4267 0157 40       		.uleb128 0x40
 4268 0158 18       		.uleb128 0x18
 4269 0159 9642     		.uleb128 0x2116
 4270 015b 19       		.uleb128 0x19
 4271 015c 01       		.uleb128 0x1
 4272 015d 13       		.uleb128 0x13
 4273 015e 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 92


 4274 015f 00       		.byte	0
 4275 0160 17       		.uleb128 0x17
 4276 0161 2E       		.uleb128 0x2e
 4277 0162 01       		.byte	0x1
 4278 0163 3F       		.uleb128 0x3f
 4279 0164 19       		.uleb128 0x19
 4280 0165 03       		.uleb128 0x3
 4281 0166 0E       		.uleb128 0xe
 4282 0167 3A       		.uleb128 0x3a
 4283 0168 0B       		.uleb128 0xb
 4284 0169 3B       		.uleb128 0x3b
 4285 016a 05       		.uleb128 0x5
 4286 016b 27       		.uleb128 0x27
 4287 016c 19       		.uleb128 0x19
 4288 016d 11       		.uleb128 0x11
 4289 016e 01       		.uleb128 0x1
 4290 016f 12       		.uleb128 0x12
 4291 0170 06       		.uleb128 0x6
 4292 0171 40       		.uleb128 0x40
 4293 0172 18       		.uleb128 0x18
 4294 0173 9742     		.uleb128 0x2117
 4295 0175 19       		.uleb128 0x19
 4296 0176 01       		.uleb128 0x1
 4297 0177 13       		.uleb128 0x13
 4298 0178 00       		.byte	0
 4299 0179 00       		.byte	0
 4300 017a 18       		.uleb128 0x18
 4301 017b 05       		.uleb128 0x5
 4302 017c 00       		.byte	0
 4303 017d 03       		.uleb128 0x3
 4304 017e 0E       		.uleb128 0xe
 4305 017f 3A       		.uleb128 0x3a
 4306 0180 0B       		.uleb128 0xb
 4307 0181 3B       		.uleb128 0x3b
 4308 0182 05       		.uleb128 0x5
 4309 0183 49       		.uleb128 0x49
 4310 0184 13       		.uleb128 0x13
 4311 0185 02       		.uleb128 0x2
 4312 0186 18       		.uleb128 0x18
 4313 0187 00       		.byte	0
 4314 0188 00       		.byte	0
 4315 0189 19       		.uleb128 0x19
 4316 018a 2E       		.uleb128 0x2e
 4317 018b 01       		.byte	0x1
 4318 018c 3F       		.uleb128 0x3f
 4319 018d 19       		.uleb128 0x19
 4320 018e 03       		.uleb128 0x3
 4321 018f 0E       		.uleb128 0xe
 4322 0190 3A       		.uleb128 0x3a
 4323 0191 0B       		.uleb128 0xb
 4324 0192 3B       		.uleb128 0x3b
 4325 0193 05       		.uleb128 0x5
 4326 0194 27       		.uleb128 0x27
 4327 0195 19       		.uleb128 0x19
 4328 0196 49       		.uleb128 0x49
 4329 0197 13       		.uleb128 0x13
 4330 0198 11       		.uleb128 0x11
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 93


 4331 0199 01       		.uleb128 0x1
 4332 019a 12       		.uleb128 0x12
 4333 019b 06       		.uleb128 0x6
 4334 019c 40       		.uleb128 0x40
 4335 019d 18       		.uleb128 0x18
 4336 019e 9742     		.uleb128 0x2117
 4337 01a0 19       		.uleb128 0x19
 4338 01a1 01       		.uleb128 0x1
 4339 01a2 13       		.uleb128 0x13
 4340 01a3 00       		.byte	0
 4341 01a4 00       		.byte	0
 4342 01a5 1A       		.uleb128 0x1a
 4343 01a6 34       		.uleb128 0x34
 4344 01a7 00       		.byte	0
 4345 01a8 03       		.uleb128 0x3
 4346 01a9 0E       		.uleb128 0xe
 4347 01aa 3A       		.uleb128 0x3a
 4348 01ab 0B       		.uleb128 0xb
 4349 01ac 3B       		.uleb128 0x3b
 4350 01ad 05       		.uleb128 0x5
 4351 01ae 49       		.uleb128 0x49
 4352 01af 13       		.uleb128 0x13
 4353 01b0 02       		.uleb128 0x2
 4354 01b1 18       		.uleb128 0x18
 4355 01b2 00       		.byte	0
 4356 01b3 00       		.byte	0
 4357 01b4 1B       		.uleb128 0x1b
 4358 01b5 2E       		.uleb128 0x2e
 4359 01b6 01       		.byte	0x1
 4360 01b7 3F       		.uleb128 0x3f
 4361 01b8 19       		.uleb128 0x19
 4362 01b9 03       		.uleb128 0x3
 4363 01ba 0E       		.uleb128 0xe
 4364 01bb 3A       		.uleb128 0x3a
 4365 01bc 0B       		.uleb128 0xb
 4366 01bd 3B       		.uleb128 0x3b
 4367 01be 05       		.uleb128 0x5
 4368 01bf 11       		.uleb128 0x11
 4369 01c0 01       		.uleb128 0x1
 4370 01c1 12       		.uleb128 0x12
 4371 01c2 06       		.uleb128 0x6
 4372 01c3 40       		.uleb128 0x40
 4373 01c4 18       		.uleb128 0x18
 4374 01c5 9642     		.uleb128 0x2116
 4375 01c7 19       		.uleb128 0x19
 4376 01c8 01       		.uleb128 0x1
 4377 01c9 13       		.uleb128 0x13
 4378 01ca 00       		.byte	0
 4379 01cb 00       		.byte	0
 4380 01cc 1C       		.uleb128 0x1c
 4381 01cd 2E       		.uleb128 0x2e
 4382 01ce 00       		.byte	0
 4383 01cf 3F       		.uleb128 0x3f
 4384 01d0 19       		.uleb128 0x19
 4385 01d1 03       		.uleb128 0x3
 4386 01d2 0E       		.uleb128 0xe
 4387 01d3 3A       		.uleb128 0x3a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 94


 4388 01d4 0B       		.uleb128 0xb
 4389 01d5 3B       		.uleb128 0x3b
 4390 01d6 05       		.uleb128 0x5
 4391 01d7 27       		.uleb128 0x27
 4392 01d8 19       		.uleb128 0x19
 4393 01d9 49       		.uleb128 0x49
 4394 01da 13       		.uleb128 0x13
 4395 01db 11       		.uleb128 0x11
 4396 01dc 01       		.uleb128 0x1
 4397 01dd 12       		.uleb128 0x12
 4398 01de 06       		.uleb128 0x6
 4399 01df 40       		.uleb128 0x40
 4400 01e0 18       		.uleb128 0x18
 4401 01e1 9642     		.uleb128 0x2116
 4402 01e3 19       		.uleb128 0x19
 4403 01e4 00       		.byte	0
 4404 01e5 00       		.byte	0
 4405 01e6 1D       		.uleb128 0x1d
 4406 01e7 2E       		.uleb128 0x2e
 4407 01e8 01       		.byte	0x1
 4408 01e9 3F       		.uleb128 0x3f
 4409 01ea 19       		.uleb128 0x19
 4410 01eb 03       		.uleb128 0x3
 4411 01ec 0E       		.uleb128 0xe
 4412 01ed 3A       		.uleb128 0x3a
 4413 01ee 0B       		.uleb128 0xb
 4414 01ef 3B       		.uleb128 0x3b
 4415 01f0 05       		.uleb128 0x5
 4416 01f1 49       		.uleb128 0x49
 4417 01f2 13       		.uleb128 0x13
 4418 01f3 11       		.uleb128 0x11
 4419 01f4 01       		.uleb128 0x1
 4420 01f5 12       		.uleb128 0x12
 4421 01f6 06       		.uleb128 0x6
 4422 01f7 40       		.uleb128 0x40
 4423 01f8 18       		.uleb128 0x18
 4424 01f9 9642     		.uleb128 0x2116
 4425 01fb 19       		.uleb128 0x19
 4426 01fc 01       		.uleb128 0x1
 4427 01fd 13       		.uleb128 0x13
 4428 01fe 00       		.byte	0
 4429 01ff 00       		.byte	0
 4430 0200 1E       		.uleb128 0x1e
 4431 0201 0B       		.uleb128 0xb
 4432 0202 01       		.byte	0x1
 4433 0203 11       		.uleb128 0x11
 4434 0204 01       		.uleb128 0x1
 4435 0205 12       		.uleb128 0x12
 4436 0206 06       		.uleb128 0x6
 4437 0207 00       		.byte	0
 4438 0208 00       		.byte	0
 4439 0209 1F       		.uleb128 0x1f
 4440 020a 0B       		.uleb128 0xb
 4441 020b 01       		.byte	0x1
 4442 020c 11       		.uleb128 0x11
 4443 020d 01       		.uleb128 0x1
 4444 020e 12       		.uleb128 0x12
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 95


 4445 020f 06       		.uleb128 0x6
 4446 0210 01       		.uleb128 0x1
 4447 0211 13       		.uleb128 0x13
 4448 0212 00       		.byte	0
 4449 0213 00       		.byte	0
 4450 0214 20       		.uleb128 0x20
 4451 0215 21       		.uleb128 0x21
 4452 0216 00       		.byte	0
 4453 0217 49       		.uleb128 0x49
 4454 0218 13       		.uleb128 0x13
 4455 0219 2F       		.uleb128 0x2f
 4456 021a 05       		.uleb128 0x5
 4457 021b 00       		.byte	0
 4458 021c 00       		.byte	0
 4459 021d 21       		.uleb128 0x21
 4460 021e 2E       		.uleb128 0x2e
 4461 021f 01       		.byte	0x1
 4462 0220 3F       		.uleb128 0x3f
 4463 0221 19       		.uleb128 0x19
 4464 0222 03       		.uleb128 0x3
 4465 0223 0E       		.uleb128 0xe
 4466 0224 3A       		.uleb128 0x3a
 4467 0225 0B       		.uleb128 0xb
 4468 0226 3B       		.uleb128 0x3b
 4469 0227 05       		.uleb128 0x5
 4470 0228 27       		.uleb128 0x27
 4471 0229 19       		.uleb128 0x19
 4472 022a 49       		.uleb128 0x49
 4473 022b 13       		.uleb128 0x13
 4474 022c 11       		.uleb128 0x11
 4475 022d 01       		.uleb128 0x1
 4476 022e 12       		.uleb128 0x12
 4477 022f 06       		.uleb128 0x6
 4478 0230 40       		.uleb128 0x40
 4479 0231 18       		.uleb128 0x18
 4480 0232 9642     		.uleb128 0x2116
 4481 0234 19       		.uleb128 0x19
 4482 0235 01       		.uleb128 0x1
 4483 0236 13       		.uleb128 0x13
 4484 0237 00       		.byte	0
 4485 0238 00       		.byte	0
 4486 0239 22       		.uleb128 0x22
 4487 023a 34       		.uleb128 0x34
 4488 023b 00       		.byte	0
 4489 023c 03       		.uleb128 0x3
 4490 023d 08       		.uleb128 0x8
 4491 023e 3A       		.uleb128 0x3a
 4492 023f 0B       		.uleb128 0xb
 4493 0240 3B       		.uleb128 0x3b
 4494 0241 05       		.uleb128 0x5
 4495 0242 49       		.uleb128 0x49
 4496 0243 13       		.uleb128 0x13
 4497 0244 02       		.uleb128 0x2
 4498 0245 18       		.uleb128 0x18
 4499 0246 00       		.byte	0
 4500 0247 00       		.byte	0
 4501 0248 23       		.uleb128 0x23
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 96


 4502 0249 34       		.uleb128 0x34
 4503 024a 00       		.byte	0
 4504 024b 03       		.uleb128 0x3
 4505 024c 0E       		.uleb128 0xe
 4506 024d 3A       		.uleb128 0x3a
 4507 024e 0B       		.uleb128 0xb
 4508 024f 3B       		.uleb128 0x3b
 4509 0250 05       		.uleb128 0x5
 4510 0251 49       		.uleb128 0x49
 4511 0252 13       		.uleb128 0x13
 4512 0253 3F       		.uleb128 0x3f
 4513 0254 19       		.uleb128 0x19
 4514 0255 3C       		.uleb128 0x3c
 4515 0256 19       		.uleb128 0x19
 4516 0257 00       		.byte	0
 4517 0258 00       		.byte	0
 4518 0259 24       		.uleb128 0x24
 4519 025a 34       		.uleb128 0x34
 4520 025b 00       		.byte	0
 4521 025c 03       		.uleb128 0x3
 4522 025d 0E       		.uleb128 0xe
 4523 025e 3A       		.uleb128 0x3a
 4524 025f 0B       		.uleb128 0xb
 4525 0260 3B       		.uleb128 0x3b
 4526 0261 0B       		.uleb128 0xb
 4527 0262 49       		.uleb128 0x49
 4528 0263 13       		.uleb128 0x13
 4529 0264 3F       		.uleb128 0x3f
 4530 0265 19       		.uleb128 0x19
 4531 0266 02       		.uleb128 0x2
 4532 0267 18       		.uleb128 0x18
 4533 0268 00       		.byte	0
 4534 0269 00       		.byte	0
 4535 026a 25       		.uleb128 0x25
 4536 026b 34       		.uleb128 0x34
 4537 026c 00       		.byte	0
 4538 026d 03       		.uleb128 0x3
 4539 026e 08       		.uleb128 0x8
 4540 026f 3A       		.uleb128 0x3a
 4541 0270 0B       		.uleb128 0xb
 4542 0271 3B       		.uleb128 0x3b
 4543 0272 0B       		.uleb128 0xb
 4544 0273 49       		.uleb128 0x49
 4545 0274 13       		.uleb128 0x13
 4546 0275 3F       		.uleb128 0x3f
 4547 0276 19       		.uleb128 0x19
 4548 0277 02       		.uleb128 0x2
 4549 0278 18       		.uleb128 0x18
 4550 0279 00       		.byte	0
 4551 027a 00       		.byte	0
 4552 027b 00       		.byte	0
 4553              		.section	.debug_aranges,"",%progbits
 4554 0000 8C000000 		.4byte	0x8c
 4555 0004 0200     		.2byte	0x2
 4556 0006 00000000 		.4byte	.Ldebug_info0
 4557 000a 04       		.byte	0x4
 4558 000b 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 97


 4559 000c 0000     		.2byte	0
 4560 000e 0000     		.2byte	0
 4561 0010 00000000 		.4byte	.LFB64
 4562 0014 0C000000 		.4byte	.LFE64-.LFB64
 4563 0018 00000000 		.4byte	.LFB65
 4564 001c 84010000 		.4byte	.LFE65-.LFB65
 4565 0020 00000000 		.4byte	.LFB66
 4566 0024 DC000000 		.4byte	.LFE66-.LFB66
 4567 0028 00000000 		.4byte	.LFB67
 4568 002c 2A000000 		.4byte	.LFE67-.LFB67
 4569 0030 00000000 		.4byte	.LFB68
 4570 0034 A8000000 		.4byte	.LFE68-.LFB68
 4571 0038 00000000 		.4byte	.LFB69
 4572 003c 48000000 		.4byte	.LFE69-.LFB69
 4573 0040 00000000 		.4byte	.LFB70
 4574 0044 1E000000 		.4byte	.LFE70-.LFB70
 4575 0048 00000000 		.4byte	.LFB71
 4576 004c 46000000 		.4byte	.LFE71-.LFB71
 4577 0050 00000000 		.4byte	.LFB72
 4578 0054 2C010000 		.4byte	.LFE72-.LFB72
 4579 0058 00000000 		.4byte	.LFB73
 4580 005c 1E000000 		.4byte	.LFE73-.LFB73
 4581 0060 00000000 		.4byte	.LFB74
 4582 0064 5C040000 		.4byte	.LFE74-.LFB74
 4583 0068 00000000 		.4byte	.LFB75
 4584 006c 44000000 		.4byte	.LFE75-.LFB75
 4585 0070 00000000 		.4byte	.LFB76
 4586 0074 9C020000 		.4byte	.LFE76-.LFB76
 4587 0078 00000000 		.4byte	.LFB77
 4588 007c 74000000 		.4byte	.LFE77-.LFB77
 4589 0080 00000000 		.4byte	.LFB78
 4590 0084 38010000 		.4byte	.LFE78-.LFB78
 4591 0088 00000000 		.4byte	0
 4592 008c 00000000 		.4byte	0
 4593              		.section	.debug_ranges,"",%progbits
 4594              	.Ldebug_ranges0:
 4595 0000 00000000 		.4byte	.LFB64
 4596 0004 0C000000 		.4byte	.LFE64
 4597 0008 00000000 		.4byte	.LFB65
 4598 000c 84010000 		.4byte	.LFE65
 4599 0010 00000000 		.4byte	.LFB66
 4600 0014 DC000000 		.4byte	.LFE66
 4601 0018 00000000 		.4byte	.LFB67
 4602 001c 2A000000 		.4byte	.LFE67
 4603 0020 00000000 		.4byte	.LFB68
 4604 0024 A8000000 		.4byte	.LFE68
 4605 0028 00000000 		.4byte	.LFB69
 4606 002c 48000000 		.4byte	.LFE69
 4607 0030 00000000 		.4byte	.LFB70
 4608 0034 1E000000 		.4byte	.LFE70
 4609 0038 00000000 		.4byte	.LFB71
 4610 003c 46000000 		.4byte	.LFE71
 4611 0040 00000000 		.4byte	.LFB72
 4612 0044 2C010000 		.4byte	.LFE72
 4613 0048 00000000 		.4byte	.LFB73
 4614 004c 1E000000 		.4byte	.LFE73
 4615 0050 00000000 		.4byte	.LFB74
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 98


 4616 0054 5C040000 		.4byte	.LFE74
 4617 0058 00000000 		.4byte	.LFB75
 4618 005c 44000000 		.4byte	.LFE75
 4619 0060 00000000 		.4byte	.LFB76
 4620 0064 9C020000 		.4byte	.LFE76
 4621 0068 00000000 		.4byte	.LFB77
 4622 006c 74000000 		.4byte	.LFE77
 4623 0070 00000000 		.4byte	.LFB78
 4624 0074 38010000 		.4byte	.LFE78
 4625 0078 00000000 		.4byte	0
 4626 007c 00000000 		.4byte	0
 4627              		.section	.debug_line,"",%progbits
 4628              	.Ldebug_line0:
 4629 0000 78040000 		.section	.debug_str,"MS",%progbits,1
 4629      02004502 
 4629      00000201 
 4629      FB0E0D00 
 4629      01010101 
 4630              	.LASF113:
 4631 0000 745F6D6F 		.ascii	"t_modem\000"
 4631      64656D00 
 4632              	.LASF12:
 4633 0008 75696E74 		.ascii	"uint16\000"
 4633      313600
 4634              	.LASF51:
 4635 000f 746D5F68 		.ascii	"tm_hour\000"
 4635      6F757200 
 4636              	.LASF36:
 4637 0017 6E756D5F 		.ascii	"num_invalid_readings\000"
 4637      696E7661 
 4637      6C69645F 
 4637      72656164 
 4637      696E6773 
 4638              	.LASF179:
 4639 002c 433A5C55 		.ascii	"C:\\Users\\dantz\\Documents\\GitHub\\notoriOS\\noto"
 4639      73657273 
 4639      5C64616E 
 4639      747A5C44 
 4639      6F63756D 
 4640 0059 72694F53 		.ascii	"riOS.cydsn\000"
 4640      2E637964 
 4640      736E00
 4641              	.LASF150:
 4642 0064 62756666 		.ascii	"buffer_overflow\000"
 4642      65725F6F 
 4642      76657266 
 4642      6C6F7700 
 4643              	.LASF144:
 4644 0074 66696C65 		.ascii	"fileName\000"
 4644      4E616D65 
 4644      00
 4645              	.LASF0:
 4646 007d 7369676E 		.ascii	"signed char\000"
 4646      65642063 
 4646      68617200 
 4647              	.LASF86:
 4648 0089 636F756E 		.ascii	"countDownResetCondition\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 99


 4648      74446F77 
 4648      6E526573 
 4648      6574436F 
 4648      6E646974 
 4649              	.LASF180:
 4650 00a1 57616B65 		.ascii	"Wakeup_ISR\000"
 4650      75705F49 
 4650      535200
 4651              	.LASF177:
 4652 00ac 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 4652      43313120 
 4652      352E342E 
 4652      31203230 
 4652      31363036 
 4653 00df 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 4653      20726576 
 4653      6973696F 
 4653      6E203233 
 4653      37373135 
 4654 0112 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 4654      66756E63 
 4654      74696F6E 
 4654      2D736563 
 4654      74696F6E 
 4655              	.LASF111:
 4656 013a 745F7072 		.ascii	"t_pressure\000"
 4656      65737375 
 4656      726500
 4657              	.LASF26:
 4658 0145 4D6F6E74 		.ascii	"Month\000"
 4658      6800
 4659              	.LASF7:
 4660 014b 6C6F6E67 		.ascii	"long long unsigned int\000"
 4660      206C6F6E 
 4660      6720756E 
 4660      7369676E 
 4660      65642069 
 4661              	.LASF22:
 4662 0162 486F7572 		.ascii	"Hour\000"
 4662      00
 4663              	.LASF154:
 4664 0167 6D6F6465 		.ascii	"modem_state\000"
 4664      6D5F7374 
 4664      61746500 
 4665              	.LASF165:
 4666 0173 616C6172 		.ascii	"alarmMeasure\000"
 4666      6D4D6561 
 4666      73757265 
 4666      00
 4667              	.LASF145:
 4668 0180 49544D5F 		.ascii	"ITM_RxBuffer\000"
 4668      52784275 
 4668      66666572 
 4668      00
 4669              	.LASF173:
 4670 018d 74696D65 		.ascii	"timetoLevelSensor\000"
 4670      746F4C65 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 100


 4670      76656C53 
 4670      656E736F 
 4670      7200
 4671              	.LASF108:
 4672 019f 745F6C65 		.ascii	"t_level_sensor\000"
 4672      76656C5F 
 4672      73656E73 
 4672      6F7200
 4673              	.LASF6:
 4674 01ae 6C6F6E67 		.ascii	"long long int\000"
 4674      206C6F6E 
 4674      6720696E 
 4674      7400
 4675              	.LASF122:
 4676 01bc 7061636B 		.ascii	"packets\000"
 4676      65747300 
 4677              	.LASF67:
 4678 01c4 65636E6F 		.ascii	"ecno\000"
 4678      00
 4679              	.LASF166:
 4680 01c9 74696D65 		.ascii	"timeToMeasure\000"
 4680      546F4D65 
 4680      61737572 
 4680      6500
 4681              	.LASF70:
 4682 01d7 74696D65 		.ascii	"time_to_network_connect\000"
 4682      5F746F5F 
 4682      6E657477 
 4682      6F726B5F 
 4682      636F6E6E 
 4683              	.LASF168:
 4684 01ef 74696D65 		.ascii	"timeToSync\000"
 4684      546F5379 
 4684      6E6300
 4685              	.LASF39:
 4686 01fa 766F6C74 		.ascii	"voltage_solar\000"
 4686      6167655F 
 4686      736F6C61 
 4686      7200
 4687              	.LASF40:
 4688 0208 766F6C74 		.ascii	"voltage_charge_current\000"
 4688      6167655F 
 4688      63686172 
 4688      67655F63 
 4688      75727265 
 4689              	.LASF143:
 4690 021f 75706772 		.ascii	"upgrade_status\000"
 4690      6164655F 
 4690      73746174 
 4690      757300
 4691              	.LASF125:
 4692 022e 635F6461 		.ascii	"c_data_count_sent\000"
 4692      74615F63 
 4692      6F756E74 
 4692      5F73656E 
 4692      7400
 4693              	.LASF64:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 101


 4694 0240 6D6F6465 		.ascii	"modem_info_t\000"
 4694      6D5F696E 
 4694      666F5F74 
 4694      00
 4695              	.LASF174:
 4696 024d 616C6172 		.ascii	"alarmDownstreamLevelSensor\000"
 4696      6D446F77 
 4696      6E737472 
 4696      65616D4C 
 4696      6576656C 
 4697              	.LASF65:
 4698 0268 72786C65 		.ascii	"rxlev\000"
 4698      7600
 4699              	.LASF4:
 4700 026e 6C6F6E67 		.ascii	"long int\000"
 4700      20696E74 
 4700      00
 4701              	.LASF71:
 4702 0277 74696D65 		.ascii	"time_to_acquire_ip\000"
 4702      5F746F5F 
 4702      61637175 
 4702      6972655F 
 4702      697000
 4703              	.LASF87:
 4704 028a 616C6172 		.ascii	"alarm\000"
 4704      6D00
 4705              	.LASF45:
 4706 0290 70726573 		.ascii	"pressure_voltage_off\000"
 4706      73757265 
 4706      5F766F6C 
 4706      74616765 
 4706      5F6F6666 
 4707              	.LASF11:
 4708 02a5 75696E74 		.ascii	"uint8\000"
 4708      3800
 4709              	.LASF117:
 4710 02ab 635F7472 		.ascii	"c_try_counter\000"
 4710      795F636F 
 4710      756E7465 
 4710      7200
 4711              	.LASF128:
 4712 02b9 73656E64 		.ascii	"send_time\000"
 4712      5F74696D 
 4712      6500
 4713              	.LASF171:
 4714 02c3 74696D65 		.ascii	"timeToAppLED\000"
 4714      546F4170 
 4714      704C4544 
 4714      00
 4715              	.LASF16:
 4716 02d0 696E7433 		.ascii	"int32\000"
 4716      3200
 4717              	.LASF73:
 4718 02d6 6E6F6465 		.ascii	"node_type\000"
 4718      5F747970 
 4718      6500
 4719              	.LASF114:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 102


 4720 02e0 73796E63 		.ascii	"syncData\000"
 4720      44617461 
 4720      00
 4721              	.LASF123:
 4722 02e9 6E657477 		.ascii	"network_time\000"
 4722      6F726B5F 
 4722      74696D65 
 4722      00
 4723              	.LASF13:
 4724 02f6 75696E74 		.ascii	"uint32\000"
 4724      333200
 4725              	.LASF62:
 4726 02fd 6D6F6465 		.ascii	"model_id\000"
 4726      6C5F6964 
 4726      00
 4727              	.LASF33:
 4728 0306 616C6C5F 		.ascii	"all_level_readings\000"
 4728      6C657665 
 4728      6C5F7265 
 4728      6164696E 
 4728      677300
 4729              	.LASF83:
 4730 0319 636F756E 		.ascii	"countDownValue\000"
 4730      74446F77 
 4730      6E56616C 
 4730      756500
 4731              	.LASF139:
 4732 0328 75706772 		.ascii	"upgraded\000"
 4732      61646564 
 4732      00
 4733              	.LASF53:
 4734 0331 746D5F6D 		.ascii	"tm_mon\000"
 4734      6F6E00
 4735              	.LASF77:
 4736 0338 64656275 		.ascii	"debug_level\000"
 4736      675F6C65 
 4736      76656C00 
 4737              	.LASF141:
 4738 0344 706F7274 		.ascii	"port\000"
 4738      00
 4739              	.LASF58:
 4740 0349 76616C75 		.ascii	"value\000"
 4740      6500
 4741              	.LASF140:
 4742 034f 686F7374 		.ascii	"host\000"
 4742      00
 4743              	.LASF54:
 4744 0354 746D5F79 		.ascii	"tm_year\000"
 4744      65617200 
 4745              	.LASF167:
 4746 035c 616C6172 		.ascii	"alarmSync\000"
 4746      6D53796E 
 4746      6300
 4747              	.LASF44:
 4748 0366 70726573 		.ascii	"pressure_voltage_on\000"
 4748      73757265 
 4748      5F766F6C 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 103


 4748      74616765 
 4748      5F6F6E00 
 4749              	.LASF158:
 4750 037a 4170705F 		.ascii	"App_LED_enabled\000"
 4750      4C45445F 
 4750      656E6162 
 4750      6C656400 
 4751              	.LASF137:
 4752 038a 73657454 		.ascii	"setTime\000"
 4752      696D6500 
 4753              	.LASF60:
 4754 0392 6B65795F 		.ascii	"key_value_t\000"
 4754      76616C75 
 4754      655F7400 
 4755              	.LASF98:
 4756 039e 41796F49 		.ascii	"AyoItsTime\000"
 4756      74735469 
 4756      6D6500
 4757              	.LASF35:
 4758 03a9 6E756D5F 		.ascii	"num_valid_readings\000"
 4758      76616C69 
 4758      645F7265 
 4758      6164696E 
 4758      677300
 4759              	.LASF127:
 4760 03bc 68747470 		.ascii	"http_chunk\000"
 4760      5F636875 
 4760      6E6B00
 4761              	.LASF134:
 4762 03c7 6D5F766F 		.ascii	"m_voltage\000"
 4762      6C746167 
 4762      6500
 4763              	.LASF5:
 4764 03d1 6C6F6E67 		.ascii	"long unsigned int\000"
 4764      20756E73 
 4764      69676E65 
 4764      6420696E 
 4764      7400
 4765              	.LASF95:
 4766 03e3 7472795F 		.ascii	"try_counter\000"
 4766      636F756E 
 4766      74657200 
 4767              	.LASF118:
 4768 03ef 64617461 		.ascii	"data_count_desired\000"
 4768      5F636F75 
 4768      6E745F64 
 4768      65736972 
 4768      656400
 4769              	.LASF38:
 4770 0402 766F6C74 		.ascii	"voltage_battery\000"
 4770      6167655F 
 4770      62617474 
 4770      65727900 
 4771              	.LASF24:
 4772 0412 4461794F 		.ascii	"DayOfMonth\000"
 4772      664D6F6E 
 4772      746800
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 104


 4773              	.LASF131:
 4774 041d 6D616B65 		.ascii	"makeMeasurements\000"
 4774      4D656173 
 4774      7572656D 
 4774      656E7473 
 4774      00
 4775              	.LASF153:
 4776 042e 64617461 		.ascii	"data\000"
 4776      00
 4777              	.LASF92:
 4778 0433 65705F70 		.ascii	"ep_port\000"
 4778      6F727400 
 4779              	.LASF57:
 4780 043b 746D5F69 		.ascii	"tm_isdst\000"
 4780      73647374 
 4780      00
 4781              	.LASF88:
 4782 0444 6D6F6465 		.ascii	"modem_info\000"
 4782      6D5F696E 
 4782      666F00
 4783              	.LASF91:
 4784 044f 65705F68 		.ascii	"ep_host\000"
 4784      6F737400 
 4785              	.LASF14:
 4786 0457 696E7438 		.ascii	"int8\000"
 4786      00
 4787              	.LASF97:
 4788 045c 576F726B 		.ascii	"WorkWorkWorkWorkWorkWork\000"
 4788      576F726B 
 4788      576F726B 
 4788      576F726B 
 4788      576F726B 
 4789              	.LASF119:
 4790 0475 635F6461 		.ascii	"c_data_count_desired\000"
 4790      74615F63 
 4790      6F756E74 
 4790      5F646573 
 4790      69726564 
 4791              	.LASF112:
 4792 048a 745F7364 		.ascii	"t_sd_card\000"
 4792      5F636172 
 4792      6400
 4793              	.LASF2:
 4794 0494 73686F72 		.ascii	"short int\000"
 4794      7420696E 
 4794      7400
 4795              	.LASF170:
 4796 049e 616C6172 		.ascii	"alarmAppLED\000"
 4796      6D417070 
 4796      4C454400 
 4797              	.LASF155:
 4798 04aa 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 4798      6D5F7374 
 4798      6172745F 
 4798      74696D65 
 4798      5F737461 
 4799              	.LASF149:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 105


 4800 04c1 646F776E 		.ascii	"downstream_level_sensor_enabled\000"
 4800      73747265 
 4800      616D5F6C 
 4800      6576656C 
 4800      5F73656E 
 4801              	.LASF90:
 4802 04e1 7379735F 		.ascii	"sys_info_t\000"
 4802      696E666F 
 4802      5F7400
 4803              	.LASF82:
 4804 04ec 75706461 		.ascii	"updatable_parameters_t\000"
 4804      7461626C 
 4804      655F7061 
 4804      72616D65 
 4804      74657273 
 4805              	.LASF99:
 4806 0503 616C6172 		.ascii	"alarmType\000"
 4806      6D547970 
 4806      6500
 4807              	.LASF151:
 4808 050d 64617461 		.ascii	"dataPointsInStack\000"
 4808      506F696E 
 4808      7473496E 
 4808      53746163 
 4808      6B00
 4809              	.LASF109:
 4810 051f 745F646F 		.ascii	"t_down_level\000"
 4810      776E5F6C 
 4810      6576656C 
 4810      00
 4811              	.LASF50:
 4812 052c 746D5F6D 		.ascii	"tm_min\000"
 4812      696E00
 4813              	.LASF142:
 4814 0533 726F7574 		.ascii	"route\000"
 4814      6500
 4815              	.LASF100:
 4816 0539 616C6172 		.ascii	"alarmToBeUpdated\000"
 4816      6D546F42 
 4816      65557064 
 4816      61746564 
 4816      00
 4817              	.LASF21:
 4818 054a 73697A65 		.ascii	"sizetype\000"
 4818      74797065 
 4818      00
 4819              	.LASF175:
 4820 0553 74696D65 		.ascii	"timetoDownstreamLevelSensor\000"
 4820      746F446F 
 4820      776E7374 
 4820      7265616D 
 4820      4C657665 
 4821              	.LASF56:
 4822 056f 746D5F79 		.ascii	"tm_yday\000"
 4822      64617900 
 4823              	.LASF93:
 4824 0577 7379735F 		.ascii	"sys_settings_t\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 106


 4824      73657474 
 4824      696E6773 
 4824      5F7400
 4825              	.LASF138:
 4826 0586 6C6F6361 		.ascii	"localTime\000"
 4826      6C54696D 
 4826      6500
 4827              	.LASF169:
 4828 0590 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 4828      546F5379 
 4828      636E5265 
 4828      6D6F7465 
 4828      50617261 
 4829              	.LASF59:
 4830 05a7 74696D65 		.ascii	"timeStamp\000"
 4830      5374616D 
 4830      7000
 4831              	.LASF28:
 4832 05b1 5254435F 		.ascii	"RTC_TIME_DATE\000"
 4832      54494D45 
 4832      5F444154 
 4832      4500
 4833              	.LASF157:
 4834 05bf 75706461 		.ascii	"updatable_parameters\000"
 4834      7461626C 
 4834      655F7061 
 4834      72616D65 
 4834      74657273 
 4835              	.LASF104:
 4836 05d4 43726561 		.ascii	"CreateAlarm\000"
 4836      7465416C 
 4836      61726D00 
 4837              	.LASF126:
 4838 05e0 7061636B 		.ascii	"packet\000"
 4838      657400
 4839              	.LASF115:
 4840 05e7 735F7273 		.ascii	"s_rsrp\000"
 4840      727000
 4841              	.LASF41:
 4842 05ee 766F6C74 		.ascii	"voltage_pressure\000"
 4842      6167655F 
 4842      70726573 
 4842      73757265 
 4842      00
 4843              	.LASF160:
 4844 05ff 68747470 		.ascii	"http_request\000"
 4844      5F726571 
 4844      75657374 
 4844      00
 4845              	.LASF17:
 4846 060c 666C6F61 		.ascii	"float\000"
 4846      7400
 4847              	.LASF37:
 4848 0612 6C657665 		.ascii	"level_sensor_t\000"
 4848      6C5F7365 
 4848      6E736F72 
 4848      5F7400
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 107


 4849              	.LASF116:
 4850 0621 735F7273 		.ascii	"s_rscp\000"
 4850      637000
 4851              	.LASF130:
 4852 0628 636F6E66 		.ascii	"configureRemoteParams\000"
 4852      69677572 
 4852      6552656D 
 4852      6F746550 
 4852      6172616D 
 4853              	.LASF176:
 4854 063e 44617461 		.ascii	"Data_fileName\000"
 4854      5F66696C 
 4854      654E616D 
 4854      6500
 4855              	.LASF96:
 4856 064c 6D6F6465 		.ascii	"modem_status\000"
 4856      6D5F7374 
 4856      61747573 
 4856      00
 4857              	.LASF29:
 4858 0659 74657374 		.ascii	"test_name\000"
 4858      5F6E616D 
 4858      6500
 4859              	.LASF27:
 4860 0663 59656172 		.ascii	"Year\000"
 4860      00
 4861              	.LASF81:
 4862 0668 5F426F6F 		.ascii	"_Bool\000"
 4862      6C00
 4863              	.LASF10:
 4864 066e 696E7433 		.ascii	"int32_t\000"
 4864      325F7400 
 4865              	.LASF1:
 4866 0676 756E7369 		.ascii	"unsigned char\000"
 4866      676E6564 
 4866      20636861 
 4866      7200
 4867              	.LASF164:
 4868 0684 73797374 		.ascii	"system_settings\000"
 4868      656D5F73 
 4868      65747469 
 4868      6E677300 
 4869              	.LASF69:
 4870 0694 72737270 		.ascii	"rsrp\000"
 4870      00
 4871              	.LASF68:
 4872 0699 72737271 		.ascii	"rsrq\000"
 4872      00
 4873              	.LASF101:
 4874 069e 52657365 		.ascii	"ResetAlarm\000"
 4874      74416C61 
 4874      726D00
 4875              	.LASF129:
 4876 06a9 735F7365 		.ascii	"s_send_time\000"
 4876      6E645F74 
 4876      696D6500 
 4877              	.LASF76:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 108


 4878 06b5 73796E63 		.ascii	"sync_time\000"
 4878      5F74696D 
 4878      6500
 4879              	.LASF47:
 4880 06bf 70726573 		.ascii	"pressure_depth\000"
 4880      73757265 
 4880      5F646570 
 4880      746800
 4881              	.LASF66:
 4882 06ce 72736370 		.ascii	"rscp\000"
 4882      00
 4883              	.LASF23:
 4884 06d3 4461794F 		.ascii	"DayOfWeek\000"
 4884      66576565 
 4884      6B00
 4885              	.LASF32:
 4886 06dd 74657374 		.ascii	"test_t\000"
 4886      5F7400
 4887              	.LASF163:
 4888 06e4 73797374 		.ascii	"system_info\000"
 4888      656D5F69 
 4888      6E666F00 
 4889              	.LASF63:
 4890 06f0 696D6569 		.ascii	"imei\000"
 4890      00
 4891              	.LASF31:
 4892 06f5 72656173 		.ascii	"reason\000"
 4892      6F6E00
 4893              	.LASF102:
 4894 06fc 616C6172 		.ascii	"alarmToBeReset\000"
 4894      6D546F42 
 4894      65526573 
 4894      657400
 4895              	.LASF107:
 4896 070b 43686963 		.ascii	"ChickityCheckYourselfBeforeYouWreckYourself\000"
 4896      6B697479 
 4896      43686563 
 4896      6B596F75 
 4896      7273656C 
 4897              	.LASF124:
 4898 0737 64617461 		.ascii	"data_count_sent\000"
 4898      5F636F75 
 4898      6E745F73 
 4898      656E7400 
 4899              	.LASF72:
 4900 0747 6D6F6465 		.ascii	"modem_stats_t\000"
 4900      6D5F7374 
 4900      6174735F 
 4900      7400
 4901              	.LASF46:
 4902 0755 70726573 		.ascii	"pressure_current\000"
 4902      73757265 
 4902      5F637572 
 4902      72656E74 
 4902      00
 4903              	.LASF42:
 4904 0766 76616C69 		.ascii	"valid\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 109


 4904      6400
 4905              	.LASF172:
 4906 076c 616C6172 		.ascii	"alarmLevelSensor\000"
 4906      6D4C6576 
 4906      656C5365 
 4906      6E736F72 
 4906      00
 4907              	.LASF55:
 4908 077d 746D5F77 		.ascii	"tm_wday\000"
 4908      64617900 
 4909              	.LASF79:
 4910 0785 4C657665 		.ascii	"Level_Sensor_freq\000"
 4910      6C5F5365 
 4910      6E736F72 
 4910      5F667265 
 4910      7100
 4911              	.LASF146:
 4912 0797 6C657665 		.ascii	"level_sensor_inbox\000"
 4912      6C5F7365 
 4912      6E736F72 
 4912      5F696E62 
 4912      6F7800
 4913              	.LASF20:
 4914 07aa 6C6F6E67 		.ascii	"long double\000"
 4914      20646F75 
 4914      626C6500 
 4915              	.LASF121:
 4916 07b6 6368756E 		.ascii	"chunk\000"
 4916      6B00
 4917              	.LASF132:
 4918 07bc 635F7469 		.ascii	"c_timeStamp\000"
 4918      6D655374 
 4918      616D7000 
 4919              	.LASF19:
 4920 07c8 63686172 		.ascii	"char\000"
 4920      00
 4921              	.LASF8:
 4922 07cd 756E7369 		.ascii	"unsigned int\000"
 4922      676E6564 
 4922      20696E74 
 4922      00
 4923              	.LASF156:
 4924 07da 6D6F6465 		.ascii	"modem_stats\000"
 4924      6D5F7374 
 4924      61747300 
 4925              	.LASF162:
 4926 07e6 68747470 		.ascii	"http_route\000"
 4926      5F726F75 
 4926      746500
 4927              	.LASF120:
 4928 07f1 706F7274 		.ascii	"portConfig\000"
 4928      436F6E66 
 4928      696700
 4929              	.LASF9:
 4930 07fc 5F5F696E 		.ascii	"__int32_t\000"
 4930      7433325F 
 4930      7400
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 110


 4931              	.LASF94:
 4932 0806 756E6971 		.ascii	"uniqueId\000"
 4932      75654964 
 4932      00
 4933              	.LASF135:
 4934 080f 6D5F6C65 		.ascii	"m_level_sensor\000"
 4934      76656C5F 
 4934      73656E73 
 4934      6F7200
 4935              	.LASF34:
 4936 081e 6C657665 		.ascii	"level_reading\000"
 4936      6C5F7265 
 4936      6164696E 
 4936      6700
 4937              	.LASF181:
 4938 082c 4C617942 		.ascii	"LayBack\000"
 4938      61636B00 
 4939              	.LASF3:
 4940 0834 73686F72 		.ascii	"short unsigned int\000"
 4940      7420756E 
 4940      7369676E 
 4940      65642069 
 4940      6E7400
 4941              	.LASF61:
 4942 0847 73696D5F 		.ascii	"sim_id\000"
 4942      696400
 4943              	.LASF52:
 4944 084e 746D5F6D 		.ascii	"tm_mday\000"
 4944      64617900 
 4945              	.LASF105:
 4946 0856 6E657741 		.ascii	"newAlarm\000"
 4946      6C61726D 
 4946      00
 4947              	.LASF80:
 4948 085f 446F776E 		.ascii	"Downstream_Level_Sensor_freq\000"
 4948      73747265 
 4948      616D5F4C 
 4948      6576656C 
 4948      5F53656E 
 4949              	.LASF49:
 4950 087c 746D5F73 		.ascii	"tm_sec\000"
 4950      656300
 4951              	.LASF136:
 4952 0883 6D5F7072 		.ascii	"m_pressure\000"
 4952      65737375 
 4952      726500
 4953              	.LASF30:
 4954 088e 73746174 		.ascii	"status\000"
 4954      757300
 4955              	.LASF147:
 4956 0895 6C657665 		.ascii	"level_sensor_enabled\000"
 4956      6C5F7365 
 4956      6E736F72 
 4956      5F656E61 
 4956      626C6564 
 4957              	.LASF152:
 4958 08aa 64617461 		.ascii	"dataPointsInStackDesired\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 111


 4958      506F696E 
 4958      7473496E 
 4958      53746163 
 4958      6B446573 
 4959              	.LASF78:
 4960 08c3 4170705F 		.ascii	"App_LED_freq\000"
 4960      4C45445F 
 4960      66726571 
 4960      00
 4961              	.LASF110:
 4962 08d0 745F766F 		.ascii	"t_voltages\000"
 4962      6C746167 
 4962      657300
 4963              	.LASF178:
 4964 08db 6E6F746F 		.ascii	"notoriOS.c\000"
 4964      72694F53 
 4964      2E6300
 4965              	.LASF161:
 4966 08e6 68747470 		.ascii	"http_body\000"
 4966      5F626F64 
 4966      7900
 4967              	.LASF15:
 4968 08f0 696E7431 		.ascii	"int16\000"
 4968      3600
 4969              	.LASF85:
 4970 08f6 636F756E 		.ascii	"countDownType\000"
 4970      74446F77 
 4970      6E547970 
 4970      6500
 4971              	.LASF84:
 4972 0904 63757272 		.ascii	"currentCountDownValue\000"
 4972      656E7443 
 4972      6F756E74 
 4972      446F776E 
 4972      56616C75 
 4973              	.LASF74:
 4974 091a 73696D5F 		.ascii	"sim_type\000"
 4974      74797065 
 4974      00
 4975              	.LASF25:
 4976 0923 4461794F 		.ascii	"DayOfYear\000"
 4976      66596561 
 4976      7200
 4977              	.LASF48:
 4978 092d 70726573 		.ascii	"pressure_t\000"
 4978      73757265 
 4978      5F7400
 4979              	.LASF103:
 4980 0938 416C6172 		.ascii	"AlarmReady\000"
 4980      6D526561 
 4980      647900
 4981              	.LASF106:
 4982 0943 52656164 		.ascii	"ReadyOrNot\000"
 4982      794F724E 
 4982      6F7400
 4983              	.LASF182:
 4984 094e 6D61696E 		.ascii	"main\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgbYztP.s 			page 112


 4984      00
 4985              	.LASF89:
 4986 0953 63686970 		.ascii	"chip_uniqueId\000"
 4986      5F756E69 
 4986      71756549 
 4986      6400
 4987              	.LASF75:
 4988 0961 6D656173 		.ascii	"measure_time\000"
 4988      7572655F 
 4988      74696D65 
 4988      00
 4989              	.LASF18:
 4990 096e 646F7562 		.ascii	"double\000"
 4990      6C6500
 4991              	.LASF159:
 4992 0975 6170705F 		.ascii	"app_led_inbox\000"
 4992      6C65645F 
 4992      696E626F 
 4992      7800
 4993              	.LASF148:
 4994 0983 646F776E 		.ascii	"downstream_level_sensor_inbox\000"
 4994      73747265 
 4994      616D5F6C 
 4994      6576656C 
 4994      5F73656E 
 4995              	.LASF43:
 4996 09a1 766F6C74 		.ascii	"voltage_t\000"
 4996      6167655F 
 4996      7400
 4997              	.LASF133:
 4998 09ab 635F6E6F 		.ascii	"c_node_type\000"
 4998      64655F74 
 4998      79706500 
 4999              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
